ЗАДАЧИ ПРОЕКТИРОВАНИЯ АДАПТИВНЫХ ИНТЕРФЕЙСОВ САПР																																																																											

На любой стадии создания проекта с использованием систем автоматизации проектирования (САПР) проектировщику целесообразно располагать некоторым набором средств, упрощающих и ускоряющих его работу, средств, помогающих ему в его информационной и конструктивной деятельности по пониманию и анализу сущности проектной задачи. Такой набор средств должен предоставить проектировщику помощь в решении как сложных задач проектирования или построения смет проекта, так и в решении простых задач. При этом решение простых, рутинных задач, должно проходить при минимальном участии проектировщика. В рамках жизненного цикла промышленных изделий, САПР решает задачи автоматизации работ на стадиях проектирования и подготовки производства. Основная цель создания САПР - повышение эффективности труда инженеров. К сожалению, несмотря на наличие достаточно серьезных комплексных САПР, специалисты вынуждены решать многие узкоспециализированные задачи в слабо автоматизированном режиме. Современные САПР предоставляют богатые возможности настройки и наращивания функционала.																																																																											
Сегодня можно чётко выделить два подхода к кастомизации САПР.																																																																											
-настройка существующего функционала - это набор средств, позволяющих подключать и отключать существующие функции систем автоматизированного проектирования. Этот набор средств, как правило, прост в использовании и не требует от специалиста дополнительных навыков в области программирования, при этом не предоставляется возможность добавления функций, не предусмотренных разработчиками;																																																																											
-наращивание функционала представляет собой набор средств, позволяющих расширить систему автоматизированного проектирования функциями, не предусмотренными разработчиками системы. Как правило, этот набор средств, представлен в виде сложного логико-математического аппарата. Работа с этим аппаратом предполагает наличие у специалиста глубоких знаний об архитектуре конкретной САПР и навыков программирования, наращивание функционала отнимает много времени.																																																																											
Исследования в области адаптивных интерфейсов автоматизированных систем актуальны, поскольку позволяют создать набор общих принципов позволяющих реализовать аппарат, который позволит специалистам в области САПР добавлять новые, необходимые им функции к системам автоматизированного проектирования, при этом, не требуя от специалиста владения навыками программирования. Новый аппарат позволит создавать новые функции системы, быстрее, чем классические логикоматематические аппараты САПР типа LISP. В изложенном контексте автором ставится задача разработки абстрактной модели построения адаптивного интерфейса пользователя САПР и определения способов интеграции средств адаптивного интерфейса пользователя, в современные САПР.																																																																											
При этом следует эффективно решать следующие общие задачи: 																																																																											
определить роль и место адаптивного интерфейса пользователя в современных САПР:																																																																											
выделить области задач САПР, требующие наличия адаптивного интерфейса пользователя;																																																																											
отыскать вспомогательные средства, позволяющие интегрировать адаптивный интерфейс пользователя в современные САПР;																																																																											
построить реальные предметные модели адаптивного интерфейса пользователя, и изучить возможности их применения в САПР.																																																																											
В качестве объекта исследования целесообразно рассматривать системное строительное проектирование как вид деятельности, в котором реализуются все возможные действия над объектом проектирования на всех его жизненных этапах. Предмет исследования становятся системотехнические и информационные особенности представления объектов и процессов в автоматизированном строительном проектировании, логико-математический аппарат систем автоматизированного проектирования, эргономика пользовательского интерфейса и удобство эксплуатации.																																																																											
Исследования необходимо строить в рамках классической математической логики,																																																																											
системного анализа систем кастомизации различного уровня, используемых в рамках современных САПР и автоматизированных систем управления (АСУ) наиболее распространенных классов в строительстве.																																																																											
В качестве новых результатов подобного исследования можно позиционировать: 																																																																											
методы построения абстрактных и предметных моделей адаптивных интерфейсов пользователя САПР, не требующих наличия сложного логико-математического аппарата;																																																																											
предметную классификацию различных типов моделей адаптивного фейса пользователя, по типам решаемых задач; 																																																																											
требования к логико-математическому аппарату САПР, предусматривающие возможность создания надмножества моделей адаптивного интерфейса пользователя уровня практических приложений.																																																																											

ОЦЕНКА СТЕПЕНИ УДОБСТВА ИСПОЛЬЗОВАНИЯ ПОЛЬЗОВАТЕЛЬСКИХ ИНТЕРФЕЙСОВ В ЛОГИКЕ ТАЙЛОВ																																																																											

В стандарте ISO/IEC 25010 введен термин «юзабилити» (от англ. usability), означающий «удобство и простоту использования, степень удобства использования», а также пригодность использования, эргономичность (способность приложения быть понимаемым, изучаемым, используемым и привлекательным для пользователя в заданных условиях для достижения установленных целей с необходимой результативностью, эффективностью и удовлетворенностью). Далее вместо термина «юзабилити» будем использовать словосочетание «степень удобства использования».																																																																											
Объект исследования настоящей работы — степень удобства использования пользовательских интерфейсов, обеспечивающих взаимодействие пользователя с программными приложениями и осуществляемых в среде одной или совокупности веб-страниц посредством веб-браузера. 																																																																											
Существует много традиционных средств оценки степени удобства использования, среди которых проверка по контрольному списку [1], эвристическая оценка [2], мысленный прогон [3], множественный прогон [4],  оценки функциональности [5], анализ задач [6], фокус группы [7], обзорные исследования и интервью, вопросники и анкетирование, фиксация 																																																																											
зрительной активности пользователей [8] и др. Однако все эти оценки степени удобства использования довольно трудоемки, что проявляется в затратах времени на подготовку к сравнительному анализу, отбор респондентов и дальнейший анализ полученных результатов специалистами че-  ловекомашинного взаимодействия, в некоторых случаях необходимо  наличие специального оборудования. Чтобы снизить сложность и объем  работ, выполняемых вручную, актуально направление автоматизации  оценки степени удобства использования. В этом направлении существует  три основных подхода к автоматизации оценки степени удобства использования визуальных пользовательских интерфейсов. 																																																																											
Подход 1. Анализ свойств пользовательских логов. Анализ осуществ-  ляется в хронологическом порядке по записи действий пользователя в  процессе взаимодействия с реальными приложениями или их динамическими прототипами. Как правило, такими действиями являются перемещение курсора мыши, время, затраченное пользователем для взаимодействия с одной и той же страницей, переходы между страницами и пр. 																																																																											
Наиболее популярными сервисами, предоставляющими услуги по  сбору пользовательских логов и их анализу, являются сервисы Соое  АпауИс$ и Уапаех Менчсз. Эти сервисы обрабатывают собранные данные  и на основе их могут визуализировать данные в виде: 																																																																											
— карты кликов, отображающей клики по всем элементам страниц  приложения, тем самым помогая выявлять элементы, к которым приме-  нено наибольшее число кликов (максимально кликабельные), определять, какие элементы принимаются пользователем за ссылку, но таковой  не являются. По картам кликов могут быть сформированы «тепловые  карты», на которых места, соответствующие максимально кликабельным  элементам, отображаются теплыми цветами, наименее кликабельным —  холодными, а все другие — промежуточными цветами, зависящими от  соответствующего им числа кликов; 																																																																											
— карты ссылок, отображающие число переходов по ссылке, долю пе-  реходов относительно других ссылок на странице;																																																																											
— карты скроллинга, отображающие время внимания посетителей  определенным элементам страницы сайта; позволяют эксперту человеко-  машинного взаимодействия подбирать оптимальную длину страницы и 																																																																											
правильно размещать важную информацию;  																																																																											
— карты путей по приложению, отображающие перемещение пользо- 																																																																											
вателей по страницам приложения; по этим картам эксперт человеко-  машинного взаимодействия анализирует особенности последовательностей перемещения пользователей по страницам приложения. 																																																																											
Сервисы логирования представляют собой инструменты для сбора и визуализации данных для дальнейшего ручного анализа человеком, который  чаще всего не является экспертом человекомашинного взаимодействия и не  всегда может правильно интерпретировать полученные данные. Анализ человеком этих данных является менее трудоемким, чем анализ аудиовизуальной информации, получаемой при проведении традиционных исследований степени удобства использования. Для того чтобы собирать данные  о взаимодействии пользователя с приложением, оно должно быть запущено  в рабочую эксплуатацию, что при его низком качестве влечет за собой потерю потенциальных клиентов. Трудности со сбором данных испытывают  приложения с низкой посещаемостью, что приводит к большим срокам  проведения оценки степени удобства использования. При использовании  логирования практически невозможно точно выяснить причины ухода  пользователя с приложения. Уход пользователя может быть как следствием  того, что он достиг своей цели в результате работы с приложением, так и,  наоборот, он не смог достичь цели. 																																																																											
Один из главных недостатков указанных сервисов логирования —  недостаточная автоматизация процесса анализа логов. Существуют работы, в которых степень автоматизации логирования существенно выше.  Вот некоторые из наиболее известных. 																																																																											
Метод анализа, который позволяет обнаружить в логах различных  пользователей одинаковые последовательности действий, характерные  для большинства из них, представлен в работе [9]. Эти одинаковые для  большинства пользователей последовательности рассматриваются как  шаблоны, из которых складывается взаимодействие каждого пользователя с приложением. Затем, используя критерий скорости достижения  пользователем цели и генетический алгоритм, выявляются эффективные  и неэффективные шаблоны взаимодействия пользователя с приложением и на основе этого делается вывод о степени удобства использования  приложения (чем больше число использованных эффективных шаблонов, тем выше степень удобства использования приложения).																																																																											
Инструмент, который позволяет вручную задать наилучшую с точки 																																																																											
зрения ее создателя последовательность действий пользователя в процессе взаимодействия с приложением (эталонный лог), рассмотрен в работе  [19]. После этого реальный лог, полученный в результате взаимодействия пользователя с приложением, сравнивается с эталонным логом по  определенной мере. Чем ближе эталонный и реальный логи друг к другу,  согласно этой мере, тем выше степень удобства использования приложения. Недостатком такого подхода является необъективность и интуитивность создания эталонного лога, а также увеличение временных затрат  на его создание по мере повышения сложности приложения и числа его 																																																																											
модификаций.  																																																																											
Подход 2. Параметрический анализ свойств страниц. Осуществляет- 																																																																											
ся проверка отдельных параметров страниц приложения на соответствие  рекомендациям по дизайну, визуальному шуму и сложности интерфейса,  а также выявление областей страницы, на которые пользователь прежде  всего обратит внимание при просмотре страницы. 																																																																											
Оценивать страницы интерфейса на основе параметров графики и текста предложено в работе [11]. Здесь утверждается, что соотношение графики  и текста играет важную роль в улучшении внешнего вида страниц, что,  в свою очередь, оказывает влияние на эстетические чувства пользователей,  которые они испытывают при работе с приложением. Для эстетического  анализа в работе [2] построена нейронная сеть, анализирующая, как конкретная комбинация элементов пользовательского интерфейса вебстраницы влияет на эстетические чувства пользователей при работе с ней.  Результатом применения нейронной сети является оценка страницы по пя-  тибалльной шкале (нейросеть имеет пять выходов, каждому из которых соответствует одна из пяти взаимоисключающих оценок), которая помогает  веб-дизайнерам оценить степень удобства использования приложения. Для  построения нейронной сети применялась обучающая выборка, содержащая  96 страниц с их эстетическими оценками. Эстетические оценки определялись субъективно экспертами человекомашинного взаимодействия с различным опытом работы. Задачи, для решения которых предназначались  страницы, не учитывались. Для построения нейронной сети использовались  только статические страницы. 																																																																											
Метод определения значимости элементов на страницах по движению глаз пользователя на различных страницах приложения предложен  в работе [12]. Полученная информация может дать представление о том,  как воспринимается интерфейс страницы и где находится самый важный  или релевантный контент. Инструмент позволяет предсказывать важность различных элементов интерфейса, но без учета различных категорий пользователей и контекстов. 																																																																											
Подход 3. Моделе-ориентированное доказательство наличия свойств  взаимодействия. Создается архитектура системы взаимодействия и формулируются свойства, которым эта архитектура должна удовлетворять. Затем  эти свойства проверяются применительно к созданной архитектуре. Так,  в работе [13] рассмотрены свойства мультимодальных интеллектуальных  интерфейсов, реализация которых обеспечивает естественное «безбарьерное» взаимодействие пользователя с приложением. Если какое-либо свойство взаимодействия должно быть реализовано, то, во-первых, необходима  его точная спецификация и, во-вторых, возможность формальной проверки  этой спецификации применительно к конкретному взаимодействию. Кроме  того, формулировка этих свойств должна носить объективный характер,  признанный мировым сообществом. 																																																																											
Из известных реализаций моделе-ориентированного подхода доказательства наличия свойств можно также назвать работу [14], в которой  представлен инструмент МЕМО, содержащий модель приложения и модель пользователя. Модель пользователя правильно взаимодействует с  моделью приложения, если правила генерации ошибок, которые экспертно задает разработчик, не возникают в процессе выполнения задачи  (в процессе взаимодействия). Другими словами, модель приложения не  переходит в состояние, которое нежелательно для идеального взаимодействия. Задаваемые правила генерации ошибок являются субъективными правилами эксперта. Чем масштабнее интерфейс приложения (модель приложения), тем больше требуется времени, затрачиваемого на  определение правил генерации ошибок. При внесении изменений в интерфейс приложения также необходимо редактировать правила генерации ошибок, добавляя новые и удаляя неактуальные. 																																																																											
В первом столбце таблицы перечислены, согласно приведенному аналитическому обзору [9], критерии для сравнения качества различных подходов оценки степени удобства использования приложений. В остальных  столбцах для каждого из трех подходов знак «+» указывает на то, что подход удовлетворяет критерию, а знак «-» — не удовлетворяет. Согласно  данным, приведенным в таблице, наибольшему числу критериев из рас-  смотренных подходов удовлетворяет моделе-ориентированное доказательство наличия свойств. Остаются неудовлетворенными три критерия:  1) возможность объяснения поведения пользователей; 2) отсутствие необходимости приглашения экспертов человекомашинного взаимодействия;  3) отсутствие субъективного фактора.																																																																											
Даже с учетом неудовлетворенности перечисленных трех критериев 																																																																											
подход 3 является наилучшим. Этот подход использует модели архитектуры и поведения системы, в которой реализуется взаимодействие. Если  создатель какой-либо модели полагает, что ее архитектура и поведение  обладает всеми необходимыми объективными свойствами, обеспечивающими необходимую степень удобства использования, то остается только доказать, что архитектура и поведение удовлетворяют этим свойствам.																																																																											
Авторы настоящей работы полагают, что устранение указанных недостатков неудовлетворенности критериев (возможность объяснения поведения пользователей, отсутствие необходимости приглашения экспертов  человекомашинного взаимодействия, отсутствие субъективного фактора)  возможно на пути автоматизированного моделе-ориентированного доказательства (вывода) наличия объективных свойств архитектуры и поведения  взаимодействующих моделей пользователя и приложения в рамках адек-  ватного исчисления, включающего в себя: 																																																																											
— формальный язык адекватного описания шаблонов поведения  пользователя и исполнителя в процессе взаимодействия; 																																																																											
— формальное описание на этом языке объективных свойств архитектуры и поведения взаимодействующих моделей, гарантирующих высокую степень удобства использования приложений; 																																																																											
— множества состоятельных правил вывода в этом языке;  																																																																											
— стратегию вывода, гарантирующую полноту доказательства нали- 																																																																											
чия свойств архитектуры и поведения взаимодействующих моделей.																																																																											
Формальное описание объективных свойств архитектуры и поведе-  																																																																											
ния взаимодействующих моделей, гарантирующих высокую степень  удобства использования приложений, позволит избавиться от необходимости приглашения экспертов человекомашинного взаимодействия и, 																																																																											
как следствие, от их субъективного мнения.  																																																																											
Стратегия вывода, гарантирующая полноту доказательства наличия 																																																																											
свойств архитектуры и поведения взаимодействующих моделей на основе состоятельных правил вывода, позволит выявлять степень удобства  использования и причины неудобства. 																																																																											
Автоматизация стратегии вывода обеспечит простоту оценки степени  удобства приложения после внесения изменений в процесс взаимодействия. 																																																																											
По мнению авторов работы, наиболее адекватным для автоматизации  оценки степени удобства использования приложений является язык логики тайлов. Это мнение основано, в частности, на том, что тайл, как кон-  струкция, позволяет, с одной стороны, естественным образом отображать  элементы страниц, а с другой, — интерфейсы между элементами, осуществляемыми в результате определенных действий пользователя. Кроме  того, из тайлов по определенным правилам могут компоноваться допустимые последовательности взаимодействия пользователя с системой, которые служат средством оценки степени удобства использования. 																																																																											
Принципы доказательства каких-либо свойств систем на основе логики тайлов известны достаточно давно [15]. Для того чтобы создать язык  логики тайлов для рассматриваемого случая, необходимо, прежде всего,  создать базовое множество тайлов, позволяющих представлять поведение  приложения (агента-исполнителя) и респондента (агента-пользователя). 																																																																											
Далее приведены основные понятия, связанные с тайлами, затем  представлена суть формального описания моделей приложения (агентаисполнителя) и респондента (агента-пользователя) с помощью тайлов.  Введены критерии, по которым будет оцениваться степень удобства приложения. Приведен простой пример выявления степени удобства приложения в простом языке логики тайлов, а также направления дальнейших работ в области автоматизации оценки удобства приложений на ос-  нове логики тайлов. 																																																																											
Тайлы и операции над ними. Достоинства логики тайлов связаны со  структурой ее правил вывода, каждое из которых может быть представлено в виде тайла (Ше) (рис. 1) 																																																																											
В символическом виде тайл может быть представлен следующим образом:																																																																											
Каждый тайл описывает отдельный элемент поведения системы в терминах возможных взаимодействий с внешней средой. В целом поведение  системы выглядит как скоординированное взаимодействие отдельных  тайлов. Тайлы могут композироваться горизонтально, вертикально и параллельно для того, чтобы задавать более сложное поведение систем.  Та или иная логика тайлов получается в результате введения множества  базовых тайлов и некоторой совокупности вспомогательных тайлов, над  которыми могут совершаться операции композиции. 																																																																											
Модель оценки степени удобства. Для демонстрации принципов методологии автоматизации процесса оценки степени удобства пользовательских интерфейсов использована архитектура, моделирующая пользовательский интерфейс и состоящая из агента-исполнителя и агентапользователя. Агент-исполнитель имеет два канала: 1) входной канал ОЁ,  являющийся выходным для агента-пользователя; 2) выходной канал ЕИ,  являющийся входным для агента-пользователя (рис. 2). Во входной канал  агента-исполнителя агент-пользователь может помещать сообщение, которое может забирать агент-исполнитель. В выходной канал агент-  исполнитель может помещать сообщение для агента-пользователя. Здесь и  далее агента-исполнителя и агента-пользователя будем называть исполнителем и пользователем соответственно.																																																																											
Пара [ОЕ(т„), ЕО (т.)], где ОЕ(т„) означает, что в канале ОЕ  находится сообщение ти, а в канале ЕО — сообщение ть, является в рас-  сматриваемом случае конфигурацией, упоминаемой при определении тайла  (см. рис. 1). Если безразлично, какое сообщение находится в том или ином 																																																																											
канале, то вместо указания конкурентного сообщения будем ставить знак  «_ ». Если в канале ничего нет, то будем использовать знак «©». 																																																																											
Взаимодействие исполнителя и пользователя начинается после получения от пользователя уведомления о начале взаимодействия. Если  исполнитель дал согласие на взаимодействие, то оно продолжается.  В противном случае взаимодействие прекращается. Пользователь прекращает взаимодействие путем отправки соответствующего сообщения  исполнителю. 																																																																											
Архитектура пользовательских интерфейсов. Как уже было отмечено выше, пользовательский интерфейс — процесс, обеспечивающий взаимодействие пользователя с исполнителем (программным приложением). Для того чтобы формализовать это взаимодействие, введем следующие понятия и обозначения. 																																																																											
Архитектурой пользовательского интерфейса назовем пятерку  																																																																											
1= {Р,В,Е,ТЕ,Ти}, где Р — множество страниц р интерфейса, реР; 																																																																											
В(р) — множество блоков В страницы р, БеВ(р); Е) — множество элементов е блока В, ее Е(Б); Те, То — множества тайлов, описывающих поведение исполнителя и пользователя. Страницы, блоки и элементы имеют уникальное обозначение р, В, е с числовыми индексами, играющее 																																																																											
роль объектной (индивидной) переменной, которую будем называть просто объектом. Значение объектной переменной — объектная константа,  являющаяся набором значений таких атрибутов, как пояснение, поле  ввода, поле вывода, кнопка, изображение, список, видеоматериал, аудиоматериал, всплывающая подсказка, форма, цвет, яркость и др. Каждый  атрибут может иметь достаточно сложную структуру. Как правило, многие атрибуты в их явном виде скрыты от пользователя. 																																																																											
Так, на рис. 3 показан простой пример страницы р! пользовательского интерфейса, содержащий блок В! = Преобразование систем счисления  (ПОС) и элементы ев! = Исходная система счисления (ИСС), е› = Исходное  число (ИЧ), ез = Результирующая система счисления (РСС), ед = Результирующее число (РЧ). Здесь текст «Преобразование систем счисления»  поясняет назначение блока В!, тексты «Исходная систем счисления»,  «Исходное число» являются полями ввода элементов ет, е2, а тексты «Результирующая система счисления», «Результирующее число» — полями  вывода элементов ез, е4.																																																																											
Тайлы для описания поведения исполнителя. Поведение исполнителя описывается двумя типами тайлов. 																																																																											
Тайл «Указание исполнителем объекта, находясь в конфигурации, осуществляет восприятие сообщения т,, имену-  ющее тот или иной объект, к которому пользователю необходим доступ,  выдает реакцию !7., указывающую на объект !1., к которому пользователю разрешается доступ, устанавливает конечный выходной интерфейс 																																																																											
100 = те. Конечная конфигурация тайла «Указание исполнителем объекта»  при этом становится конфигурацией: Тайл «Обработка объекта исполнителем (ООИ) всегда выполняется 																																																																											
после тайла «Указание исполнителем объекта», согласно горизонтальной  композиции тайлов, и позволяет помещать реакцию исполнителя (сооб- 																																																																											
щение исполнителя) ть в выходной канал ЕП в ответ на восприятие  собственной реакции те и в ответ на восприятие сообщения пользоваеля т„ тайлом «Указание исполнителем объекта», а также при условии, что его начальный и конечный входные интерфейсы совпадают с  начальным и конечным выходными интерфейсами тайла «Указание исполнителем объекта». Начальная конфигурация  тайла «Обработка объекта исполнителем» переходит в конечную конфигурацию: 																																																																											
'Тайлы для описания поведения пользователя. Поведение исполнителя описывается тремя типами тайлов. 																																																																											
Тайл «Инициализация пользователем взаимодействия (ИПВ)» позволяет начать взаимодействие пользователя и исполнителя. Согласно этому  тайлу, его начальной конфигурацией является (каналы 																																																																											
пустые), его начальные входной и выходной интерфейсы и восприятие  также являются пустыми. Тайл позволяет выдавать реакцию !ти, имену-  ющую объект, с которого следует начинать взаимодействие. В результате  конечная конфигурация тайла становится равной 																																																																											
а конечный выходной интерфейс о, =ти, означающий разрешение доступа к объекту Ти: Тайл «Указание пользователем объекта» позволяет формировать  выходной конечный интерфейс пользователя в ответ на восприятие  пользователя (сообщение исполнителя). Тайл, находясь в конфигурации , осуществляет восприятие сообщения т, именующее  тот или иной объект, к которому разрешен доступ исполнителю с помощью тайла «Указание исполнителем объекта», начальный выходной интерфейс. ? о; = ть х выдает реакцию !т., запрашивающую доступ к объекту 																																																																											
те. Конечная конфигурация тайла «Указание исполнителем объекта»  при этом становится конфигурацией 																																																																											
Тайл «Обработка объекта пользователем» выполняется после тайла  «Указание пользователем объекта», согласно вертикальной композиции  тайлов, и выдает реакцию пользователя ти (результат обработки объекта 																																																																											
т,) в выходной канал ОЕ в ответ на восприятие собственной реакции ! т,  подтверждающей восприятие сообщения т, пользователя тайлом «Указание исполнителем объекта» и при условии, что его начальные входной и  выходной интерфейсы совпадают с конечными входным и выходным интерфейсами тайла «Указание пользователем объекта». Начальная конфигурация тайла «Обработка объекта пользователем» пе-  реходит в конечную конфигурацию 																																																																											
Пример взаимодействия пользователя и исполнителя в логике  тайлов. Для страницы, пример которой приведен на рис. 3, введем сле- 																																																																											
дующие тайлы.  																																																																											
Тайл «Инициализация пользователем взаимодействия», задающий 																																																																											
конечный выходной интерфейс о, = ри, т. е. страницу ру, с которой  должно начаться взаимодействие: 																																																																											
'Тайл «Указание исполнителем объекта», подтверждающий своей реакцией !р1 согласие исполнителя на обработку пользователем страницы |1: 																																																																											
'Тайл «Указание пользователем объекта», запрашивающий своей реакцией !Ё! доступ к блоку в:																																																																											
'Тайл «Указание исполнителем объекта», подтверждающий своей реакцией !Б! согласие исполнителя на обработку пользователем блока в: 																																																																											
'Тайл «Указание пользователем объекта», запрашивающий своей реакцией !е, доступ к элементу е1: 																																																																											
Тайл «Указание исполнителем объекта», подтверждающий своей реакцией !е, согласие исполнителя на обработку пользователем элемента еи: 																																																																											
Тайлов (7)-—(12) достаточно для моделирования поведения пользователя и исполнителя в процессе навигации от страницы р! к элементу е!,  так как на этом этапе никакой обработки объектов не осуществляется.  Это поведение представлено композицией тайлов (рис. 4). Для компактного представления композиции тайлы представлены несколько в ином  виде, а именно в виде трех строк, где первая строка содержит начальный  входной и выходной интерфейсы и начальную конфигурацию, вторая  строка — восприятие и реакцию, а третья строка — конечный входной и  выходной интерфейсы и конечную конфигурацию. 																																																																											
Для дальнейшего моделирования взаимодействия пользователя и исполнителя требуется введение тайлов обработки объектов. Для всех элементов, показанных на рис. 3, схема обработки идентична и заключается  в следующем. После указания исполнителем пользователю с помощью  тайла «Установка исполнителем объектов» элемента, к которому разре-  шен доступ, исполнитель с помощью тайла «Обработка объекта исполнителем» указывает поле для ввода информации пользователем. Пользо-ватель с помощью тайла «Обработка объекта пользователем» вводит  в это поле информацию. Исполнитель после восприятия этой информации указывает пользователю на следующий элемент, к восприятию которого пользователь может перейти. Введем требуемые тайлы только для  элемента е, и покажем, как они композируются для моделирования поведения пользователя и исполнителя. 																																																																											
Тайл «Обработка объекта исполнителем» выполняется после тайла  (12), согласно горизонтальной композиции тайлов, и позволяет помещать  реакцию исполнителя ИСС в выходной канал Е( в ответ на восприятие собственной реакции е! тайла (12) и при условии, что его начальный и конечный входные интерфейсы совпадают с начальным и конечным выходными  интерфейсами тайла «Обработка объекта исполнителем». Начальная конфигурация тайла «Обработка объекта исполнителем»  переходит в конечную конфигурацию  																																																																											
Тайл «Обработка объекта пользователем» выполняется после тайла  «Обработка объекта исполнителем», согласно вертикальной композиции  тайлов, и формирует реакцию пользователя в выходной канал ОЕ  в ответ на восприятие реакции ИСС тайла (13), указывающую значение поля 																																																																											
ИСС (объекта ИСО). Например, этой реакцией может быть Двоичная система счисления (ДСО). Начальная конфигурация тай-  ла «Обработка объекта пользователем» переходит в конечную конфигурацию 																																																																											
'Тайл «Указание исполнителем объекта» своей реакцией !е› указыва- 																																																																											
ет, что следующим элементом, подлежащим обработке пользователем, 																																																																											
является элемент е>: 																																																																											
ботке элемента е1. Переходы к другим элементам рассматриваемого примера  и их обработке аналогичны продемонстрированным. Для компактной ком-  позиции тайлы представлены в несколько другом виде (см. рис. 4).																																																																											
Оценка степени удобства использования пользовательских интерфейсов в логике тайлов  Критерии оценки степени удобства. Критерии оценки степени удоб- 																																																																											
ства пользовательских интерфейсов могут быть качественными и количественными и позволяют делать вывод, насколько интерфейс удобен, а также  сравнивать его с другими проектами пользовательских интерфейсов. 																																																																											
Простейшие критерии оценки степени удобства пользовательских  интерфейсов — оценки достижения пользователями своих целей при работе с приложениями. Дж. Нильсен (]. №е]5еп, [5]) предложил три такие  оценки: 																																																																											
1) пользователь достиг своей цели;  																																																																											
2) пользователь столкнулся с проблемами, но достиг своей цели;  																																																																											
3) пользователь не достиг цели.  																																																																											
Цели в логике тайлов могут формулироваться как целевые тайлы, до- 																																																																											
стижимость которых проверяется наличием композиции, в результате 																																																																											
которой целевой тайл достигается. Если такой композиции не существует, то цель считается недостигнутой. В случае достижения цели простейшей оценкой степени удобства может быть, например, число тайлов, требуемых для достижения цели. Чем меньше тайлов для этого требуется,  тем выше степень удобства использования. Более точные критерии оценки степени удобства использования требуют учета различных качественных и количественных свойств пользовательских интерфейсов, таких как  сложность достижения конечной цели, сложность достижения промежуточных целей, выявление причин, приводящих к слишком высокой  сложности достижения целей, причина достижения цели и т. п. Все это  требует создания значительных библиотек тайлов, их классификации по  группам пользователей, введения частных критериев оценки выполнения  отдельных тайлов, по которым формируются общие оценки, и т. п. 																																																																											
Задача, которая поставлена в настоящей работе, не предполагает детального рассмотрения всех критериев оценки степени удобства использования пользовательских интерфейсов. Здесь рассмотрен только один  критерий, который оценивает степень удобства использования приложения по результату выполнения задачи (выполнена — приложение имеет  высокую степень удобства, в противном случае низкую). 																																																																											
Заключение. Приведен аналитический обзор подходов к автоматизации оценки степени удобства использования приложений, в рамках которого выявлены преимущества и недостатки каждого подхода. Предложен  формальный моделе-ориентированный метод оценки степени удобства использования, основанный на использовании логики тайлов и позволяющий устранить недостатки известных подходов. В логике тайлов создается  модель взаимодействия пользователя и исполнителя (приложения). Мо-																																																																											
В.В. Девятков, Е.А. Типсин 																																																																											
дель композируется из тайлов в соответствии с определенными правилами,  которые служат средством оценки удобства использования. Принципы методологии проиллюстрированы на примере одностраничного приложения.  В дальнейшем будет создана полномасштабная модель взаимодействия в  логике тайлов, учитывающая особенности поведения различных групп  пользователей при взаимодействии с реальными приложениями, увеличено число критериев оценки степени удобства использования. Фактически,  оценка степени удобства использования в логике тайлов — извлечение  знаний о поведении взаимодействующих агентов, крайне востребованных  как предмет аналитики на современном этапе развития интеллектуальных  информационных систем. Изложены принципы извлечения знаний о поведении взаимодействующих агентов, основанные на использовании паттернов локального поведения агентов в логике тайлов, состав которых  формирует общее поведение взаимодействующих агентов. Представление  этих принципов осуществляется на уровне композиции тайлов, но без  формального доказательства свойств реального поведения взаимодействующих агентов. Конкретизация такого доказательства свойств для случая  выявления наличия определенных свойств интеллектуальных интерфейсов  в языке логического программирования РКОГОС дана в работе [13]. 																																																																											
В основе процедур доказательства свойств взаимодействия агентов на языке РКОГОС лежит механизм унификации, который может служить средством автоматизированной проверки свойств поведения агентов, представляемого различными композициями тайлов. Кроме того, по аналогии с 																																																																											
той же работой интересующие свойства поведения взаимодействующих  агентов могут быть формально выражены на модальных языках для последующей их формальной проверки.																																																																											

ЛИНГВИСТИЧЕСКАЯ ЭКСПЕРТОЛОГИЯ																																																																											
КАК НАПРАВЛЕНИЕ ТЕОРЕТИЧЕСКОЙ																																																																											
И ПРИКЛАДНОЙ ЛИНГВИСТИКИ																																																																											

современной науке выделяют лингвист-																																																																											
тику теоретическую (научную) и приклад-																																																																											
ную. Объектом исследований в теории-																																																																											
чешской лингвистики является лингвистическая																																																																											
теория, основанная на построении системы ар-																																																																											
аргументов и научных концепций, доказывающих																																																																											
определенную гипотезу; прикладная лингвис-																																																																											
тика специализируется на разработке методов																																																																											
решения практических задач, связанных с изу-																																																																											
чением языка, а также использования лингви-																																																																											
стических теорий на практике [1].																																																																											
Областью исследований теоретического язы-																																																																											
сознания является изучение языка в теорети-																																																																											
ческом аспекте, синтезирующее данные о язы-																																																																											
ке. Теоретическое языкознание является осно-																																																																											
вой, базой для практического, прикладного язы-																																																																											
кознания.																																																																											
Результатом теоретического знания являет-																																																																											
ся практическое изучение отдельного языка, ко-																																																																											
торый оказывает воздействие на выработку прин-																																																																											
ципов и методов изучения отдельного конкрет-																																																																											
ного языка, изучение и преподавание языка.																																																																											
Методологической основой для прикладно-																																																																											
го языкознания является теоретическое языкоз-																																																																											
нание. П																																																																											
е Прикладное языкознание использует на																																																																											
практике выработанные и полученные теорети-																																																																											
ческим языкознаниям анания о языке.																																																																											
Целью первой задачи является существен-																																																																											
ное повышение уровия объективности реауль-																																																																											
татов лингвистических исследований, т.																																																																											
т.е. экс-																																																																											
пертизы должны быть доступны и носсоздавае-																																																																											
мы другими нсследонателями.																																																																											
Прикладная лингвистика																																																																											
область науч-																																																																											
ных ананий, научающая строение и функцио-																																																																											
нирование и моделирование функций языка в																																																																											
нелингвистических областях знаний и в различ-																																																																											
ных областях деятельности человека, т.е. это																																																																											
направление в науке, занимающееся разработ-																																																																											
кой и осуществлением практического ли																																																																											
глингвис-																																																																											
тического обесшечения для равнообразных для																																																																											
сфер производства, науки, культуры и др.																																																																											
Прикладная лингвистика																																																																											
совокупность																																																																											
многих языковедчесних наук, данные которых																																																																											
используют различные отрасли че																																																																											
человеческой																																																																											
деятельности [2].																																																																											
Задачи прикладной лингвистики базируют-																																																																											
ся на исследованиях [2] теоретического харак-																																																																											
тера, формулирующих общие принципы, а по-																																																																											
лучаемые результаты используются в качестве																																																																											
исходных оснований для теоретических пост-																																																																											
роений.																																																																											
Область изучения языка прикладной линг-																																																																											
пистики																																																																											
это решение определенных практи-																																																																											
ческих аадач.																																																																											
В последние годы возникли повые отрасли																																																																											
прикладной лингвистики, таковой является и																																																																											
юридическая лингвистика, предметом изучения																																																																											
которой является соотношение языка и права.																																																																											
Данное от																																																																											
ное отношение организует подотраель																																																																											
юридической линганстики																																																																											
линганстическую																																																																											
экспертологию.																																																																											
Лингаистическая экспертология занимает-																																																																											
ся теоретическим и методическим обесшечени-																																																																											
ем производства лингаистических экспертиа.																																																																											
На примере линганстической экспертологии																																																																											
можно увидеть тесное переплетение теоретичес-																																																																											
кой и прикладной линганстики, оба направле-																																																																											
ния лингвнстики в																																																																											
к взаимосвяваны и дополияют																																																																											
друг друга.																																																																											
Недостаточно исследованные лингаистичес-																																																																											
кие теории, на которых основываются совре-																																																																											
менные экспертные исследования, подробно																																																																											
исследуются и разрабатываются в конкретные																																																																											
методики производства лингвистических экс-																																																																											
пертиа в рамках различных категорий дел.																																																																											
Процесс развития теории лингвистической																																																																											
экспертизы нераарывно связан с направлени-																																																																											
ями теоретического и прикладного характе-																																																																											
ра, а также е необходимостью решения важ-																																																																											
ных задач.																																																																											
Целью второй задачи является деятельность,																																																																											
связанная с переводом юридической термино-																																																																											
логии в лингвистические термины, и наоборот.																																																																											
Третьей немаловажной падачей яв																																																																											
ейявляется																																																																											
исследование объективных и устойчивых вааи-																																																																											
мосвязей между элементами вер																																																																											
вербальной и																																																																											
ауальной составляющих текста в семиотичес-																																																																											
ком понимании.																																																																											
По исследуемым объектам пыделяют экспер-																																																																											
тизы звучащей речи, письменного текста и вер-																																																																											
бально-визуальные экспертизы. Э																																																																											
Это комплеке																																																																											
исследований, направленный на ус																																																																											
на установление																																																																											
принадлежности звучащей речи ко																																																																											
конкретному																																																																											
лицу; в акспертивах используются специальные																																																																											
инструментарии; в																																																																											
в письменных эк																																																																											
ы экспертилах																																																																											
применяются различные методики, такие, как																																																																											
морфологический анализ, синтактический ана-																																																																											
лип и семантический.																																																																											
Вербально-вилуальные экспертизы сочетают																																																																											
вербальную и невербальную информацию, на-																																																																											
пример, анализ изображения и текста.																																																																											
Судебная лингвистическая экспертиза свое																																																																											
развитие получила во второй половине 90-х го-																																																																											
дов ХХ в.																																																																											
В лингвокриминалистике сформировались																																																																											
такие виды, как: экспертиза по делам диффа-																																																																											
мации (распространения сведений, порочащих																																																																											
честь и																																																																											
и достоинство), экспертиза недобросовес-																																																																											
тной и недостоверной рекламы, пр																																																																											
противоза																																																																											
ной агитации, экспертива словесного экстремиз-																																																																											
ма и др.																																																																											
На современном этапе развития лингвокри-																																																																											
миналистика обладает широкой научно-методи-																																																																											
ческой базой для производства судебно-лингвн-																																																																											
стических экспертиа. Ее основу составляют об-																																																																											
щая теория судебной экспертивы (экспертоло-																																																																											
гия) и частная теория лингвистической экспер-																																																																											
тизы, являющаяся направлением прикладной																																																																											
лингпистики.																																																																											
Необходимо отметить, что судебная лингви-																																																																											
стическая экспертива продолжает развиваться																																																																											
и совершенствоваться. Учеными детально раз-																																																																											
работаны и продолжают разрабатываться типо-																																																																											
вые перечни вопросов, необходимых при про-																																																																											
изводстве лингвистических экспертиз, изложе-																																																																											
ны теоретические основы анализа текста.																																																																											
В современном обществе фи																																																																											
фиксируется мно-																																																																											
жество повых речевых деликтов, которые тре-																																																																											
буют законодательного оформления, в связи с 																																																																											
чем возникает потребность в создании принцип-																																																																											
пиально новых экспертиз.																																																																											
Например, вырабатывается основа для произ-																																																																											
водства лингвистических экспертиз по ст. 205.2																																																																											
УК РФ - публичные призывы к осуществлению																																																																											
террористической деятельности, публичное оправ-																																																																											
здание терроризма или пропаганда терроризма.																																																																											
Анализируя количество возросших речевых																																																																											
правонарушений и преступлений, начиная от																																																																											
распространения клеветы, оскорблений и до																																																																											
пропаганды экстремизма и терроризма, на дан-																																																																											
ном этапе к виду судебных экспертиз устанав-																																																																											
сливаются высокие стандарты в плане научно-																																																																											
сти и методологической адекватности.																																																																											

Информативность N-грамм в пределах слова																																																																											
1																																																																											
Взаимная информация																																																																											
Элементы теории информации интенсивно используются в																																																																											
лингвистике. Понятие взаимной информации использовано в данном																																																																											
сообщении для изучения информативности отдельных букв, биграмм и																																																																											
триграмм в слове.																																																																											
Пусть L - язык с алфавитом А, и V - список слов wi (i = 1,m)																																																																											
одинаковой длины n. С каждым словом свяжем число fi - относительную																																																																											
частоту встречаемости слова w1. Предположим, что 0 < f $ 1 иf = 1.																																																																											
Последовательность длины s, состоящую из букв алфавита А, будем																																																																											
называть n-граммой g*. В данном сообщение рассматриваются n-граммы																																																																											
размеров 1, 2 и 3. N-граммы g1 также будут называться отдельными																																																																											
буквами, g2 - биграммами, g3 - триграммами. Позиция n-граммы в слове																																																																											
определяется позицией первой буквы входящей в п-грамму. Например, в																																																																											
"слове ""домашний"", биграмма ""аш"" находятся на позиции 4, и отмечается"																																																																											
как																																																																											
Пусть W - случайная величина, значением которой является какое-																																																																											
либо слово из списка V с вероятностью p(wi) = fi. Пусть Gf- другая																																																																											
случайная величина, значениями которой являются n-граммы размера s,																																																																											
которые могут появиться в k-й позиции в слове wi.																																																																											
Количество информации, получаемой о величине W после подсчёта																																																																											
величины Gf будем называть взаимной информацией этих величин. В																																																																											
согласии с [Ash, 1990, раздел 1.5], количество взаимной информации																																																																											
определяется по формуле																																																																											
I(WiGE) = 1(GEIW) = H(GE) - H(GEIW).																																																																											
(1)																																																																											
Здесь H(G) - это неопределённость по поводу значения величины G																																																																											
которая выражается как																																																																											
H(Gp) =- p(g3)logp(gj).																																																																											
где p(8j) - вероятность того, что G примет значение g* в слове wj.																																																																											
Второе слагаемое в (1), H(GEIW) - это условная неопределенность																																																																											
переменной Gk, порождаемая событием W. Интуитивно, это слагаемое																																																																											
должно быть равно нулю, так как нет неопределенности в буквах данного																																																																											
слова. В предыдущей работе [Нормантас, 2013] это утверждение																																																																											
доказывается в случае отдельных букв. Посколько это доказательство																																																																											
легко обобщить к случаю п-грамм, оно в данный доклад не включается.																																																																											
Скомбинировав (1), (2) и приравняв H(GfIW) к 0, получим																																																																											
1(WIG) =-p(e,)logp(e)).																																																																											
(3)																																																																											
Данная формула показывает, что количество информации об условной																																																																											
вероятности события (Gf|W) равно неопределенности события,																																																																											
состоящего в появлении n-граммы g* в слове w, на позиции k.																																																																											
Для подсчёта p(g1) построим подмножество слов из V, состоящее из																																																																											
слов,																																																																											
имеющих																																																																											
п-грамму																																																																											
g																																																																											
B																																																																											
позиции																																																																											
k:																																																																											
V' = {w € V|w[k…k+s - 1] = g°}. Пусть частоты f', каждого слова																																																																											
подмножества V' будут равны соответствующим частотам слов fj. Тогда																																																																											
вероятность p(g) может быть выражена следующим образом:																																																																											
V																																																																											
p(g) =																																																																											
(4)																																																																											

Пример																																																																											
Рассмотрим некоторый язык с алфавитом A = {a,b,c,d}. Табл. 1																																																																											
содержит список четырехбуквенных слов с частотой их встречаемости.																																																																											
Таблица 3. Пример списка слов с частотами																																																																											
Слова																																																																											
Относительные																																																																											
частоты																																																																											
аааа																																																																											
0,25																																																																											
baaa																																																																											
0,15																																																																											
сааа																																																																											
0,1																																																																											
bbaa																																																																											
0,1																																																																											
cbaa																																																																											
0,3																																																																											
dba																																																																											
0.1																																																																											
Применим формулу (4) для построения табл. 2. Например, биграмма																																																																											
ba появляется в позиции 2 в трех словах: bbaa, cbaa и dbaa. Поэтому																																																																											
вероятность р(G = ba) = 0,1 + 0,3 + 0,1 = 0,5.																																																																											
Таблица 4. Вероятности появления биграмм в каждой позиции																																																																											
Биграммы																																																																											
Позиции в слове																																																																											
2																																																																											
aa																																																																											
0,25																																																																											
0,5																																																																											
ba																																																																											
0,15																																																																											
0,5																																																																											
са																																																																											
bb																																																																											
cb																																																																											
0,1																																																																											
0,1																																																																											
0,3																																																																											
0																																																																											
(																																																																											
db																																																																											
0,1																																																																											
0																																																																											
Теперь воспользуемся формулой (3) для подсчёта информативности																																																																											
биграмм в каждой позиции. В рассматриваемом примере информативность																																																																											
биграмм в первой позиции подсчитывается следующим способом:																																																																											
1(W|G2) = - 0,25 log 0,25 - 0,15 log 0,15 - 0,1 log 0,1 - 0,1 log 0,1 - 0,3 log 0,3 -																																																																											
0,1 log 0,1 2,4 бит																																																																											
Так как все слова на второй позиции имеют аа или ba с равными																																																																											
вероятностями 0,5, то мы получаем ровно один бит информации:																																																																											
1(W|G2) = - 0,5log 0.5 - 0,5 log 0,5 - 0 log 0 - 0log 0 - 0 log 0 - Olog 0 = 1 бит.13																																																																											
B																																																																											
третьей																																																																											
позиции:																																																																											
I(W|G;) = -1 log1 - Olog 0 - 0log0 - 0log 0 - 0log0 - 0log 0 = 0 бит.																																																																											
Этот																																																																											
результат следует из того факта, что все слова в нашем примере																																																																											
заканчиваются на биграмму аа. Следовательно, узнав её, мы не получаем																																																																											
полезной информации о слове.																																																																											

3																																																																											
Статистическое исследование																																																																											
Для определения информативности п-грамм в словах английского,																																																																											
литовского, русского, таджикского и узбекского языков и искусственного																																																																											
языка эсперанто использовались те же самые частотные словари, как и																																																																											
предыдущей работе [Нормантас, 2013] и [Усманов и Нормантас, 2012] с																																																																											
добавлением данных узбекского языка, который прежде не изучался.																																																																											
При подготовке данных к статистической обработке слова каждой																																																																											
коллекции разделялись на группы, составленные из слов одинаковой																																																																											
длины. Затем были подсчитаны вероятности появления каждой программы																																																																											
на каждой позиции с помощью формулы (4). Далее с помощью (3) была																																																																											
подсчитана взаимная информация.																																																																											
Статистическое исследование было осуществлено с помощью																																																																											
компьютерной программы, написанной автором																																																																											
на																																																																											
языке																																																																											
программирования Scala. Код программы может быть выслан желающим.																																																																											
4 Результаты																																																																											
Результаты исследований в случае отдельных букв представлены на																																																																											
рис. 1, 2 и 3 по отдельности для слов, состоящих из 5, 10, 15 букв. Они																																																																											
показывают информативность букв в различных позициях в словах для 6																																																																											
упомянутых языков.																																																																											
На рис. 1, 2 и 3 видно, что вторая буква менее информативна по																																																																											
сравнению с первой, третьей и следующими буквами до середины слова.																																																																											
Например, буквы на позициях 1, 3 и 4 слов английского языка, состоящих																																																																											
из 7 букв, проявляют около 4,2 бит информации о слове. Буква на позиции																																																																											
2 несёт 3,8 бит. Для слов таджикского языка такого же размера эта разница																																																																											
еще значительней: позиции 1, 3 и 4 доставляют 4-4,3 бит информации, а																																																																											
позиция 2 - около 2,8 бит. Похожая картинка имеет место для всех языков																																																																											
и длин слов.																																																																											
Отметим также, что взаимная информация начинает постепенно																																																																											
падать после середины слова (для слов более чем из 3 букв). Эта картина																																																																											
особенно характерна для литовского, таджикского и эсперанто языков,																																																																											
менее характерна для слов английского языка и почти не заметна для																																																																											
русского языка. Для всех языков, кроме русского, последняя буква слова																																																																											
несет наименьшую информацию в сравнении с другими позициями, за																																																																											
исключением позиции 2.																																																																											
На рис. 4 видно, что биграммы на позициях 3, 4 и 5 несут наибольшую																																																																											
информацию в словах, состоящих из 10 букв всех шести языков. В случае																																																																											
триграмм (см. рис. 5) самыми информативными являются триграммы на																																																																											
позициях 3 и 4. Информативность биграмм и триграмм постепенно падает																																																																											
после середины слова.																																																																											
Выводы																																																																											
Во всех исследованных языках наблюдаются																																																																											
похожие																																																																											
закономерности информативности отдельных букв: вторая буква слова																																																																											
несет меньше информации по сравнению с первой и третьей буквами;																																																																											
информативность букв постепенно понижается во второй половине слова.																																																																											
Информативность биграмм и триграмм показывает похожие																																																																											
закономерности, но в сглаженной форме.																																																																											
В данной работе в первые изучалась информативность букв и n-грамм																																																																											
узбекского языка. Из изученных языков, узбекский является единственным																																																																											
неиндоевропейским языком (кроме эсперанто). Результаты показывают,																																																																											
что картинка информативности этого языка заметно отличается только в																																																																											
начале слова. Например, первые три биграммы и первые три триграммы																																																																											
слов передают больше информации в сравнении с другими языками. В																																																																											
случае отдельных букв, различия между узбекским и другими языками																																																																											
незначительны.																																																																											
Следует заметить, что хотя эсперанто - сконструированный язык, для																																																																											
него имеют место те же закономерности, как и для других естественных																																																																											
языков.																																																																											
Необходимо проведение дальнейших исследований для объяснений																																																																											
закономерностей, обнаруженных в данной статье. Автор предполагает, что																																																																											
понижение информативности второй буквы может быть связано с высокой																																																																											
частотой встречаемости гласных на этой позиции. Понижение																																																																											
информативности между серединой и концом слова может иметь																																																																											
отношение к статистическим свойствам суффиксов и окончаний.																																																																											
Результаты этих исследований можно использовать, например, при																																																																											
разработке или улучшении алгоритмов для поиска в текстовых данных.																																																																											
Другая возможная область приложения - облегчение чтения.																																																																											

СРАВНИТЕЛЬНЫЙ АНАЛИЗ САПР НА ПРИМЕРЕ ПРОЕКТИРОВАНИЯ ТРЕХМЕРНОЙ МОДЕЛИ КОРПУСА СУДНА																																																																											

Развитие высокотехнологичной судостроительной отрасли предусматривается государственной програм- мой Российской Федерации «Развитие судостроения и техники для освоения шельфовых месторождений» [1] и обеспечивается разработкой новых технологий и проектов гражданской морской техники и техники для освоения шельфовых месторождений. Вместе с тем одним из приоритетов научно-технологического развития Российской Федерации [2] является переход к передовым цифровым производственным технологиям, новым материалам и спо- собам конструирования, который позволит получить научные и научно-технические результаты и создать техноло- гии, являющиеся основой инновационного развития внутреннего рынка продуктов и услуг, устойчивого положения России на внешнем рынке.																																																																											
Согласно указа Президента РФ «О национальных целях развития Российской Федерации на период до 2030 года» одной из таких целей является «Цифровая трансформация», в задачи которой входит увеличение объема и скорости применения информационных технологий в отечественных решениях по сравнению с показателем 2019 года.																																																																											
Необходимость изучения систем автоматизированного проектирования подтверждается значительным упрощением труда инженеров-конструкторов, что также позволит обучающимся совершенствовать свои компетен- ции как в профессии, так и в процессе обучения в вузе. Федеральные государственные образовательные стандарты высшего образования поколения 3++, в частности, по специальности 26.05.01 Проектирование и постройка кораб- лей, судов и объектов океанотехники [3], обязуют вузы определять профессиональные компетенции на основе про- фессиональных стандартов, соответствующих профессиональной деятельности выпускников.																																																																											
Так в основной образовательной программе высшего образования по специальности 26.05.01 Проектиро- вание и постройка кораблей, судов и объектов океанотехники (специализация: Проектирование и постройка судов и объектов океанотехники) Севастопольского государственного университета из профессионального стандарта «Спе- циалист по проектированию и конструированию в судостроении» [4] при формировании профессиональной компе- тенции ПК-3 «Способен использовать современные системы автоматизированного проектирования (САПР) при со- здании сложных систем, трехмерного моделирования судов и объектов океанотехники, выполнения инженерных расчетов с обеспечением электронного документооборота на всех стадиях жизненного цикла» частично выделены следующие обобщенные трудовые функции, соответствующие профессиональной деятельности выпускников:																																																																											
C – «Разработка и модернизация проектов, техническое сопровождение производства судов, плавучих сооружений, аппаратов и их составных частей», в части трудовых действий, касающихся использования САПР, тру- довых функций «C/01.6 Разработка и согласование комплектов технологической документации при проведении тео- ретических и экспериментальных» и «C/02.6 Разработка эскизных, технических проектов судов, плавучих сооруже- ний, аппаратов и их составных частей»;																																																																											

D – «Организация и выполнение плана по разработке комплектов проектно-конструкторской докумен- тации на постройку и модернизацию судов, плавучих сооружений, аппаратов и их составных частей», в части трудо- вых действий, касающихся использования САПР, трудовой функции «D/02.6 Организация и выполнение плана по разработке комплектов проектно-конструкторской документации на постройку и модернизацию судов, плавучих сооружений, аппаратов и их составных частей»;																																																																											
E – «Руководство инновационными конструкторскими исследованиями, созданием и модернизацией проектов судов, плавучих сооружений, аппаратов и их составных частей», в части трудовых действий, касающихся использования САПР, трудовой функции «E/01.6 Руководство исследованиями в области создания новых образцов судов, плавучих сооружений, аппаратов и их составных частей в соответствии с техническим заданием».																																																																											
AutoCAD (Autodesk) – одна из известных и распространенных базовых САПР в мире и России с 1982 года, но не является единственной программой для проектирования изделий, судов и т.п., существуют и многие другие [5].																																																																											
Цель статьи – выполнение сравнительного анализа САПР AutoCAD (Autodesk), Inventor (Autodesk) и NanoCAD Механика (ООО «Нанософт разработка») на примере проектирования трехмерной модели корпуса судна в рамках подготовки инженеров-судостроителей по дисциплине «Автоматизация проектирования корабля».																																																																											
Для достижения поставленной цели были решены следующие задачи: выявление характерных особенно- стей при проектирования гражданской морской техники и техники для освоения шельфовых месторождений в дан- ных САПР; определение перспективности применения одной из двух предложенных САПР с целью снижения тру- доемкости способа построения трехмерной модели корпуса судна.																																																																											
Методика построения трехмерной модели корпуса судна в САПР AutoCAD с использованием тео- ретического чертежа. Теоретический чертеж (ТЧ) строится на основе таблица плазовых ординат (табл. 1), который является одним из основных конструкторских документов и представляет совокупность, вычерченных в масштабе линий, образуемых пересечением теоретической поверхности корпуса судна тремя семействами взаимно перпенди- кулярных плоскостей, параллельным главным плоскостям судна. ТЧ – основа для создания трехмерной модели суд- на. Координаты точек, которые составляют каждый шпангоут (табл. 1), задают его форму [6]. Для построения шпан- гоутов (кривые линии) используются сложные примитивы – «Полилиния» и «Сплайн». «Полилиния» – соединенные единым примитивом отрезки различной длины, которые требуется редактировать (сглаживать). Однако при сглажи- вании необходимо применять исключительно функцию «Сгладить», без «Сглаживания по сплайну», иначе получае- мая кривая пройдет не по контрольным точкам, что повлечет последующую несогласованность линий ТЧ. «Сплайн»																																																																											
– гладкая кривая, которая проходит через заданный набор точек. AutoCAD работает с частным случаем сплайнов – неоднородными рациональными B-сплайновыми кривыми (NURBS). Для дальнейшего построения трехмерной мо- дели судна требуется замкнутый контур всех шпангоутов, для чего вычерчивается и верхняя палуба (ВП), имеющая соответствующую погибь. Чтобы получить более сглаженную трехмерную модель судна, необходимо выполнить построение проекций «Бок» и «Полуширота» с последующим согласованием всех проекций ТЧ.																																																																											

Таблица 1																																																																											
Ординаты шпангоутов и штевней																																																																											


Используя ТЧ (рис. 1), как минимум две его проекции: «Корпус» и «Бок», возможно подготовить все не- обходимые части корпуса судна к их изменению посредством команд 3D моделирования [7].																																																																											
Первым этапом необходимо с использованием команд «3D-поворот» и «Переместить относительно точ- ки» расположить проекции «Корпус» и «Бок» перпендикулярно друг другу, аналогично расположению плоскостей мидель-шпангоута и диаметральной плоскости (рис. 2) для дальнейшего формирования каркасной модели корпуса судна. Начало системы координат необходимо поместить в точке пересечения плоскостей мидель-шпангоута, диа- метральной и основной.																																																																											
Следующий этап – с помощью команды «Зеркало» представить две проекции «Корпус» с полными сим- метричными шпангоутами носовой и кормовой оконечности (рис. 2).																																																																											
Сформировать трехмерный теоретический чертеж можно различными способами и последовательностью действий, например, опираясь на теоретическую секцию проекции «Бок» используя команду «Переместить» после- довательно изменить местоположение всех шпангоутов проекции «Корпус» на соответствующие им места проекции																																																																											

«Бок». В результате получаем трехмерную каркасную модель судна из 21 шпангоута, линий форштевня и ахтер- штевня проекции «Бок». Данный каркас станет основой для трехмерной модели. С целью повышения точности по- лучаемой трехмерной поверхности можно продолжить построение каркасной модели, переместив ватерлинии про- екции «Полуширота» на соответствующие места проекции «Бок». Построение каркасной модели завершим соедине- нием всех крайних верхних точек шпангоутов командой «Сплайн», тем самым получив линию борта. В результате данных преобразований получим трехмерный каркас корпуса судна (рис. 4).																																																																											

Рис. 1. Теоретический чертеж судна																																																																											

Рис. 2. Расположение проекций																																																																											

Рис. 3. Расположение проекций																																																																											

Рис. 4. Каркасная модель корпуса судна																																																																											

Построение трехмерной поверхности судна выполняется с использованием полученной каркасной моде- ли, для этого используются различные средства AutoCAD, работающие с созданием и редактированием поверхно- стей. Наиболее точным вариантом построения является обтягивание поверхностью двух расположенных рядом шпангоутов, например, 2–3 и т.д. с использованием поверхности Кунса, реализованной функцией «П-кромка». В этом случае может потребоваться более детальная проработка оконечностей, из-за сложной кривизны поверхностей (рис. 5). Аналогично выполняется построение трехмерной поверхности палубы судна из попарно соединенных па- лубных линий, созданных путем соединения вершин одного шпангоута.																																																																											
Возможен второй вариант построения трехмерной поверхности судна – с помощью команды «Лофт», функция которой заключается в создании 3D тела (поверхности) в пространстве между несколькими поперечными сечениями. Для построения более точной поверхности судна лучше использовать отрезки шпангоутов между двумя соседними ватерлиниями, так как используемые командой «Лофт» поперечные сечения определяют форму получае- мого тела (поверхности). Полученная таким образом трехмерная поверхность корпуса судна будет отображать его архитектурные особенности и криволинейность формы корпуса. Затем с использованием команды «Поверхнапол- нить» создается сплошное твердое тело (3D Solid) – трехмерная модель корпуса судна (рис. 6).																																																																											

Рис. 5. Проработка кормовой оконечности																																																																											

Рис. 6. Трехмерная модель корпуса судна в AutoCAD																																																																											
Методика построения трехмерной модели корпуса судна в САПР Inventor с использованием коор- динат точек, описывающих форму шпангоута. Построение 3D-модели корпуса судна в Inventor начинается с фор- мирования MS Excel файлов с координатами каждого шпангоута, для чего данные таблицы плазовых ординат (табл. 1) предварительно должны быть представлены в определенном формате по трем известным координатам (X, Y, Z) (рис. 7).																																																																											

Рис. 7. Пример файла шпангоута для импорта																																																																											

В рабочее пространство Inventor последовательно от носа в корму загружаются файлы, созданные для каждого шпангоута (рис. 8).																																																																											

Рис. 8. Импорт шпангоутов в Inventor																																																																											
Затем шпангоуты последовательно соединяются с использованием функции «Лофт» в трехмерную модель судна (рис. 9). Также можно построить надстройку, используя команды создания и преобразования 3D-объектов.																																																																											

Рис. 9. Трехмерная модель корпуса судна в Inventor																																																																											
Только после построения всех шпангоутов выполняются дополнительные построения для 3D моделиро- вания ахтер- и форпиковых частей корпуса судна (рис. 10).																																																																											

Рис. 10. Построение ахтерпика																																																																											
Отечественные САПР. Санкционная политика сказалась на САПР AutoCAD и Inventor, которые стали не доступны на территории России. Учитывая направленность на суверенизацию реализуемых проектов Севастополь- ский государственный университет реализует дальнейшую подготовку обучающихся с использованием САПР NanoCAD Механика.																																																																											

В отличие от отписанных выше САПР, в NanoCAD не требуется построение теоретического чертежа и создание файлов для импорта каждого шпангоута. Необходимо подготовить только один файл с координатами точек шпангоутов на базе (табл. 1). Построение шпангоута выполняется с помощью команды «Полилиния» путем ввода координат в командную строку. Дальнейшее построение выполняется в среде «3D-инструменты» функцией «Вытя- гивание по сечениям» (рис. 11).																																																																											

Рис. 11. Построенная поверхность с 0 по 20 шпангоуты																																																																											
Ахтерштевень и форштевень строятся аналогично шпангоутам, но требуют доработки с помощью функ- ции «3D повернуть» (рис. 12).																																																																											

Рис. 12. Форштевень и ахтерштевень																																																																											
Далее выполняются дополнительные построения достраиваются носовая и кормовая оконечности с ис- пользованием команд «3Д грань» или «3Д сеть», а также – надстройка (рис. 13).																																																																											

Рис. 13. Трехмерная модель корпуса судна в NanoCAD Механика																																																																											
Данные методики обучения можно применять для любых инженерных специальностей при построении различных объектов машиностроения.																																																																											
Заключение. Навыки работы в различных САПР повышают уровень компетентности и личностных воз- можностей инженер-конструктора, благодаря чему он получает преимущество при трудоустройстве в организации, осуществляющие проектирование и разработку проектов судов и объектов океанотехники для освоения шельфовых месторождений.																																																																											
Созданные трехмерные модели корпусов различных судов и морских технических сооружений при по- мощи систем автоматизированного проектирования упрощают и обеспечивают решение практических инженерных задач. Экспортируемые готовые модели из AutoCAD и nanoCAD являются численными моделями для различных программных комплексов, например, таких как Anchored Structures, в которых возможно промоделировать поведе- ние судна или объектов океанотехники для освоения шельфовых месторождений при изменчивых ветро-волновых условиях, создать оптимальные параметры системы удержания, учесть динамику якорных линий, исследовать пове- дение цифровых моделей сооружений при воздействии в длительном временном интервале нагрузок, соответствую- щих реальным ситуациям, что невозможно при использовании аналитических расчетных соотношений. Применение трехмерного моделирования обеспечивает формирование новых подходов к обоснованию проектных решений.																																																																											

СИСТЕМА ПРЕДИКТИВНОГО ВВОДА КАК СРЕДСТВО ПОВЫШЕНИЯ ЭФФЕКТИВНОСТИ НАБОРА ТЕКСТА																																																																											
В основе современного производства лежит взаимодействие человека и техники. Если брать во внимание офисных работников, то под техникой пони- мается компьютер. Для повышения экономической эффективности производ- ства необходимо повышение эффективности работы человека и компьютера.																																																																											
Основными факторами, влияющими на эффективность работы за ком- пьютером, являются:																																																																											
цветовая гамма рабочего места [1];																																																																											
эргономичная офисная мебель [2];																																																																											
соблюдение режимов труда и отдыха [3];																																																																											
планирование рабочего времени;																																																																											
мотивация [4];																																																																											
эффективное человеко-машинное взаимодействие.																																																																											
Первые три пункта из представленного списка регулируются Санитарно- эпидемиологическими правилами и нормативами СанПиН 2.2.2/2.4.1340-03 [5], в которых перечислены санитарно-эпидемиологические правила и нормативы																																																																											
«Гигиенические требования к персональным электронно-вычислительным машинам и организации работы».																																																																											

Планирование рабочего времени производится на основе «Типовой ин- струкции по охране труда при работе на персональном компьютере ТОИ Р-45-084-01» [6], списка задач и сроков их выполнения. Эффективное планиро- вание позволит качественно и своевременно достигать поставленных целей.																																																																											
Мотивация повышает производительность труда, тем самым увеличи- вает прибыль компании.																																																																											
Под человеко-машинным взаимодействием понимается система взаимо- действия между пользователем и компьютером на уровне пользовательского ин- терфейса, состоящая из программного и аппаратного обеспечения [7].																																																																											
Значительная часть пользователей в силу своих профессиональных обязанностей производит перевод больших объемов текстовой информации в электронный вид. В качестве основного средства ввода информации приме- няется клавиатура, но также могут быть использованы:																																																																											
речевой ввод текста [8], примером реализации которого являются программы Горыныч, Диктограф (российские разработки фирмы VM TECH), MedSpeak (система распознавания речи для врачей-рентгенологов от IBM), Sakrament ASR Engine (разработка «Сакрамент», позволяющая управлять действиями компьютера или другого электронного устройства с помощью голосовых команд, озвучивать электронный текст);																																																																											
рукописный ввод с помощью графического планшета или планшетно- го компьютера: программы PenReader, MyScript. Данные программные про- дукты позволяют производить перевод рукописного текста в печатный вид. В качестве инструмента для создания рукописных заметок может использо- ваться Microsoft Office [9].																																																																											
Тем не менее клавиатура остается наиболее часто используемым сред- ством человеко-машинного взаимодействия. Современное расположение букв на клавиатуре явилось наследием печатных машинок, первое упомина- ние о которых встречается еще в XVIII в. [10]. Первоначально буквы распо- лагались в строго алфавитном порядке и при печати возникали технические проблемы – рычаги близко расположенных букв не успевали вернуться в ис- ходное положение и сцеплялись между собой. В дальнейшем конструкция машинок была переработана, и наиболее встречаемые комбинации букв в ан- глийских словах были разнесены по клавиатуре, что снизило вероятность по- ломки механизма. Современная кириллистическая раскладка клавиатуры пи- шущих машинок была придумана в США в конце XIX в. Клавиатура разраба- тывалась как эргономичная: под самыми сильными и быстрыми указатель- ными пальцами были размещены наиболее часто используемые буквы, а под слабыми безымянными пальцами и мизинцами – более редкие. С появлением электрических печатных машинок, а затем и компьютеров, клавиатура не претерпела каких-либо изменений, так как это привело бы к переподготовке большого количества персонала, обученного для работы на пишущей машин- ке. Можно сделать выводы, что, несмотря на заложенную эргономичность в русскую раскладку, расположение букв на клавиатуре не является опти- мальным, так как нагрузка по пальцам распределяется неравномерно, прихо- дится часто менять положение пальцев для нажатия той или иной клавиши, так как расположение клавиш учитывает механизм работы механической пе- чатной машинки. Но, несмотря на это, возможно повысить скорость набора текста, повысив тем самым эффективность работы. Могут быть использованы следующие методы:																																																																											

применение методик слепой печати [11];																																																																											
использование   программ    для    сохранения    шаблонов    текста																																																																											
(PhraseExpress, Flashpaste) и дальнейшей вставки их в редактируемый текст;																																																																											
использование программ для замены шаблонов текста (Microsoft Word, Punto Switcher, Breevy) на заданные текстовые фрагменты;																																																																											
использование систем предиктивного ввода.																																																																											
Особое внимание следует обратить на системы предиктивного ввода. Данные системы позволяют завершать вводимые пользователем слова. В том случае, если слово было найдено в словаре, то оно, а также его падежные формы, будут предложены пользователю. Если слово обнаружено не было, то формируется альтернативных список на основе предположений о допу- щенной ошибке. Система позволяет исправлять распространенные граммати- ческие ошибки, что повышает уровень грамотности и внимательности поль- зователей. Автоматически повышается скорость набора текста, так как поль- зователю не придется набирать слова полностью, что будет полезно для тех, кто не владеет скоростным набором. В случае необходимости пользователь может загрузить в систему дополнительный специализированный словарь, ко- торый расширит функционал системы. Кроме того, возможно добавление фраз, которые также будут предлагаться при наборе первого слова фразы.																																																																											
В рамках написания магистерской диссертации был создан прототип системы предиктивного ввода. Для тестирования системы была проведена серия экспериментов с целью определения скорости посимвольного набора текста и с использованием предиктивного ввода. В эксперименте приняло участие 15 человек. Им было предложено произвести ввод текста, состоящего из 700 знаков, при этом время ввода фиксировалось в итоговой таблице. По результатам экспериментов было получено среднее время набора текста. При наборе стандартным методом оно составило около 3,5 мин, с примене- нием предиктивного ввода – 2,5 мин. Скорость набора текста напрямую зави- сит как от подготовки участника эксперимента, так и от набираемого текста. Эффективность применения системы предиктивного ввода возрастает, если набираемые слова имеют длину более четырех букв.																																																																											
Проведенные исследования показывают, что системы предиктивного вода повышают скорость набора текста, позволяют повысить эффективность человеко-машинного взаимодействия и работоспособность в целом.																																																																											

Система контроля достоверности текстовой информации на основе n-граммных парсинговых моделей																																																																											

Постановка задачи контроля и коррекции текстовой информации. Функционирование любых информа- ционных систем в существенной степени зависит от достоверности передачи сообщений, которая снижается вследствие ошибок человека-оператора, влияния помех в системах связи, сбоев электронного оборудования и по- грешностей систем сканирования и распознавания. Причем в системах, предназначенных для обработки большого объема текстовой информации, например в системах электронного документооборота (СЭД), искажения проявля- ются в основном в виде орфографических ошибок различной кратности (однократные, двукратные, n-кратные) [1, 2]. В научных исследованиях, посвященных компьютерной обработке текстовой информации, многократно под- черкивается (главным образом, в виде постановки задач, а не решения проблемы) эффективность использования n-граммной модели естественного языка (ЕЯ) для решения задач контроля достоверности передачи и обработки текстов [3]. Однако решение проблемы контроля и коррекции ошибок в текстах на основе n-граммной модели, хотя и представляется наиболее перспективным, мало изучено с точки зрения обеспечения качества обработки																																																																											
текстовой информации, особенно представляемой на узбекском языке.																																																																											
Следует отметить, что проблема контроля и коррекции ошибок в текстах на основе n-граммной модели ЕЯ связана с решением комплекса теоретических и практических задач, среди которых наиболее важными являются: исследование вероятностей появления ошибок для получения априорной базы n-грамм; разработка методик оцен- ки достоверности информации при равномерных и неравномерных моделях n-кратных искажений; парсинговое моделирование структуры слова на основе словоформ, разработка вероятностных моделей кластеризации и поиска объектов контроля; компьютерная реализация моделей и алгоритмов контроля и коррекции n-граммных ошибок, оптимизация параметров функционирования компонентов систем контроля орфографии и оценка качества ее функционирования.																																																																											
В настоящей работе представлены результаты исследований, направленных на решение указанных задач.																																																																											
Модели условной вероятности n-граммных искажений. Определение вероятностей n-граммных ошибок связано с обработкой большого объема статистических данных и трудоемкими вычислениями, так как важной особенностью n-грамм является то, что их число растет экспоненциально относительно длины n. Следовательно, необходимо специальное моделирование процессов вычисления статистики и вероятностей n-граммных ошибок. В работе [4] исследованы закономерности распределения ошибок передачи текстовой информации, предложены способы моделирования и алгоритмы для выявления искаженных элементов (букв, слов) в тексте, кластеризации,																																																																											

поиска, структуризации; получены частотные характеристики n-грамм при большом объеме информации, которые применялись в процессах апробации систем контроля и коррекции орфографических ошибок. Результаты прове- денных экспериментальных исследований использовались при установлении закономерностей появления искаже- ний в информации, определении условных вероятностей n-граммных ошибок для решения задач генерации и син- теза текстов из речи.																																																																											
Заметим, что используемые экспериментальные данные получены на основе теоретических положений при допущении о равновероятности n-граммных ошибок, что позволило получить простые математические выражения для проведения аналитических исследований. В связи с этим представим равномерную модель n-граммных ошибок.																																																																											
Равномерная модель n-граммных ошибок. Общая вероятность ошибок, обусловленных ошибками челове- ка-оператора, сканирования и распознавания, искажениями в каналах связи, сбоями электронных средств переда- чи и обработки информации, обозначим через Р. Процесс перехода ?i -го сообщения в ? j -е, как правило, задается																																																																											

стохастической матрицей переходных вероятностей																																																																											

P	, которая считается основным показателем при оценке																																																																										
i  i    																																																																											

достоверности информации в любой системе передачи и обработки данных.																																																																											
Общая вероятность ошибок при передаче ?i -го сообщения равна																																																																											
P?i    ? 1? P?i?i    ?	?   P i     j  ,																																																																										
? j (?i ?? j )																																																																											


где																																																																											

P? ?   ? вероятность правильного приема ?i -го сообщения. Средняя вероятность ошибки находится осредне-																																																																											

нием условных вероятностей ошибки по всему ансамблю сообщений:																																																																											

P ? ? P?i																																																																											
?i																																																																											

? P i    j .																																																																											
? j (?i ?? j )																																																																											

(1)																																																																											

Формула (1) является двумерной моделью оценки вероятности Р, связанной с оценкой монограммной вероят-																																																																											

ности P	и диграммной вероятности																																																																										
i																																																																											

P	. В случае   учета   статистики трехграмм необходимо исследовать																																																																										
i  i    																																																																											

вероятности переходов																																																																											

?i? j ? ? , а при статистике n-грамм требуется вычислить   вероятности   набора																																																																											

?i? ,?i''  ,L,?in    ? ? j '  ,? j ''  ,L,? j n   .																																																																											
Математическая модель условных вероятностей n-грамм. Пусть задан некоторый язык																																																																											



L(VT )																																																																											



с конеч-																																																																											

ным алфавитом VT																																																																											

? {wi} , где wi																																																																											

– отдельный символ, VT    – множество цепочек (строк) конечной длины, состоя-																																																																											

щих из символов алфавита VT , n-грамма на алфавите VT																																																																											

представляет собой цепочку длиной n.																																																																											

Как правило, n-грамма может совпадать с каким-либо высказыванием, быть его подстрокой или вообще не																																																																											

входить в																																																																											

L(VT ) . Например, если алфавит – это буквы ЕЯ плюс дефис, а высказывания – это слова ЕЯ, то																																																																											

n-грамма – это последовательность из n символов (букв и дефисов), принадлежащая одному слову; если высказы- вания – это тексты, то n-грамма – это последовательность из N слов одного текста; если алфавит – это морфологи- ческие описания слов ЕЯ плюс знаки пунктуации, а высказывания – это соответствующие фразам и грамматиче- ски допустимые морфологические описания входящих в них слов, то n-грамма – это последовательность грамма- тически допустимых описаний n подряд стоящих слов.																																																																											
Обозначим через C(w) ? C(w1w2 …wn?1wn ) число вхождений строки																																																																											
w ? w1w2 …wn?1wn																																																																											
в совокупность всех текстов рассматриваемого языка. Предположим, что алфавит рассматриваемого языка содер- жит буквы (без учета регистра) и знаки пунктуации, тогда как пробел, переход на новую строку и начало текста – специальные разделители, не входящие в алфавит. Высказывание в таком языке – это неделимая последователь- ность символов																																																																											
p(w) ?   C(w)   .																																																																											
?C(w*)																																																																											
w*																																																																											

Вероятность																																																																											

p(w)																																																																											

появления n-граммы																																																																											

w ? w1 …wn																																																																											

равна отношению																																																																											

C(w)																																																																											

к общему числу экземпляров																																																																											

всех встреченных в совокупности n-грамм. В частности, для монограмм, т. е. отдельных символов, имеем																																																																											


p(wi ) ?																																																																											

C(wi )																																																																											

?C(w j )																																																																											
w j																																																																											



где wi																																																																											

– символ алфавита V ; числитель – количество вхождений wi																																																																											

в совокупность всех слов, а сумма в знаме-																																																																											

нателе ? общее число символов в ней.																																																																											
Если вероятности появления символов в любой позиции цепочки независимы и одинаково распределены, то вероятность n-граммы																																																																											

n																																																																											
p(w1...wn) ? ? p(wi ) .																																																																											
i?1																																																																											

Это, в частности, означает, что любые перестановки символов строки ность.																																																																											



w ? w1 …wn																																																																											




имеют одну и ту же вероят-																																																																											

Если достоверного априорного знания о равенстве распределений символов в разных позициях строки не су-																																																																											

ществует, следует ввести условные вероятности. Тогда, обозначив через позиции строки стоит символ w* , получим условную вероятность строки																																																																											

p(w ? w* )																																																																											

вероятность того, что в j-й																																																																											

p(w* …w* ) ? p(w																																																																											

? w* w																																																																											

? w*?i ? j) p(w ? w*?i ? j) .	(2)																																																																										

Формула (2) служит также априорной основой при построении алгоритмов автоматической кластеризации слов системы контроля орфографии. В связи с этим ниже рассматриваются решение задач кластеризации слов и специфические подходы для получения эффективных алгоритмов кластеризации слов и просмотра строки текста.																																																																											
Математическая модель кластеризации слов. Можно предложить одностороннюю (например, просмотр строки текста слева или справа) и вместе с тем двухстороннюю модель кластеризации слов, где строка текста по- очередно прослеживается и слева, и справа. Установлено, что алгоритм кластеризации на основе односторонней модели позволяет значительно быстрее, без существенных потерь обеспечить выделение слова и разбиение слов на классы. Рассмотрим кластеризацию на основе односторонней модели при просмотре строки текста с левой стороны.																																																																											

Корпус слов до некоторой степени редуцируется отображением каждого из Nv																																																																											

слов в Nc																																																																											

классы, где																																																																											

Nc ? Nv .																																																																											

При этом основным условием является представление n-граммной статистики для полученного корпуса классов слов. Для отображения слова в классы данная модель представляется в виде																																																																											
w ? C ? C(w) ,																																																																											
где слово w может принадлежать только одному классу. В данной работе кластеризация в классы проведена для слов узбекского языка. При этом в качестве критерия оптимизации кластеризации использована мера наибольше- го подобия, определенная в тренировочном множестве. Заметим, что ключевыми моментами кластеризации слов в классы являются парсинговое моделирование структуры слова на основе словоформ [5], выработка методов поис- ка и оценка их вероятностей при принятых моделях.																																																																											
Расчет компонентов вероятностей односторонней модели. Компонент вероятности односторонней моде- ли классов представляется в виде																																																																											
P(wi ) ? P(wi / C(wi?n?1 ),…,C(wi?1 )) .	(3)																																																																										
По модели (3) текущее слово обрабатывается в зависимости от предыдущих слов, отображенных в классы. Следо- вательно, вероятность очередного символа строки также задается в зависимости от предшествующих ему (n ? 1)																																																																											

символов:																																																																											

p(wn   w1 …wn?1 ) . Тогда																																																																											

p(w1 …wn?1wn ) ? p(wn w1 …wn?1 ) p(w1 …wn?1 ) .																																																																											
"В терминах вероятности ""быть справа"" для триграмм имеем"																																																																											

p(w1...wn) ? p(wn  | w1...wn  ?  1) p(wn  ?  1 | w1...wn  ?  2) p(wn  ?  2  | w1...wn  ?  3) p(w2) ,																																																																											
в общем случае можно записать																																																																											
? n	?																																																																										
p(w1...wn) ? ?? p(wk  | w1...wk  ?  1) ? p(w1) .	(4)																																																																										
? k ?2	?																																																																										
"Введя фиктивный символ ""начало"" и приняв, что p(w1 w0 ) есть p(w1) , выражение (4) представим в виде"																																																																											




p(w1...wn) ? ? p(wk  | w1...wk  ?  1)																																																																											
k ?1																																																																											

(5)																																																																											

Таким образом, марковская цепь (n ?1) -го порядка оказывается моделью n-граммы, а задача оценивания ста- тистических параметров n-граммы – хорошо изученной задачей оценивания параметров марковской цепи.																																																																											
Следует отметить, что вследствие наличия множества возможных типичных строк символов значения вероят-																																																																											
ностей, вычисленные по формуле (5), очень малы и их использование связано с большими трудностями вычисли- тельного характера. Поэтому для упрощения вычислений выражение (4) целесообразно записать в виде																																																																											



log P(w1w2 w3...wn ) ? ?log P(w1 w1w2 w3...wn ),																																																																											
k ?1																																																																											

однако для определения (6) необходимы многократные вычисления:																																																																											


(6)																																																																											




P ? ? pi .																																																																											
i?1																																																																											

Задавая log(a ? b) ? log a ? log(1? b / a) , вычисляем log P по следующему рекурсивному алгоритму: Начало: log P ? log p1																																																																											
Рекурсия: a ? max(log pn , log pn?1 )																																																																											
b ? min(log pn , log pn?1 )																																																																											
log pn?1 ? a ? log(1? exp(b ? a))																																																																											
Конец: log P ? log pn .																																																																											
Для проведения аналитических исследований эффективности систем контроля орфографии также представляет интерес получение упрощенных оценок вероятностей n-грамм.																																																																											
Упрощенные оценки условных вероятностей n-грамм. Как правило, оценкой вероятности n-граммы слу- жит частота ее встречаемости:																																																																											

p?(w | w																																																																											

...w																																																																											

) ? f (w | w																																																																											

...w																																																																											

) ? C(wi ?n...wi ?1wi )   .																																																																											

i	i ? n	i  ? 1																																																																									

i	i ? n	i ? 1																																																																									

C(w ...w w )																																																																											

Поскольку частота появления ошибок в виде n-грамм представляет случайную величину, частотные характери- стики можно интерполировать для получения их осредненных оценок.																																																																											
Общая оценка условных вероятностей n-грамм также оценивается с учетом частоты их встречаемости:																																																																											


p?(w  | w    ...w																																																																											


) ? f (w | w   ...w																																																																											

) ? C(wi?n …wi?1wi ) ,																																																																											


i	i?n	i?1																																																																									

i	i?n	i?1																																																																									

C(wi )																																																																											

где C(wi ) – общее число n-грамм, встреченных в последовательности.																																																																											
В качестве методики получения упрощенной оценки вероятностных переходов предложим упрощенную зна- ково-основанную диграммную модель.																																																																											

а	б	4.1. Диграммная модель ошибок. Рассмот-																																																																									
w	рим диграммную модель, которая требует ве-																																																																										
роятностей формы P(w w ) . Обозначим час-																																																																											
i	j																																																																										




w44																																																																											


w12																																																																											


w21																																																																											


w22																																																																											

тоты символа или слова через Fi, а условные частоты Fi|j представим как число следования символа j за символом i. Тогда оценку макси- мальной вероятности запишем в виде																																																																											

P(w w ) ?	?	.																																																																									

Рис. 1. Цепь Маркова (а) и вероятностные состояния цепи (б)																																																																											

? Fi j	Fj																																																																										

i																																																																											

Рассмотрим цепь Маркова (рис. 1, а), в которой переходы происходят по стрелкам с вероятностями рij. На рис. 1, б показаны текущие состояния Si, выдаваемые символами ?i; причем каждое состояние имеет собственное распределение вероятности.																																																																											
В данном случае вероятности переходов устанавливаются по формуле																																																																											
Fi j ?1																																																																											

P(wi wj ) ?																																																																											


Aw   ? ? Fi j i																																																																											

Следует отметить, что вероятности перехода зависят от состояния цепи Маркова, которое является постоян- ным числом. Например, если в момент времени t = 0 мы в состоянии s с вероятностью перехода pss, то вероятность постоянства этого состояния оценивается экспоненциальным разложением																																																																											
P(сост ? s) ? exp(?t / ? )																																																																											
с характерным временем ? ? ?1/ log pss . Это время прямопропорционально масштабу длины, если модель выдает символы равной длины.																																																																											
Вероятность переходов между состояниями определим по следующей формуле:																																																																											
1? pss ? 1? exp(?1 / ? ) ? 1 / ? (? ?? 1) .																																																																											
Большие значения ? исключают переходы в масштабе длины знака и являются желательным поведением системы. Однако если характерное время ? установлено меньшим или равным 1010 знаков, то это не будет подавлять переход.																																																																											
В случае если известно большее количество данных об индивидуальных частотах символа, то по моделям мо- нограммы лучше определяются вероятности диграмм. Поэтому введем процедуру интерполирования диграммных распределений более простой моделью монограммы:																																																																											


P(wi wj																																																																											

? ? Fi ? (1? ?) Fi j ) ,																																																																											
N	Fi																																																																										

где N – общее число символов; ? определяется эмпирически.																																																																											
Модель монограммы с однородным распределением может сглаживать и более сложные модели, например триграммную модель.																																																																											
4.2. Триграммная модель ошибок. С целью упрощения оценки условных вероятностей триграмм будем исполь- зовать линейную интерполяцию																																																																											
p?(wi  | wi?2 wi?1 ) ? q2  f (wi  | wi?2 wi?1 ) ? q1 f (wi  | wi?1 ) ? q0  f (wi ) ,																																																																											

где																																																																											

f (wi …)																																																																											

– выборочные оценки, которые определяются следующим образом:																																																																											


f (w | w w																																																																											

) ? C(wi?2 wi?1wi ) ,																																																																											



f (w | w																																																																											

) ? C(wi?1wi ) ,																																																																											


f (w ) ? C(wi ) .																																																																											


i	i?2																																																																										

i?1																																																																											

C(w   w   )																																																																											

i	i?1																																																																										

C(w   )	i	C																																																																									

i?2     i?1																																																																											

i?1																																																																											

Здесь C – общее число экземпляров всех символов, остальные величины в знаменате- лях – число для соответствующих (n–1)-грамм, за которыми следует допустимый в рассмат- риваемом языке символ. В каждом слове это число для (n–1)-грамм на единицу меньше, чем для n-грамм, в случае если число (n–1)- грамм больше нуля, в противном случае это число равно 0.																																																																											
Для упрощенной вероятностной оценки авторами данной работы предложен метод рекурсивной линейной интерполяции относи- тельных оценок частоты различных порядков																																																																											



Рис. 2. Рекурсивная линейная интерполяция																																																																											
f k (?), k ? 0... n . На рис. 2 приведена рекурсивная схема смешивания,																																																																											

на основе которой запишем выражение для вычисления условных вероятностей																																																																											
Pn (wn | w1 ,..., wn?1 ) ? ?(w1 ,..., wn )Pn?1 (wn | w1 ,..., wn?2 ) ? (1? ?(w1,..., wn )) f n (wn | w1 ,..., wn?1 ) ,																																																																											
P?1 (w) ? uniform(W ) ,																																																																											

где																																																																											

w1 ,…, wn?1																																																																											

контекст порядка n, когда предсказано																																																																											

wn ;																																																																											

f n (wn w1,…, wk )																																																																											

относительная частотная оценка																																																																											

порядка k для условной вероятности Pn (wn w1 ,…, wk ) :																																																																											
f k (wn  | w1,…, wk ) ? C(wn , w1,…, wk )  C(w1,…, wk ),																																																																											


k ? 0…n,																																																																											

C(wn , w1,…, wk ) ?	?																																																																										
wk ?1?Wk ?1																																																																											

… ?																																																																											
wn ?Wn																																																																											

C(wn , w1,…, wk , wk ?1 …wn ?1 ),																																																																											



?(w1,…, wk ) ?[0,1],																																																																											



k ? 0…n																																																																											

C(w1,…, wk ) ? ? C(wn , w1,…, wk ),																																																																											
w?W  																																																																											
коэффициенты интерполяции.																																																																											

Заметим, что коэффициенты ?(w1 ,…, wk )																																																																											

сгруппированы в эквивалентные классы на основе диапазона, в ко-																																																																											

торый попадает индекс C(w1,…, wk ) ; для каждого эквивалентного класса диапазоны индекса установлены таким образом, что статистически достаточное число событий (wn | w1,…, wk ) попадает в пределы этого диапазона.																																																																											
Предложенная выше методика оценки условных вероятностей ошибок в текстах на основе n-граммной модели позволяет оценить их значения в виде осредненных характеристик появления однократных, двукратных и трех- кратных ошибок, которые являются важными факторами при оценке качества применения способов контроля дос- товерности текстовой информации.																																																																											
Оценка достоверности информации. Поскольку в системах контроля орфографии основным элементом проверки и коррекции является слово текста, при построении таких систем на первый план выдвигаются задачи распознавания слова и его элементов. В [2, 6] разработаны интерполяционные и экстраполяционные алгоритмы распознавания элементов текста, в том числе слова. Ниже рассмотрены методики получения вероятностных моде- лей выделения слов в строке текста в предположении, что распознавание слова осуществляется по указанным ал- горитмам статистического распознавания.																																																																											
Вероятностная модель распознавания элементов текста. Начнем с выделения строки слов																																																																											
W? ? arg max P( A | W )P(W ) ,																																																																											
W																																																																											

где A обозначает наблюдаемое слово; P( A / W ) – условная вероятность того, что слово в строке W представляется																																																																											
в виде образа A ; P(W ) – априорная вероятность появления слова в тексте W. Исследование заключается в оценке																																																																											
значения вероятности P(W ) .																																																																											

Пусть строка задается набором слов W ? w1, w2 ,..., wn , тогда по теореме Байеса имеем																																																																											

P(W ) ? ? P(wi | w1, w2 ,…, wi?1 ) .																																																																											
i?1																																																																											

Заметим, что пространство параметра																																																																											

P(wk | w1 , w2 ,…, wk ?1 )																																																																											

очень широко, причем слова wi   принадлежат сло-																																																																											

варю V большого размера. Для распознавания представляется предыстория лентного класса, определяемого функцией Ф(Wk ?1 ) , а также																																																																											

Wk ? w1 , w2 ,…, wk ?1																																																																											

в виде эквива-																																																																											



P(W ) ? ? P(wk | Ф(Wk ?1 )) .																																																																											
k ?1																																																																											

Тогда задача определения вероятности выделения слов сводится к нахождению эквивалентных классификаторов Ф и методов оценки P(wk | Ф(Wk ?1 )) .																																																																											
Поскольку для распознавания слова в тексте предлагается использование n-граммной модели языка, функция эквивалентной классификации представляется в виде																																																																											
Ф(Wk ?1 ) ? wk ?n?1 , wk ?n?2 ,…, wk ?1 .																																																																											
Следует отметить, что определение формы Ф(Wk ?1 ) предшествует решению задачи оценки P(wk | Ф(Wk ?1 )) , яв- ляющейся критерием качества распознавания и соответственно контроля достоверности элементов текста.																																																																											
Оценка качества распознавания слова. Качество системы контроля орфографии, как правило, определяет-																																																																											
ся достоверностью распознавания слова на основе словаря словоформ. Поэтому при решении поставленной зада- чи важным моментом является определение показателя ошибки распознавания слова. Для этого находим наиболее																																																																											

благоприятное слово, произведенное алгоритмом распознавания W?																																																																											

и истинной последовательностью слов. Затем																																																																											

подсчитывается число неправильных слов W?																																																																											

в общем числе слов в W .																																																																											

Особенность контроля текстовой достоверности заключается в том, что при построении алгоритма распозна- вания и соответственно системы контроля орфографии используется большой объем словарей словоформ и пре- фиксов слов, при этом алгоритм позволяет выделить несоответствующие слова, обеспечить эквивалентную клас- сификацию префикса слова и использовать априорную информацию при предсказании следующего слова.																																																																											
Как одну из оценок качества распознавания слова можно использовать энтропию основного источника инфор- мации																																																																											



где H w																																																																											



Hw (M ) ? exp(?1 / N ?ln[PM  (wk  | Wk ?1 )]) ,																																																																											
k ?1																																																																											
энтропия слова в строке; N ? число слов в общем объеме словаря тестируемого материала.																																																																											

Парсинговое моделирование структуры слова на основе словоформ. Аргументы приведенных моделей эквивалентной классификации и оценки качества распознавания определяются на основе изложенного ниже ново- го механизма применения n-граммной структурированной модели естественного языка, который включает проце- дуры парсингового кодирования и поиска последовательности контролируемых слов.																																																																											
Парсинговое кодирование. Пусть W – предложение длиною n слов, к которому добавим в начало ? s ? и в конец ? /s ? , так что получим w0 ?? s ? и wn?1 ?? s ? .																																																																											

Обозначим через Wk ? w0 …wk																																																																											

число k-префиксов слова в предложении, тогда WkTk																																																																											

будет k-префиксом слова-																																																																											

парсинга. Для кодирования последовательности слов построим дерево слова-парсинга. Отметим, что k -префикс слова-парсинга содержит только те бинарные поддеревья, диапазоны которых полностью включены в k -префиксы																																																																											

слова, за исключением																																																																											

w0 ?? s ? . Отдельные слова вместе с их позиционными признаками (POS-признак) могут																																																																											

быть расценены как корневые деревья.																																																																											
На	рис. 3	показан	полный	парсинг	некоторого	слова.	Схема	определяет	бинарный	парсинг																																																																	
(? s ? SB)(w1,t1)…(wntn )(? /s ?, SE) ,	где	последовательность	SB/SE ?	отличительный	POS-признак	для																																																																					

? s ? / ? /s ?   соответственно   с   ограничениями,   что   (? /s ?,TOP)																																																																											

единственно дозволенный   заголовок;																																																																											

(w1,t1 )…(wntn )(? /s ?, SE)  формирует элемент, возглавляемый (? /s ?,TOP?) .																																																																											
Парсинги определяются, когда (? /s ?,TOP?) – заголовок любого элемента, который доминирует (над ? /s ? ),																																																																											
но не ? s ? .																																																																											
На рис. 4 представлена схема взаимодействия модулей системы кодирования для построения алгоритма распо- знавания элементов на основе парсингового дерева. Система кодирования состоит из трех модулей:																																																																											
"Предсказатель слова предсказывает следующее слово wk ?1 , данное k-префиксом слова-парсинга, затем пе- редает управление на ""Tаггер"";"																																																																											

Taггер предсказывает POS-признак																																																																											

tk ?1																																																																											

следующего слова, данного k-префиксом слова-парсинга, и по-																																																																											

"следнего предсказанного слова wk ?1 , затем передает управление модулю ""Конструктор"";"																																																																											
"Конструктор наращивает существующую двоичную расширенную структуру, повторно генерируя перехо- ды, до тех пор пока управление не перейдет к модулю ""Предсказатель"" по достижении пустого перехода."																																																																											
Теперь рассмотрим получение оценки вероятностей обмена информацией между модулями парсинговой модели.																																																																											
Вероятностные оценки парсинговой модели. Обозначим вероятность распознавания последовательности																																																																											
слов W в парсинговой модели через P(W ,T ) , где T ? дерево полного парсинга. Вероятностная модель должна																																																																											
быть способной различить желательные и менее желательные парсинги. Для того чтобы получить правильное на- значение вероятности P(W ,T ) , необходимо определить надлежащие условные вероятности каждому переходу.																																																																											
Вероятность P(W ,T ) последовательности слов W и полного парсинга T рассчитывается следующим образом:																																																																											
n?1																																																																											
P(W ,T ) ? ?[P(w | W T   )P(t | W   T   , w )P(T k | W   T   , w ,t )] .																																																																											


k ?1																																																																											
Nk																																																																											

k	k ?1  k ?1																																																																										

k	k ?1  k ?1																																																																										

k	k ?1																																																																										

k ?1 k ?1	k     k																																																																										

Здесь																																																																											

P(T k																																																																											

| W   T																																																																											

, w ,t ) ? ? P( pk | W  T  , w ,t , pk … pk ) ; W  T																																																																											

?   (k ?1) -й префикс слова-парсинга;																																																																											

k ?1																																																																											

k ?1  k ?1																																																																											

k     k	i	k ?1 k ?1	k     k	1																																																																							
i?1																																																																											

i?1																																																																											

k ?1 k ?1																																																																											

"w – слово, предсказанное ""Словопредсказателем""; t – признак, назначенный для w ""Таггером""; T k ? пошаговая"																																																																											

k	k	k																																																																									

k ?1																																																																											

парсинговая структура, которая генерирует T ? T																																																																											

|| T k																																																																											

, когда парсинговая структура построена на вершине T																																																																											

k	k ?1																																																																										

k ?1																																																																											

k ?1																																																																											

и вновь предсказанного слова																																																																											

wk ; запись ?? обозначает конкатенацию;																																																																											

Nk ?1 ? число операций, выполняемых																																																																											

"Конструктором на позиции k входной строки перед передачей управления ""Словопредсказателю"" ( Nk -я опера-"																																																																											

ция на позиции k – нулевой переход, причем																																																																											

Nk  представляет собой функцию от T );																																																																											

k обозначает i-е действие																																																																											

Конструктора, выполненное в позиции k строки слова, и представляется следующим образом:																																																																											



(? /s ?,TOP ')																																																																											


(? /s ?,TOP)																																																																											

Предсказывать слова																																																																											











(? s ?, SB)																																																																											

(w _1,t _1)	(w _ n,t _ n)(? /s ?, SE)																																																																										



Примыкать_(налево, направо)																																																																											



Рис. 3. Полный парсинг	Рис. 4. Взаимодействия модулей системы парсингового кодирования																																																																										

pk ?{(adjoin ? left, NTag), (adjoin ? right, NTag),(uniray, NTag)} ,1 ? i ? N ,	pk ? null, i ? N .																																																																										
i	k	i	k																																																																								
Заметим, что каждое (W T   , w ,t , pk … pk ) , i ? 1,...N , определяет значащий k-префикс слова-парсинга																																																																											

WkTk																																																																											

k ?1 k ?1	k     k	1																																																																									
в позиции k в предложении.																																																																											

i?1	k																																																																										

"Алгоритм оптимизации компонентов модели распознавания, контроля достоверности и поиска сло- воформ. Для гарантирования надлежащей вероятностной модели по набору полных парсингов для любого пред- ложения W, вероятностям ""Конструктора"" и ""Предсказателя слова"" необходимо задать определенные значения. Набор ограничений на значения вероятностей компонентов различных моделей совместим со следующим алго- ритмом:"																																																																											
P(null | WkTk ) ? 1, ifh _{?1}.word ?? s ? и h _{0} ? (? /s ?,TOP?) , т. е. перед предсказанием ? /s ? гарантиру-																																																																											
ется, что ( ? s ? , SB) примыкает к последнему (прошлому) шагу процесса парсинга;																																																																											
P((adjoin ? right,TOP) | WkTk ) ? 1, если h _ 0 ? (? /s ?,TOP?) и h _{?1}.word ?? s ? ;																																																																											
P((adjoin ? right,TOP?) | WkTk ) ? 1, если h _ 0 ? (? /s ?,TOP?) и h _{?1}.word ?? s ? .																																																																											
Шаги 2, 3 гарантируют, что парсинг, произведенный моделью, совместим с определением полного парсинга;																																																																											
??? 0s.t.?Wk ?1Tk ?1 , P(wk ?? /s ?| Wk ?1Tk ?1 ) ?? . На этом шаге обеспечивается остановка модели. Как только ко- нец символа предложения ? /s ? сгенерирован, модель заканчивает парсинг с вероятностью, равной единице.																																																																											
"Оптимизация работы ""предсказателя"". Рассмотрим иерархическую схему и алгоритм построения стеков для нахождения нового слова – объекта контроля. Предположим, что каждый стек содержит частичные парсинги – гипотезы, которые были построены одним и тем же числом операций ""Предсказателя"" и ""Конструктора"". Частич-"																																																																											

ный парсинг в каждом стеке оценивается согласно принятому критерию ln(P(W ,T ))																																																																											
вершины.																																																																											

начиная с самой высокой																																																																											

На рис. 5 показана схема действий алгоритма, связанных с просмотром нового слова Wk ?1 . (Здесь Pk ? макси-																																																																											
мальное число операций примыкания для k-кратного префикса слова; так как дерево двоично, Pk ? k ?1 .)																																																																											
Процедура поиска строится на основе двух параметров:																																																																											



Рис. 5. Цикл расширения поиска																																																																											

? максимальная глубина стека ? максимальное число гипотез, кото- рые стек может содержать в любое данное время;																																																																											
? порог лог-вероятности ? разли- чие между оценками лог-вероятнос- ти наиболее вероятной и наименее вероятной гипотез в любом данном состоянии стека, причем порог лог- вероятности не может быть больше заданного значения.																																																																											
Заключение. Таким образом, теоретические и практические ис- следования проблемы построения компьютерной системы текстовой информации, проведенные с целью разработки методов и алгоритмов контроля и коррекции орфографии на основе n-граммной модели есте- ственного языка позволили опреде- лить закономерности распределения n-граммных ошибок; оценить досто-																																																																											

верность информации при равномерных и неравномерных гипотезах n-кратных искажений; провести парсинговое кодирование и моделирование структуры слова на основе словоформ; оценить качество распознавания, кластери- зации, поиска элемента текста; моделировать процессы реализации алгоритмов эквивалентной классификации. Полученные вероятностные модели парсингового представления слов, кодирования и поиска позволяют оценить качество распознавания, эффективно моделировать процессы реализации алгоритмов эквивалентной классифика- ции в системах контроля и коррекции орфографических ошибок.																																																																											
Предложены методы и алгоритмы оптимизации параметров функционирования компонентов системы контро- ля орфографии, которые реализованы в виде самостоятельных программных модулей, соответствующих требова- ниям разработки пакетов прикладных программ. Полученные теоретические положения исследований позволили построить программную систему контроля и коррекции орфографии узбекского языка на основе n-граммной мо- дели, которая показала высокое качество функционирования в системах электронного документооборота пред- приятий различных форм собственности.																																																																											

Роль BIM-технологий																																																																											
в организации и технологии строительства																																																																											
Аннотация. Строительная отрасль не стоит на месте, она постоянно развивается, появляются новые технологии, инновационные материалы, совершенствуются машины и механизмы. Важным инструментом строительства и проектирования являются BIM-технологии (Building Information Modeling). BIM — это процесс, в результате которого формируется информационная модель здания или сооружения. На каждой стадии есть модель, которая даёт информацию об объеме обработанной на данный момент информации (архитектурной, конструкторской, технологической, экономический). Развитие BIM так же не останавливается, а наоборот, возрастает довольно быстрыми темпами. Уже имеющиеся программные комплексы постоянно совершенствуются, разработчиками выпускаются частые обновления. В настоящее время BIM применяется не только для сложных уникальных сооружений (заводы, уникальные здания), его так же активно внедряют и использую для проектирования многоэтажной застройки, что в свою очередь имеет массу преимуществ.																																																																											
С точки зрения экономики — это возможность создания цифровых моделей реального мира экономики. Цифровые модели на основе современных технологий измерений позволят																																																																											

обеспечить учёт различных ресурсов в экономике и процессов, которые происходят с этими ресурсами. Информационные технологии помогают экономике преодолеть извечный недостаток — это высокий уровень издержек. Для некоторых отраслей на рынке этот фактор является критичным. На сегодняшний момент для некоторых компаний нет другого способа снижения издержек, нежели внедрение IT-решений. Преимущества цифровой экономики это																																																																											
— увеличение производительности труда; простота централизованного управления, налогообложения и контроля; глобальная автоматизация и стандартизация всех хозяйственных процессов: производственных, образовательных, медицинских, социальных и т. д.; снижение бюрократии и коррупции; развитие цифровых денег и пр.																																																																											
Ключевые слова: технологии; сооружения; BIM; среда; модель; моделирование																																																																											

Введение																																																																											
BIM-технологии (Building Information Model) и BIM-проектирование призваны помочь проведению масштабных и объемных работ по проектированию зданий и сооружений.																																																																											
Внедрение информационного моделирования в России происходит постепенно, так 5 марта 2021 года было принято постановление № 331, обязывающее с первого января 2022 года применять BIM на объектах госзаказов.																																																																											
С точки зрения организации, технологии и экономики строительства информационное моделирование позволяет упорядочивать процессы строительства, уменьшать производственные расходы и увеличивать прибыль. Кроме того, использование BIM позволяет сокращать сроки выполнения работ и повышать их качество.																																																																											
Цель исследования — это определение значимости BIM-технологий, их влияния на организацию, технологию и экономику строительства, а также изучение основных программных обеспечений, повышающих работоспособность и продуктивность организаций.																																																																											

Основные направления информационного моделирования																																																																											
В настоящее время всё больше Российских крупных компаний внедряют BIM технологии в проектирование. Современный этап развития информационных технологий в отечественном строительном комплексе характеризуется переходом от разработки чертежей в двухмерном пространстве к информационному моделированию всего процесса строительства, что актуализирует использование BIM-технологий [1].																																																																											
Переход на BIM компаний средних и малых может оказаться болезненным ввиду необходимости закупки необходимого ПО (программного обеспечения), обучения персонала, разработки необходимых шаблонов, перевода проектов в новый формат. Производительность труда сотрудников при таком переходе может снизиться, но постепенно возрастет, достигая более высокого уровня [2].																																																																											
При внедрении BIM, компании могут получить следующие улучшения в организационном и экономическом плане:																																																																											
создание единой платформы для взаимодействия вне зависимости от месторасположения клиентов, подрядчиков, поставщиков на базе информационных моделей;																																																																											
ориентация на заданные KPI, введение расчётов CapEX и OpEX;																																																																											
адаптивный мониторинг;																																																																											

повышение эффективности на всех стадиях жизненного цикла;																																																																											
внедрение информационных систем на базе моделей для автоматизации основных бизнес-процессов1.																																																																											
Главное достоинство BIM, которое неоднократно подчеркивалось теми, кто с ним работал — умение данного программного комплекса устранять строительные нестыковки и ошибки еще на этапе проектирования. Это, безусловно, экономит время и силы проектировщиков 2 . Удобство трехмерной BIM-модели еще и в том, что из нее можно автоматически получать 2D-чертежи, ведомости, спецификации, графики проектных работ. BIM-модель описывает весь жизненный цикл сооружения, а значит, может применяться и на этапе его эксплуатации [3].																																																																											
В настоящее время, в условиях отмены ДДУ (договоров долевого участия) применение BIM может стать еще и конкурентным преимуществом. Сметная прозрачность крайне важна для банков, которые теперь будут контролировать и финансировать строительство [4]. А предельная честность застройщика перед банком может повлиять на кредитную ставку — естественно, в меньшую сторону3.																																																																											
Далее авторы рассмотрели программы наиболее широкого функционала, которые активно применяются при проектировании и строительстве.																																																																											
Программный пакет ARCHICAD позволяет наполнять модель информацией и затем использовать эту информацию при помощи функции автоматического построения фасадов, разрезов, деталей и фрагментов проекта, формировать спецификации и экспликации, оформлять документацию и прочее. Одновременно работать над проектом, используя общий файл, может вся команда специалистов, что существенно уменьшает время проектирования.																																																																											
При передаче информации используется облачное хранение на серверах компаний с возможностью доступа внешних проектировщиков. Благодаря универсальному IFC — формату архитекторы и проектировщики, работавшие над созданием 3D — модели в ARCHICAD, могли без искажений передавать информацию и ставить задачи смежникам, выполнявшим свою часть работы в Revit и Civil 3D [5]. Таким же образом, только в обратном порядке, выполненные задачи передается архитекторам для добавления в BIM-модель сооружения — при помощи связанных модулей IFC (Industry Foundation Classes). IFC универсальный формат данных, позволяющий вести обмен информацией между программами, поддерживающими BIM-процесс. Так же широко используются в проектировании продукты AutoDesk.																																																																											
BIM помогает минимизировать количество ошибок уже на ранних этапах реализации проекта. Убрать все коллизии, «неудобные» пересечения инженерных коммуникаций, которые при обычном проектировании зачастую не видны. Из виртуального проекта можно получить																																																																											






1 [Электронный ресурс] — Электронное сетевое издание всероссийский отраслевой интернет-журнал																																																																											
«Строительство.RU». Российский BIM: свой среди чужих, чужой среди своих.																																																																											
2 [Электронный ресурс] — Зиганшин А.М., Зиганшин М.Г. Учебно-методическое пособие для учебной и научной работы студентов направления «Строительство» (квалификация «магистр»). Изд. 2-е, перераб. и дополн.																																																																											
/ А.М. Зиганшин, М.Г. Зиганшин. — Казань: Изд-во Казанск. гос. архитект.-строит. ун-та, 2019. — 349 с.																																																																											
3 [Электронный ресурс] — https://stroi.mos.ru/builder_science/tiekhnologhiia-bim-iedinaia-modiel-i- sviazannyie-s-etim-zabluzhdieniia?from=cl. Талапов В.В. «Технология BIM: суть и особенности внедрения информационного моделирования зданий». М., 2015. (дата обращения 09.03.2016).																																																																											

детальные данные об объемах строительства. В итоге, BIM сэкономит застройщику не только время, но и деньги, оптимизировав себестоимость стройки4.																																																																											
Для достижения максимального эффекта от использования BIM-технологий необходимо внедрять их на всех этапах реализации проекта, быть компанией полного цикла. В этом случае модель живет от концепции до ввода объекта в эксплуатацию и в дальнейшем как основа для создания эксплуатационной системы [6].																																																																											
Модель должна быть связана с различными справочными и информационными системами. Это даст возможность увязывать информационную модель с планами строительства, финансирования, поставками материалов.																																																																											
Данную связь можно обеспечить за счет правильной классификации элементов модели и создания баз данных материалов, строительных процессов и трудовых ресурсов [7]. Такая система позволит быстро анализировать данные, оперативно вносить изменения при необходимости, просчитывать сроки возведения как всего объекта, так и отдельных конструктивных элементов5.																																																																											
Авторы считают, что без активного внедрения технологий BIM Россия может отстать от мировой строительной индустрии. Отсутствие объёмных моделей и работа с двухмерными чертежами серьёзно затрудняет приход зарубежных инвесторов на российский рынок недвижимости. И наоборот, российским компаниям необходимо осваивать новые технологии, для того чтобы строить за рубежом. Сейчас экономическая ситуация такова, что девелоперы должны полностью пересмотреть свой подход к работе [8]. Высокая конкуренция диктует свои правила. Снизить себестоимость строительства, но не за счет качества, как это обычно практикуется, а за счет высокой технологичности одна из важнейших задач [9].																																																																											
Примером может служить зарубежный опыт: Сингапур стал одной из первых стран, где стали использовать преимущества BIM. Дорожная карта внедрения информационного моделирования в строительстве, разработанная правительством Сингапура с привлечением ведущих мировых экспертов, предполагает создание и поддержку BIM-модели всего островного государства. Уже создано единое государственное облачное информационное пространство для хранения, анализа и применения информационных моделей. Теперь экспертиза Сингапура принимает проекты площадью более 5 тыс. кв. м исключительно в виде BIM-модели. В Сингапуре с применением BIM построены целые города, модель используется на всех стадиях жизненного цикла объекта, от проектирования до эксплуатации. В России же применение BIM модели на стадии эксплуатации можно встретить очень редко. Кроме того, благодаря модели все заинтересованные лица могут получить доступ к информации об инфраструктуре и инженерных сетях окружающих участков и в соответствии с этим принимать какие-либо проектные и управленческие решения [10].																																																																											
Зарубежный опыт в проектировании таких сложных проектов может играть большую роль. В каждой стране существуют свои технологические требования к объекту и человеческие потребности, которые объект должен будет удовлетворять, после воплощения в жизнь. Из этого следует, что на этапе проектирования генерируются идеи, решения для успешной реализации проекта, поэтому необходим обмен знаниями. К примеру, это может быть информация о применяемой технике при производстве строительных работ, технологических решениях, способах проектирования и используемых программных обеспечениях.																																																																											

4 [Электронный ресурс] — https://rcmm.ru/tehnika-i-tehnologii/47484-bim-tehnologii-dlja-aura-apart-teper- my-prosto-ne-mozhem-a-tochnee-ne-hotim-rabotat-inache.html.																																																																											
5 [Электронный ресурс] — https://stroi.mos.ru/builder_science/tiekhnolo-ghiia-bim-iedinaia-modiel-i- sviazannyie-s-etim-zabluzhdieniia?from=cl.																																																																											

Для проектирования сложных проектов активно используются такие ПО (программное обеспечение) как Tekla, Aveva.																																																																											
Tekla Structures — это мощное программное обеспечение для информационного моделирования и проектирования строительных конструкций. Tekla Structures применяется на протяжении всего проекта от концепта до производства. Данное ПО локализовано в соответствии со строительными нормами и ГОСТами.																																																																											
Модели Tekla способны обрабатывать самый высокий уровень проработки LOD 500. Уровень проработки модели (LOD) это справочная информация из архитектуры, инжиниринга, строительства (AEC) для спецификации и присвоения артикулов с уровнем ясности данных, надежности информационной модели зданий (BIM), что делает их действительно технологичными.																																																																											
Обновленное ПО 2021 года доступно в трех независимых от материала конфигурациях, что позволяет подобрать идеальный вариант под самые разные задачи:																																																																											
Tekla Structures Carbon — позволяет планировать и отслеживать всю деятельность по проектированию, деталировке, производству и монтажу строительных конструкций. Можно открывать все типы моделей и чертежей Tekla Structures, а также генерировать отчеты. Возможно отслеживать и контролировать ход выполнения проекта, добавлять информацию в модель, определять последовательности монтажа, управлять согласованиями, просматривать статус производства и календарное планирование и т. д.																																																																											
Tekla Structures Graphite позволяет создавать многоматериальные 3D-модели для проектирования, управления ими и использования их совместно с другими пользователями. Можно создавать общую проектную информацию, такую как чертежи общего вида, спецификации, отчеты и 3D-модели. Кроме того, Graphite можно использовать для создания схем расположения арматуры на стройплощадке и передавать информацию на станки для гибки и обработки арматуры. Здесь интересным и перспективным направлением можно считать 3D печать. Имея модель появляется возможность осуществлять заводское изготовление не несущих конструкций, не требующих армирования. Это, в свою очередь, дает полную свободу действий дизайнерам и архитекторам, проектирующим здания, а также позволяет осуществить экономию средств финансовых и материальных за счёт снижения затрат на оплату труда и энергоресурсы [11].																																																																											
Tekla Structures Diamond включает в себя все возможности Tekla Structures. Можно создавать полностью деталированные 3D-модели вне зависимости от типа строительных материалов, управлять ими и использовать их совместно с другими пользователями.																																																																											
Tekla предоставила программное обеспечение BIM для помощи в планировании и строительстве архитектурно разнообразного и структурно сложного проекта мусоросжигательно завода в Копенгагене Амагер Бакке (рис. 1).6																																																																											
Ключевое понятие системы программных продуктов AVEVA — цифровая 3D-модель объекта. В основу разработки всех информационных систем компании AVEVA положена концепция создания и управления всей технической информацией об объекте на протяжении всего его жизненного цикла. Данное ПО — это полностью интегрированная технология ведения объекта — от разработки обоснования инвестиций, технологической части проекта, детального проекта, выпуска проектной документации, управления логистикой, контроля																																																																											

6 [Электронный ресурс] — Электронное сетевое издание всероссийский отраслевой интернет-журнал																																																																											
«Строительство.RU». BIM-технологии для AURA Apart: «Теперь мы просто не можем, а точнее не хотим, работать иначе».																																																																											

закупок, поставок и складирования, контроля за монтажными и пусконаладочными работами до обслуживания при эксплуатации7.																																																																											
Рисунок 1. Мусоросжигательный завод, спроектированный с помощью Tekla (фото заимствовано: электронный ресурс https://novate.ru/blogs/091120/56667/)																																																																											
Сегодня всё больше представителей бизнес-сферы рассматривает применение информационных технологий как возможность повышения эффективности производства и оказания услуг. Это является отражением определённого этапа развития экономики в целом: растёт значимость конкуренции, компании ищут дополнительные средства повышения рентабельности бизнеса. А информационные технологии — это своего рода «тюнинг» для бизнеса предприятий, точная настройка ряда параметров для достижения максимальной эффективности работы [12].																																																																											
В противовес зарубежным программам российскими специалистами разработана																																																																											
«NanoCAD Plus — отечественная классическая универсальная САПР-платформа». Это единая платформа, которая даёт возможность оперативно обмениваться информацией между участниками проекта. Платформа полностью адаптирована к Российским стандарт. NanoCAD имеет большое количество приложений к платформе, необходимых для процессов проектирования и строительства, основные модули отражены на рисунке 2.																																																																											
С точки зрения организации и технологии строительства большой интерес представляет приложение «Стройплощадка». В его функции входит менеджер проектов, с помощью него задаются необходимые здания, объемы работ, техника, материалы, указывается количество рабочих и число смен. Состав работ возможно формировать на основе ГЭСН и ЕНиР. Приложение производит расчёт потребности в материалах, кадрах, воде, электроэнергии и прочего. Так же рассчитываются и отображаются опасные зоны действия грузоподъёмных механизмов, расчет формируется на основе характеристик механизмов, и изменяется автоматически с изменением их параметров. Программа также отрисовывает временные здания, производит расчёт: календарных планов, графиков, ведомостей, графиков движения рабочей силы. Инструменты позволяют отрисовывать: временные дороги с учётом уширений, мест разворота и пешеходных переходов, сложные откосы, кроме того позволят рассчитывать																																																																											



7 [Электронный ресурс] — https://www.aveva.com/ru-ru/solutions/engineering/.																																																																											

количество дорожных плит. Большим преимуществом является база строительной техники, при выборе объекта, к примеру, крана, его сразу можно сразу разместить на плане8.																																																																											
Рисунок 2. Модули платформы nanoCAD (фото заимствовано: электронный ресурс https://www.nanocad.ru/products/platform/)																																																																											
Кроме представленных программ существуют вспомогательные ПО способные упростить и упорядочить процесс строительной деятельности. Далее авторы приводят описание данных ПО.																																																																											
ProjectWise — это ПО компании Bentley Systems, Inc. Предназначено для комплексного обмена рабочей информацией и сотрудничества. Это комплексная система управления проектными данными. ProjectWise позволяет реализовать полноценный документооборот, управление данными и электронный архив масштаба предприятия, при этом обеспечивая надежное хранение данных, контроль доступа к документам и аудит работы с документами (учет всех действий сотрудников при работе с документами), быстрый атрибутивный поиск документов, подготовку и реализацию выпуска проектной документации на бумажных и электронных носителях, формирование наименований и кодов документов в автоматическом режиме, а также создание отчетов в соответствии со стандартами предприятия и многое другое.9																																																																											
SAP (Systeme, Anwendungen und Produkte in der Datenverarbeitung, что в переводе с немецкого: системы, приложения и продукты в обработке данных) — это ПО, которое всё чаще внедряют в работу крупных предприятий. Основанная задача данного обеспечения — это предоставление широты возможностей для ведения гибкого бухгалтерского учета. Это комплекс решений для выстраивания общего информационного пространства на базе предприятия и эффективного планирования ресурсов и рабочих процессов. Данное ПО базируется на трёх звеньях: клиент, сервер, СУБД (система управления базами данных). Такая система позволяет объединять решения в двух основных сферах: бухучет и составление отчетности (фиксация производственных затрат, управление средствами и заказами), а также логистика (планирование, сбыт, оформление счетов, осуществление прямых продаж и регулярные отгрузки товаров, материально-техническое снабжение, с проведением закупок и																																																																											

8 [Электронный ресурс] — https://www.nanocad.ru/products/ppr/.																																																																											
9 [Электронный ресурс] — https://www.bentley.com/ru/products/brands-/projectwise.																																																																											

контролем запасов). Таким образом, SAP — это целый комплекс решений, обладающий следующими функциями:																																																																											
автоматизация труда бухгалтера;																																																																											
упрощение торговых и складских операций;																																																																											
облегчение учета кадров, финансов, акций и других активов;																																																																											
модернизация логистики;																																																																											
составление максимально наглядных зарплатных графиков.																																																																											
Primavera ещё одно программное обеспечение компании Oracle для управления проектами. Портфель Primavera включает в себя несколько продуктов. Данное ПО позволяет вести учёт и осуществлять управление массивами данных по проекту и финансовым возможностям организации.10 Пользование данным обеспечением способствует повышению показателей эффективности управления проектами за счёт автоматизации задач по планированию и контролю выполнения. Primavera позволяет осуществлять ряд следующих функций:																																																																											
оценка рисков, прогнозирование и анализ;																																																																											
расчёт влияния текущего процесса на степень загрузки ресурсов компании;																																																																											
создание среды для возможности взаимодействия всех лиц, которые участвуют в процессе.																																																																											
К наиболее распространённым продуктам системы Primavera относятся:																																																																											
Primavera Risk Analysis — позволяет анализировать риски, которые связаны с издержками и сроками реализации проекта на протяжении всего жизненного цикла. Позволяет определить будет ли успешен проект;																																																																											
Primavera Portfolio Management — инструменты для своевременной реализации проектов и программ, повышения дохода и поддержания конкурентоспособности;																																																																											
Oracle Primavera Prime — данный инструмент предназначен для долгосрочного планирования инвестиций и управления портфелем капитальных вложений. С его помощью возможно составлять бизнес планы долгосрочных капитальных проектов и управлять денежными потоками, добиваясь максимальной доходности;																																																																											
Primavera Unifier — лучшее в своем классе решение, оно позволяет управлять капитальными проектами и объектами любого размера на любом вертикальном рынке. С его помощью можно эффективно управлять затратами, документооборотом, графиками, ресурсами, денежными средствами.																																																																											

Вывод																																																																											
Внедрение BIM, с точки зрения организации и технологии строительства, позволяет упорядочить все производственные процессы, объединить информацию по проекту в единой системе с возможностью доступа к информации вне зависимости от месторасположения специалистов, упростить и автоматизировать процесс создания сопутствующей документации																																																																											

10 [Электронный ресурс] — https://gantbpm.ru/oracle-primavera-programma/.																																																																											

(ведомости, спецификации, табличные расчёты, графики, производственные планы), сократить сроки на поиск технических характеристик, благодаря подгруженным в ПО базам данных. Использование BIM — это возможность избежать ошибок на этапе проектирования, быстро реагировать на изменяющуюся ситуацию, оперативно вносить изменения, и как следствие исключить непредвиденные затраты.																																																																											
По результатам исследования, авторами выведены следующие преимущества от применения программ BIM-технологий:																																																																											
оптимизация проекта;																																																																											
снижение затрат;																																																																											
увеличение скорости проектирования;																																																																											
повышение качества принятых решений;																																																																											
взаимодействие в режиме реального времени;																																																																											
эффективный процесс строительства;																																																																											
лучшая организация строительного процесса;																																																																											
увеличение скорости строительств;																																																																											
исключение, уменьшение возможных ошибок;																																																																											
сокращение издержек.																																																																											

РАЗРАБОТКА СИСТЕМЫ РАСПОЗНАВАНИЯ РЕЧИ НА ОСНОВЕ СКРЫТЫХ МАРКОВСКИХ МОДЕЛЕЙ ОТДЕЛЬНЫХ СЛОВ																																																																											

ВВЕДЕНИЕ																																																																											
Распознавание голоса в компьютерных системах весьма распространено. Распо- знавание речи и, как следствие, голосовая идентификация нашли свое применение																																																																											

?c Савин А. Н., Тимофеева Н. Е., Гераськин А. С., Мавлютова Ю. А., 2017																																																																											

во всех сферах человеческой деятельности. Благодаря системам распознавания ре- чи обеспечивается безопасность от несанкционированного проникновения в защи- щенную зону. Такие системы содержат базу данных голосов сотрудников, имеющих доступ к защищаемой зоне, и предотвращают допуск людей, чьих голосов в ней нет [1, 2].																																																																											
В настоящее время широко разрабатываются и внедряются интеллектуальные системы управления различными объектами, которые позволяют осуществлять кон- троль за объектами в реальном времени. Управление такими системами можно осу- ществлять различными способами, одним из них является метод голосовых команд. При этом защиту объекта от несанкционированного доступа можно решить, исполь- зуя индивидуальные особенности голоса каждого человека.																																																																											
Уровень развития современной микропроцессорной техники (например, мобиль- ные устройства связи) позволяет использовать сложные вычислительные алгоритмы, основанные на цифровой потоковой обработке статистических данных в реальном времени. Поэтому разработка таких алгоритмов является весьма актуальной.																																																																											
Одним из путей решения вышеуказанных задач является использование для рас- познавания фрагментов речи математического аппарата скрытых марковских моде- лей (СММ) [3]. Данная работа посвящена разработке алгоритма и соответствующего программного модуля, осуществляющего формирование СММ для отдельных слов требуемого словаря команд системы управления объекта, на основе кодирования признаков звукового сигнала, использующего линейные предсказания.																																																																											
СТРУКТУРА СИСТЕМЫ РАСПОЗНАВАНИЯ РЕЧИ НА ОСНОВЕ СММ																																																																											
Рассмотрим дискретную систему, имеющую конечное множество из N состоя- ний — S = {s1, . . . , sN }, в каждом из которых она может принимать одно из M значений из набора наблюдаемых параметров V = {v1, . . . , vM } — алфавита. Состоя- ние системы qt в момент времени t, принимающее одно из N значений множества S, зависит только от её состояния qt?1 в момент времени t ?1, а значение наблюдаемого параметра ot в момент времени t зависит только от состояния qt, т. е. не зависит от времени.																																																																											
Вероятности переходов между состояниями системы задаются матрицей A. Ве- роятности выпадения каждого из M значений наблюдаемого параметра системы в каждом из N состояний системы задаются набором векторов B. Вероятность по- явления некоторого начального состояния системы задаётся вектором ?. При этом последовательность состояний, в которых пребывает система Q = q1, . . . , qT , внеш- нему наблюдателю не видна, а видит он только последовательность наблюдений O = o1, . . . , oT (здесь T — длина последовательности), т. е. система ведёт себя как																																																																											
«чёрный ящик». Модель такой системы получила название СММ и в компактной записи обозначается ? = (A, B, ?) [2].																																																																											
Для моделирования отдельного слова может быть выбрана лево- правая СММ (рис. 1) на основе предположения о том, что в каждый момент времени система переходит в																																																																											

новое состояние [4]. Соответственно																																																																											
неизвестное число скрытых состоя- ний N  в этом случае определяется																																																																											

Рис. 1. Структура лево-правой СММ																																																																											
Fig. 1. The structure of the left-right hidden Markov models (HMM)																																																																											

длиной и количеством сегментов, на которые слово разбивается при анализе его признаков. Процесс распознавания с использованием СММ предполагает два этапа (рис. 2).																																																																											

Рис. 2. Структура системы распознавания речи на основе использования СММ Fig. 2. Structure of the speech recognition system based on the use of HMM																																																																											
В режиме обучения элементы системы имеют следующее функциональное назна- чение:																																																																											
речевая база содержит записи слов, повторяющихся несколько раз для обеспе-																																																																											
чения адекватности получаемых СММ, которые будут доступны для распозна- вания;																																																																											
выделение последовательности одинаковых слов из файла речевой базы с по- мощью предварительной обработки (подавление шума, фильтрация и т. д.); анализ признаков и определение алфавита слова V , по которому формируется последовательность наблюдений O;																																																																											
обучение СММ — подбор параметров СММ, чтобы она как можно лучше опи- сывала реальную наблюдаемую последовательность O символов алфавита V анализируемого слова;																																																																											
сохранение СММ в базе — словаре.																																																																											
В режиме распознавания:																																																																											
выделение слова из входного звукового потока с помощью предварительной																																																																											
обработки;																																																																											
анализ признаков распознаваемого слова и формирование соответствующей по- следовательности наблюдений O;																																																																											
распознавание слова с использованием базы СММ и генерация кода распозна- ваемого слова.																																																																											
Таким образом, для реализации данной структуры необходимо всего 4 модуля:																																																																											
модуль выделения слов из звукового потока, модуль анализа признаков слова, модуль обучения СММ с базой моделей, модуль распознавания слов.																																																																											
АЛГОРИТМ ВЫДЕЛЕНИЯ ОТДЕЛЬНЫХ СЛОВ ИЗ ЕДИНОГО ЗВУКОВОГО ФАЙЛА																																																																											
В режиме обучения файл должен содержать несколько раз произнесенное одним диктором требуемое слово. Это необходимо для получения достоверной последо- вательности наблюдений O, соответствующей данному слову. На рис. 3 приведена блок-схема алгоритма предварительной обработки звукового файла, основанного на																																																																											



Рис. 3. Блок-схема алгоритма выделения отдельных повторяющихся слов из звукового файла																																																																											
Fig. 3. A flowchart of an algorithm for selecting separate repetitive words from a sound file																																																																											

вычислении огибающей и выделении на ее основе участков файла соответствующих повторяющимся словам.																																																																											
При этом на выходе формируется массив отрезков звукового файла одинаковой длины, соответствующих повторяемому слову, что позволяет использовать усреднен- ные входные данные при обучении СММ слова, делая её тем самым более адекват- ной.																																																																											
Алгоритм выделения отдельных слов из звукового потока встроен в модуль построения СММ слов, реализованный в среде графического программирования LabVIEW компании National Instruments [5]. На рис. 4 показан процесс выделе- ния команды из звукового файла, содержащего десять раз повторяющееся слово																																																																											
«Вперёд».																																																																											

Рис. 4. Выделение повторяющихся слов из звукового файла Fig. 4. Selecting duplicate words from a sound file																																																																											

На первом графике рис. 4 чёрным изображен исходный сигнал, серым — от- фильтрованный, с измененной частотой дискретизации и нормированный. Из запи- си убираются первые 0.1 с, соответствующие переходным процессам при включении микрофона и предварительной фильтрации.																																																																											
Выделение слова осуществляется путем анализа огибающей сигнала. Индексы, в которых огибающая начинает превышать заданный в начале уровень шума, соот- ветствуют началу команды. Индексы, в которых огибающая становится ниже уровня шума, — концу команды. Паузы внутри команды отсеиваются с помощью задан- ной заранее минимальной длительности команд. Таким же образом отсеиваются и лишние шумы.																																																																											
Элементы управления модуля (граничные частоты среза входного полосового фильтра, частота дискретизации сигнала для анализа признаков, параметры НЧ																																																																											

фильтра огибающей, уровень шума огибающей, минимальная длительность команды) позволяют подбирать требуемые параметры на этапе выделения команд для обеспе- чения построения адекватных СММ слов.																																																																											
АЛГОРИТМ АНАЛИЗА ПРИЗНАКОВ СЛОВ																																																																											
Для системы распознавания речи каждому слову необходимо сопоставить набор признаков. Этот процесс в [4] предложено осуществлять на основе анализа периодич- ности спектра фрагментов звукового сигнала (кепстральный анализ), предварительно обработанного с помощью алгоритмов линейного предсказания. Такой процесс назы- вается кодированием на основе линейного предсказания (КЛП). Алгоритм анализа признаков на основе КЛП, используемый при распознавании отдельных слов, приве- ден на рис. 5, 6.																																																																											

Рис. 5. Блок-схема процедуры алгоритма Левинсона вычисления КЛП-коэффициентов Fig. 5. Block diagram of the procedure of Levinson’s algorithm for calculating linear prediction																																																																											
coding (LPC) coefficients																																																																											




Рис. 6. Блок-схема алгоритма анализа признаков слова на основе КЛП Fig. 6. Flowchart of word analysis algorithm based on LPC																																																																											

Достоинством спектральной обработки звуковых сигналов является то, что при переходе из временной области в частотную представление информации становится																																																																											

более наглядным, компактным. Причем, чем более «простым» является сигнал во временной области, тем в большей степени происходит сжатие информации.																																																																											
Выявление периодичности в спектре (кепстральный анализ) позволяет более до- стоверно и точно охарактеризовать особенности произношения дикторов. При этом спектральная информация представляется еще более компактно. Каждый гармони- ческий ряд исходного спектра представляется в идеале всего одной составляющей в кепстре [4].																																																																											
Использование линейного предсказания, основанного на автокорреляционной фильтрации, должно улучшать отношение сигнал – шум исходного сигнала и убирать из него случайные артефакты. Вычисление коэффициентов линейного предсказания осуществляется с помощью алгоритма Левинсона (см. рис. 5) [6].																																																																											
В процессе анализа признаков слова каждый участок, выделенный ранее из файла и соответствующий повторяющемуся слову, разбивается на небольшие перекрываю- щиеся отрезки – сегменты и затем обрабатывается согласно алгоритму, приведенному на рис. 5, 6. Как видно (рис. 7, а), в результате предискажения сигнала происходит выравнивание спектра, что обеспечивает равноценность спектральных компонент при анализе признаков.																																																																											
Оконное взвешивание (рис. 7, б) уменьшает сигнал на концах сегментов и уве- личивает в центре, минимизируя нежелательные концевые эффекты.																																																																											
Линейное предсказание (рис. 7, в) на основе алгоритма Левинсона (см. рис. 5) убирает сглаживает выбросы и случайные артефакты в анализируемом сигнале.																																																																											

а / a	б / b																																																																										

в / с																																																																											
Рис. 7. Спектр исходного (–) и предискаженного (–) сигналов (а), исходный (–) и взвешенный (–) сегменты сигнала (б), исходный взвешенный (–) и предсказанный (–) сегменты сигнала (в)																																																																											
Fig. 7. The spectrum of the initial (–) and pre-faded (–) signals (a), the initial (–) and weighted (–) signal segments (b), the initial weighted (–) and predicted (–) signal segments (c)																																																																											

На выходе алгоритма формируется необходимая для распознавания слова матри- ца, строки которой образуются конкатенацией взвешенного кепстрального и соот- ветствующего взвешенного дельта-кепстрального векторов сегментов. Каждая такая строка является набором признаков сегмента — вектором наблюдений и соответству- ет одному символу из алфавита V СММ слова в последовательности наблюдений O. Количество строк определяет число состояний N , в которых находилась лево-правая СММ слова.																																																																											
Настройка параметров КЛП (число отсчётов в сегменте NA, число отсчётов в смещении сегментов MA, порядок КЛП-анализа p, число кепстральных коэффици- ентов U ) осуществляется посредством соответсвующих элементов (см. рис. 5).																																																																											
ПОСТРОЕНИЕ СММ СЛОВА																																																																											
В процессе построения СММ слова для повышения её адекватности необходимо использовать матрицу векторов наблюдений, полученную статистическим усреднени- ем матриц векторов наблюдений повторяющихся слов. При этом усредняются векто- ра наблюдений, соответствующие одним и тем же моментам времени повторяющихся слов.																																																																											
Оценка достоверности выборочных средних значений признаков сегментов (эле- ментов векторов наблюдений) повторяющихся слов проводится с помощью довери- тельных интервалов, вычисляемых при уровне статистической значимости ? = 0, 05. Сравнение степени разброса, т. е. оценка однородности выборочных дисперсий значений элементов векторов наблюдений, вычисленных по результатам анализа при- знаков повторяющихся слов, осуществляется с использованием критерия Кохрена [7] Обеспечение статистически значимых выборочных средних значений элементов векторов наблюдений и однородности их дисперсий, т. е. получение достоверной по- следовательности наблюдений для анализируемого слова, достигается подбором па-																																																																											
раметров обработки входного сигнала и параметров КЛП (см. п. 2, 3).																																																																											
Оценку расстояния между символами алфавита V слова — усреднёнными век- торами наблюдений — было предложено делать с помощью евклидовой нормы. При этом для обеспечения равнозначности признаков при вычислении расстояния про- водилась их нормировка. В качестве нормирующего для каждого элемента вектора наблюдений использовался диапазон его изменения в матрице, расширенный с учё- том доверительного интервала.																																																																											
Формирование алфавита СММ слова осуществляется удалением повторяющихся строк из нормированной матрицы средних значений наблюдений, если такие имеют- ся. При этом сравнивается расстояние между текущей строкой и остальными. Если оно меньше некоторой заданной величины, то строка с большим индексом удаля- ется, так как считаем, что эти строки соответствуют одному и тому же символу. Соответственно число строк получившейся прореженной матрицы определяет коли- чество символов M алфавита V , индексы строк являются значениями алфавита, а сами строки — признаками символов.																																																																											
Последовательность наблюдений слова определяется сравнением строк матрицы алфавита V (прореженной) с исходной нормированной матрицей средних значений наблюдений. Если расстояние между строками меньше некоторой заданной величи- ны, использованной при построении алфавита, то индекс строки матрицы алфави- та V записывается в последовательность наблюдений O. Длина последовательности наблюдений T равна числу строк исходной матрицы, а число состояний N равно T в случае лево-правой СММ слова.																																																																											

На рис. 8 приведены результаты экспериментов по определению числа состоя- ний N для слов «Вперёд» и «Стоп». На вход модуля построения СММ для каждого из этих слов подавалось тридцать звуковых файлов, содержащих по пятнадцать повторений, произнесённых одним диктором. Во всех случаях число состояний N совпадало с количеством символов M алфавита V , что соответствует предположе- нию о лево-правой структуре СММ (см. рис. 1) для этих слов из-за отсутствия в них повторяющихся звуков.																																																																											

а / a	б / b																																																																										
Рис. 8. Количество полученных в экспериментах состояний для слов «Вперёд» (а) и «Стоп» (б)																																																																											
Fig. 8. The number of states obtained in the experiments for the words „Forward“ (a) and „Stop“ (b)																																																																											
Как видно из рис. 8, закон распределения отклонений числа состояний N от средних значений близок к нормальному. Соответственно для слова «Вперёд» сред- нее значение N составило 18 2.6% при 95% -й доверительной вероятности, а для слова «Стоп» — 6  5.7%.																																																																											
Следовательно, данные, полученные с помощью предложенного алгоритма пред- варительной обработки звукового файла в совокупности с КЛП-анализом, являются достаточно надёжными и их можно использовать для построения СММ слова.																																																																											
Процесс построения начинается генерированием по известному числу состояний N и количеству символов M алфавита V исходной СММ ? = (A, B, ?), имеющей случайные параметры. При этом матрица вероятностей переходов между состояни- ями A, матрица вероятностей каждого наблюдения в каждом состоянии B, а также вектор вероятностей начального состояния ? должны удовлетворять стохастическим ограничениям [3].																																																																											
Далее необходимо так подобрать параметры исходной СММ, чтобы вероят- ность соответствия последовательности наблюдений, сгенерированной этой СММ ?? = (A?, B?, ??) и полученной ранее последовательности наблюдений O = o1, . . . , oT слова, была максимально возможной. То есть исходную СММ ? = (A, B, ?), име- ющую вероятность p(O|?) генерирования заданной последовательности наблюде- ния O = o1, . . . , oT слова, надо обучить по этой последовательности наблюде- ния O = o1, . . . , oT , чтобы вероятность p(O ??) генерирования последовательности																																																																											
O = o1, . . . , oT , обученной СММ ?? = (A?, B?, ??), была максимально возможной.																																																																											
Одним из вариантов обучения СММ ? = (A, B, ?) по заданной последовательно-																																																																											
сти наблюдений O = o1, . . . , oT является применение алгоритма Баума – Велша [3].																																																																											

Алгоритм позволяет уточнять параметры исходной СММ ? = (A, B, ?) таким образом, чтобы у уточнённой СММ ?? = (A?, B?, ??) вероятность p(O ??) увеличи- валась. Итеративное применении алгоритма до схождения в одной точке позволяет максимизировать p(O|??), т. е. настроить СММ ?? = (A?, B?, ??) на заданную после- довательность наблюдений O = o1, . . . , oT слова. На рис. 9 приведены зависимости изменений вероятности p(O ??) и её приращения ?p(O ??) на каждом итерационном шаге при настройке методом Баума – Велша СММ на слово «Стоп». Эти зависимости имеют характерный для метода Баума – Велша вид.																																																																											
В начале обучения значения вероятности p(O ??) имеют, как правило, величи- ны меньшие или сравнимые с используемой для оценки сходимости положительной величиной ? (см. рис. 9, а), но разность значений p(O|??) на каждом шаге увеличи- вается, т. е. приращение ?p(O|??) > 0 растет (см. рис. 9, б).																																																																											
При завершении обучения значения вероятности p(O ??), как правило, сходятся к некоторой величине, при этом приращение ?p(O ??) > 0, но оно начинает умень- шаться и стремиться к 0.																																																																											


а / a	б / b																																																																										
Рис. 9. Изменения вероятности СММ p(O|??): а — и её приращения ?p(O|??); б — при обучении методом Баума – Велша																																																																											
Fig. 9. Changes in the probability of the HMM p(O|??): a — and its increment ?p(O|??);																																																																											
b — when learning by the Baum – Welsh method																																																																											

Следовательно, для корректной оценки сходимости итерационного процесса обу- чения необходимо контролировать не только величину приращения ?p(O ??), но и знак его изменения, т. е. для завершения обучения должно выполняться условие																																																																											
?p(O|??) ? ? при уменьшении ?p(O|??).																																																																											
В разработанном модуле построения СММ для оценки сходимости процесса обу- чения использовано значение ? = 1.1 ? 10?19, соответствующее машинной точности. Недостатком алгоритма Баума – Велша при обучении СММ является поиск ло- кального максимума p(O ??), а не глобального. Поэтому для достижения хорошего результата требуется, как правило, несколько запусков при различных начальных																																																																											
условиях.																																																																											
Таким образом, используя последовательности наблюдений и алфавит моделиру- емых слов, получаемые на первых этапах обработки, с помощью алгоритма Баума – Велша можно строить соответствующие адекватные СММ для систем распознавания речи.																																																																											

ЗАКЛЮЧЕНИЕ																																																																											
Разработанный программный модуль позволяет эффективно подготавливать необ- ходимые исходные данные на основе кодирования признаков звукового сигнала, ис- пользующего линейные предсказания, строить СММ отдельных слов и проводить их обучение с помощью алгоритма Баума – Велша. Построенные СММ слов предполага- ется использовать в интеллектуальных системах управления различными объектами.																																																																											

РАСПОЗНАВАНИЕ СПАМ-СООБЩЕНИЙ С ИСПОЛЬЗОВАНИЕМ МЕТОДОВ МАШИННОГО ОБУЧЕНИЯ																																																																											
Введение																																																																											
По данным Лаборатории Касперского [1] каждый год спам занимает примерно половину объема всего мирового почтового трафика. Сначала спам рассылался напрямую на единичные адреса пользователей, и его было легко блокировать. Со временем появились сложные системы мас- совой рассылки и высокоскоростные интернет-каналы, которые позволи- ли быстро и дешево осуществлять рассылку спама.																																																																											
В связи с этим были разработаны различные методы распознавания спам-сообщений. Обнаружение спама в электронной почте может быть выполнено как с использованием методов машинного обучения, так и с помощью других средств [2]. В представляемой работе используется подход, основанный на использовании алгоритмов машинного обучения для классификации текстов.																																																																											
Постановка задачи и используемые алгоритмы																																																																											
Пусть L={L1,…,Lm} — множество писем электронной почты с мет- ками (обычное письмо или спам), а U={U1,…,Un} — неразмеченное множество писем, где Ui соответствует i-му письму. Предполагается, что элементы L и U отличны друг от друга. Письмо представляется в виде вектора признаков, размерность которого равна размеру словаря V, xi=(xi1,xi2,…,xi|v|), где xij=1, если i-е письмо содержит j-е слово и xij=0 – иначе. На этих данных строится фильтр F: U?{1,0}, который классифи- цирует письмо как спам или реальное письмо.																																																																											

Для классификации текстов в работе использовались следующие ал- горитмы:																																																																											
-упрощенный алгоритм Байеса [4] — вероятностный классификатор, основанный на теории Байеса с допущением о независимости признаков;																																																																											
метод опорных векторов (англ. support vector machine, SVM) [5], который строит в n-мерном пространстве признаков такую гиперплос- кость, чтобы она разделяла объекты выборки наиболее точно;																																																																											
метод k ближайших соседей (англ. k-nearest neighbors, kNN) [6], суть которого заключается в том, что находятся k соседей, которые наиболее близко расположены к рассматриваемому объекту с неизвест- ной меткой. Далее новый объект относят тому классу, который является наиболее распространённым среди k соседей;																																																																											
многослойный персептрон (англ. multilayer perceptron, MLP) [7] — один из вариантов нейронной сети прямого распространения. Под про- цессом обучения нейронной сети понимается поиск таких значений ве- сов и порогов сети, которые минимизирую ошибку. На основе собран- ных исторических данных веса и пороговые значения корректируются автоматически. В процессе корректировки происходит расчет ошибки путем вычисления выходных сигналов и сравнения их с целевыми.																																																																											
Обзор данных и предобработка текста																																																																											
В работе использовался набор данных Spam Email, опубликованный на платформе Kaggle [3]. В нем содержится 86,6 % реальных сообщений (4825 строк) и 13,4 % спама (747 строк), эти два вида сообщений пере- мешаны между собой. Для работы алгоритмов классификации требуется произвести нормализацию   и   векторизацию   исходных   сообщений, для чего использовался язык программирования Python и программная библиотека NLTK.																																																																											
Нормализация текста включает в себя следующие действия:																																																																											
приведение всех документов к нижнему регистру;																																																																											
удаление слов, не содержащих смысловой информации;																																																																											
удаление знаков пунктуации;																																																																											
разбиение документов на токены; в работе для сравнения ис- пользуются униграммы (токен состоит из одного слова) и триграммы (токен состоит из трех слов);																																																																											
лемматизация текста, иными словами, приведение слова к начальной форме, учитывая морфологию слова.																																																																											
Алгоритмы машинного обучения не имеют функционала для работы с текстом на естественных языках. По этой причине текст должен быть преобразован в числовые векторы. Распространенным методом извлече- ния признаков из текста является формирование множества, элементами которого являются отдельные слова, встречающиеся в тексте.																																																																											
В качестве входных данных модели векторизации принимают токе- низированные текстовые данные, над ними могут производиться не все этапы нормализации. В случае использования «мешка» слов [9] вместо																																																																											

токена обозначена его частота использования в отдельном документе. В случае TF-IDF — подсчитывается важность каждого токена в докумен- тах [9]. В работе используются следующие вариации векторизации:																																																																											
модель «мешка слов», документы разбиты на униграммы (первый вариант);																																																																											
модель «мешка слов», документы разбиты на триграммы (второй вариант);																																																																											
модель TF-IDF, документы разбиты на униграммы (третий вариант);																																																																											
модель TF-IDF, документы разбиты на триграммы (четвер- тый вариант).																																																																											
Полученные результаты																																																																											
Обучение проводилось на 70 % данных для всех алгоритмов клас- сификации. Распределение происходило следующим образом: трениро- вочному набору соответствует первые 70 % документов, остальные 30 % документов относятся к тестовому набору.																																																																											
Подбор параметров алгоритмов осуществлялся методом перебора.																																																																											
В итоге были использованы следующие параметры:																																																																											
в качестве классификатора для реализации алгоритма Байеса взят																																																																											
«MultinomialNB»;																																																																											
для алгоритма SVM использовалась линейная функция ядра;																																																																											
в алгоритме KNN для обучения было выбрано 3 «соседа»;																																																																											
в MLP было 2 скрытых слоя по 2 нейрона, функция активации скрытого слоя — «logistic», функция оптимизации весов «adam», посто- янная скорость обучения.																																																																											
В таблицах 1 и 2 представлены лучшие результаты для каждого ме- тода, полученные с использованием Python с библиотекой Scikit-learn и WEKA соответственно. Для оценки моделей использовались следующие показатели (используются общепринятые англоязычные названия, т. к. перевод на русский может внести неоднозначность) [9]: accuracy, recall, precision, F1-score, specificity, time.																																																																											
Таблица 1																																																																											
Результаты тестирования моделей, созданных на Python																																																																											
Метод и харак-																																																																											
теристика																																																																											
Accuracy																																																																											
Recall																																																																											
Precision																																																																											
F1_score																																																																											
Specificity																																																																											
Time																																																																											
Метод Байеса,																																																																											
«мешок» слов, униграммы																																																																											
0.967																																																																											
0.973																																																																											
0.988																																																																											
0.98																																																																											
0.93																																																																											
3.1s																																																																											
SVM, «мешок» слов, униграммы																																																																											
0.972																																																																											
0.992																																																																											
0.976																																																																											
0.984																																																																											
0.847																																																																											
17.2s																																																																											
KNN, TF-IDF,																																																																											
униграммы																																																																											
0.949																																																																											
0.983																																																																											
0.959																																																																											
0.971																																																																											
0.738																																																																											
5s																																																																											
MLP, «мешок» слов, униграммы																																																																											
0.971																																																																											
0.987																																																																											
0.978																																																																											
0.982																																																																											
0.856																																																																											
67.29s																																																																											

Таблица 2																																																																											
Результаты тестирования моделей, Weka																																																																											
Метод и харак- теристика																																																																											
Accuracy																																																																											
Recall																																																																											
Precision																																																																											
F1_score																																																																											
Specificity																																																																											
Time																																																																											
Метод Байеса,																																																																											
«мешок» слов, униграммы																																																																											
0.964																																																																											
0.97																																																																											
0.985																																																																											
0.979																																																																											
0.985																																																																											
0.65s																																																																											
SVM, «мешок»																																																																											
слов, униграммы																																																																											
0.982																																																																											
0.996																																																																											
0.984																																																																											
0.99																																																																											
0.984																																																																											
1.3s																																																																											
KNN, «мешок» слов, униграммы																																																																											
0.951																																																																											
0.987																																																																											
0.947																																																																											
0.967																																																																											
0.947																																																																											
83.27s																																																																											
MLP, «мешок» слов,																																																																											
униграммы																																																																											
0.963																																																																											
0.994																																																																											
0.981																																																																											
0.987																																																																											
0.985																																																																											
23.46s																																																																											

В таблицах 1 и 2 в столбце “time” указано суммарное время обуче- ния и тестирования модели. Из полученных результатов следует, что мо- дели, обученные на данных с унарной токенизацией, производят класси- фикацию точнее, а обучение производится быстрее. Скорость работы связана с тем, что в наборах с унарной токенизацией меньше элементов, поэтому параметр времени не учитывался при сравнении моделей, по- строенных на данных с разным содержанием токенов.																																																																											
Тестирование на новых данных и анализ результатов																																																																											
Дополнительно было произведено тестирование моделей классифи- кации с добавлением новых данных, не входящих в первоначальный набор текстовых сообщений. Данный набор взят с платформы Kaggle [8]. Из набора были выбраны первые 2000 строк, документы были нормали- зованы и преобразованы в векторы признаков аналогично основному набору. После добавления новых документов общее их количество со- ставило 7555. После нормализации и удаления документов, полностью состоящих из стоп-слов, количество документов составило 6833.																																																																											
Тестирование проводилось для тех сочетаний алгоритмов, парамет- ров и методов предобработки, которые показали лучшие результаты на предыдущей проверке для языка Python. В таблице 3 отображены значе- ния метрик для каждого случая.																																																																											
Тестирование на новых данных показало эффективность рассмот- ренных моделей классификации. Метод опорных векторов показал наилучшие результаты. При этом скорость работы у него не такая высо- кая, как у методов Байеса или KNN.																																																																											

Таблица 3																																																																											
Результаты классификации на новых данных																																																																											
Метод и харак- теристика																																																																											
Accuracy																																																																											
Recall																																																																											
Precision																																																																											
F1_score																																																																											
Specificity																																																																											
Time																																																																											
Метод Байеса,																																																																											
«мешок» слов, униграммы																																																																											
0.985																																																																											
0.989																																																																											
0.993																																																																											
0.99																																																																											
0.958																																																																											
4.4s																																																																											
SVM, «мешок» слов, униграммы																																																																											
0.996																																																																											
0.999																																																																											
0.996																																																																											
0.998																																																																											
0.974																																																																											
28.8s																																																																											
KNN, TF-IDF,																																																																											
униграммы																																																																											
0.994																																																																											
0.998																																																																											
0.995																																																																											
0.996																																																																											
0.968																																																																											
6.4s																																																																											
MLP, «мешок» слов,																																																																											
униграммы																																																																											
0.989																																																																											
0.993																																																																											
0.992																																																																											
0.993																																																																											
0.951																																																																											
84.69s																																																																											

Таким образом, если требуется высокая скорость обучения, стоит выбирать один из следующих методов: полиномиальный метод Байеса или KNN. Если обучение моделей производится редко или есть потреб- ность в очень высокой точности классификации, стоит использовать ме- тод опорных векторов.																																																																											
В исследовании Н. Сутта, З. Лю, Х. Чжан [10] было проведено срав- нение методов SVM, KNN, Байеса и других методов для выявления наиболее точных классификаторов. В указанной публикации для анализа тоже использовались два набора данных: первый состоял из одного набора сообщений, второй — из двух разных. Данные были представле- ны в виде векторов признаков по схеме TF-IDF, использовались уни- граммы, биграммы и триграммы. Наибольшая точность была достигнута при обучении модели SVM c линейной функцией ядра на втором виде набора данных, с токенизацией при n = 1 и n = 2. Точность (англ. accura- cy) модели SVM ? 0.99. KNN показал точность меньше, при этом макси- мальная точность достигается при использовании биграмм. Классифика- тор, построенный по модели Байеса, показал худший результат по всем проверенным n-граммам практически среди всех моделей, проверенных в работе.																																																																											
Результаты анализа, произведенного в исследовании [10], близки к тем, что были получены в представляемой работе: высокие точности до- стигаются при обучении на данных, состоящих из разных наборов сооб- щений, в обоих случаях SVM показывает более высокую точность по сравнению с другими алгоритмами. В работе Н. Сутта, З. Лю, Х. Чжан модели, обученные на n-граммах (при n > 1), показывали высокие ре- зультаты, что может быть объяснено большим объемом использованного набора данных (более 100 тысяч сообщений).																																																																											

Заключение																																																																											
В работе были построены классификаторы для определения спама в текстовых сообщениях. В качестве предварительной обработки текстов были проведены нормализация данных и представление полученных до- кументов в векторы признаков по схемам «мешка» слов и TF-IDF.																																																																											
В работе была выявлена неэффективность обучения на данных с триграммной токенизацией. Это связано с относительно небольшим набором данных для обучения. Словосочетания, состоящие из несколь- ких слов, встречаются реже в предложениях, чем отдельно взятые слова.																																																																											
Ко второй проблеме можно отнести скорость обучения и тестирова- ния моделей. При увеличении объема данных время, затрачиваемое на обучение модели классификации, будет увеличиваться. В таком случае требуется использовать программные реализации на языках с высокой скоростью работы. В работе были рассмотрены реализации на двух язы- ках: Python и Java (Weka). Скорость выполнения классификации на Java выше, чем на Python. Следовательно, если требуется высокая скорость обучения и классификации, лучше использовать Java.																																																																											
Высокой точности удалось достичь при обучении модели SVM на документах, разбитых на униграммы и с векторизацией «мешка слов» в Weka и Python: значения меры F1 равны 0.984 и 0.99 соответственно, что является неплохим результатом. После добавления новых докумен- тов для тестирования, значения точностей и других метрик моделей воз- росли. Мера F1 модели SVM стала равна 0.998.																																																																											

Программная инструментальная система создания адаптивных пользовательских интерфейсов																																																																											
Введение																																																																											

Пользовательский интерфейс — средство, обеспе- чивающее взаимопонимание человека и компьютера. Потому очень важно сделать такую связь дружествен- ной и интуитивно-понятной.																																																																											
Проблемам разработки пользовательских интерфей- сов посвящено значительное количество отечественных и зарубежных научных трудов, которые используются в различных предметных областях [1–5]. При их проек- тировании современными авторами предлагаются раз- личные подходы. Часто при разработке интерфейсной части программного обеспечения применяются методы искусственного интеллекта: построение адаптивных интерфейсов на основе генетических алгоритмов [6], экспертные системы, теории нечетких множеств [7–9] и др. Вместе с тем, с целью облегчения работы поль- зователя с программным средством, задействованы методы системного анализа, синтеза, абстрагирования и построения онтологической модели [10]. Часть уче- ных при решении проблемы построения адаптивных пользовательских интерфейсов предлагают использо- вание принципа разделения декларативного описания математических моделей и их процедурную интерпре- тацию [11]. Другими авторами применяются известные модели качества программного обеспечения [12], также используются метафорические или идиоматические подходы при создании или усовершенствовании интер- фейсной части программного средства [13].																																																																											
Также осуществляется проектирование прототипов интерфейса с недетерминированным конечным авто- матом [14], и разрабатываются специализированные системы [15, 16]. Имеется опыт непосредственного привлечения потенциальных пользователей к созданию интерфейсной части программного средства [17].																																																																											
В системах автоматизации проектирования (САПР) пользовательский интерфейс — важная часть системы. Интерфейс входит в состав лингвистического обеспе- чения и представлен диалоговыми языками. Однако																																																																											

функциональность систем не стоит на месте и посто- янно расширяет свои возможности, это в свою очередь отражается на интерфейсе пользователя. Он становится более сложным, непонятным для новичков и не эр- гономичным, а это сказывается на производительно- сти труда инженера-конструктора. Проблема создания адаптивных интерфейсов для прикладных программ в САПР также актуальна [2, 18].																																																																											
В отличие от существующих аналогов, предлага- емая программная инструментальная система (ПИС) позволяет подбирать не шаблон целиком, а каждый ком- понент пользовательского интерфейса (размер шрифта, кнопок, расстояние между кнопками, цветовая гамма, звуковое сопровождение, наличие подсказок и команд- ной строки). Таким образом, шаблон интерфейса уни- версален для каждого пользователя.																																																																											

Постановка задачи																																																																											
В настоящей работе реализовано решение проблемы адаптации интерфейсов к особенностям пользователя на примере инженера-конструктора и его автоматизиро- ванного рабочего места. Рабочее место включает в себя прикладные программы для проектирования машино- строительных изделий. Для решения данной задачи вы- полнена разработка специальной программной системы для создания адаптивных прототипов интерфейсов на основе характеристик пользователя.																																																																											
Разработанная ПИС имеет возможность создания прототипа интерфейса, адаптированного под характе- ристики пользователя. ПИС реализована в три этапа: оценка характеристик пользователя; реализация под- бора компонентов интерфейса; применение подобран- ного набора компонентов к интерфейсу прикладной программы.																																																																											
Для наглядности представления движения информа- ционных потоков при проектировании ПИС построена потоковая модель Data Flow Diagram (DFD) с помощью Case-средства автоматизированного проектирования																																																																											




Рис. 1. Движение информационных потоков при работе программной инструментальной системы																																																																											
Fig. 1. The movement of information flows during the operation of the software development system																																																																											


BP-win. На рис. 1 представлена схема DFD с точки зрения программной системы.																																																																											
Интерфейсная часть программного обеспечения сформирована на основе оценки характеристик поль- зователя. Для каждого пользователя подобраны ком- поненты интерфейса: размер шрифта, размер кнопок, расстояние между кнопками, цветовая гамма, наличие командной строки, наличие звукового сопровожде- ния и наличие подсказок. После оценки характеристик пользователя результаты сохраняются в базе данных программной системы.																																																																											
Для проведения тестирования пользователей в ПИС разработчиком вносятся контрольно-измерительные материалы, направленные на диагностику сформиро- ванности каждой его характеристики.																																																																											
При подборе компонентов интерфейса под опреде- ленного пользователя использован метод экспертного оценивания. Для этого на начальном этапе работы экс- перт формирует базу правил на основе продукционной модели знаний.																																																																											
В ходе работы ПИС выполнено сравнение резуль- татов оценки характеристик пользователя с правилами нечеткой экспертной системы, которая является ядром программного средства. В итоге формируется набор компонентов интерфейса и генерируется прототип ин- терфейса, который соответствует данному пользова- телю.																																																																											
Декомпозиция контекстной диаграммы представ- лена на рис. 2.																																																																											
Процесс разработки программного средства вклю- чает в себя восемь этапов (рис. 2). На начальном этапе формируется и сохраняется типовая информация. Затем формируется база оценочных материалов, по которым																																																																											

будет производиться оценка характеристик пользова- теля.																																																																											
Эксперт формирует структуру экспертной систе- мы, создавая лингвистические переменные и термы. Входные переменные — оцениваемые характеристики пользователя, а выходные — компоненты интерфейса, на основе которых будет формироваться прототип при- кладной программы.																																																																											
Следующий этап — оценка характеристик пользо- вателя, при котором требуется выбрать характеристику и оценить ее с помощью разработанных оценочных ма- териалов. Основной этап — подбор компонентов интер- фейса, где загружаются результаты оценки пользователя и база правил нечеткой экспертной системы. В ходе рабо- ты экспертной системы вычисляется подходящий набор компонентов интерфейса для конкретного пользователя. На заключительном этапе происходит непосред- ственное создание прототипа адаптивного интерфейса прикладной программы, который предоставляется для																																																																											
работы в системе САПР.																																																																											

Математическая модель экспертной системы																																																																											
Инструментом для определения компонентов интер- фейса в ПИС служит нечеткая ЭС. Основные входные данные — сведения о пользователе. Данные харак- теризуются различной степенью неопределенности, неоднозначности, внутренней противоречивостью, неполнотой, а также представляют количественные и качественные оценки параметров [19].																																																																											
Так как данные являются трудно формализованны- ми и специфическими, то при выборе метода искус- ственного интеллекта использована интеллектуальная система, базирующаяся на нечеткой логике и нечетких множествах.																																																																											




Рис. 2. Декомпозиция контекстной диаграммы.																																																																											
БД — база данных; ЭВМ — электронно-вычислительная машина; ЭС — экспертная система																																																																											
Fig. 2. Context diagram decomposition																																																																											
БД — database; ЭВМ — electronic computer; ЭС — expert system																																																																											


Из анализа нечеткого понятия «Системный опыт» было сформировано базовое терм-множество, со- стоящее из трех нечетких переменных: «Низкий»,																																																																											
«Средний» и «Высокий», и установлена область рас- суждений в виде X = [0; 100] (баллов). Далее была по- строена функция принадлежности для каждого лингви- стического терма из базового терм-множества T.																																																																											
Существует большое количество стандартных форм кривых для задания функций принадлежности. Самыми распространенными считаются: треугольная, трапецеи- дальная и гауссова функции принадлежности.																																																																											
Совокупность функций принадлежности для каж- дого терма из базового терм-множества T обычно изо- бражается на одном графике. Пример лингвистической переменной «Системный опыт» представлен на рис. 3 в виде трапециевидной функции принадлежности.																																																																											
Наиболее распространенный способ логического вывода в нечетких системах — механизм Мамдани. Механизм использует минимаксную композицию не-																																																																											

Рис. 3. Графики функций принадлежности значений лингвистической переменной «Системный опыт»																																																																											
Fig. 3. Graphs of the values belonging functions of the linguistic variable “System experience”																																																																											

четких множеств и включает в себя последовательность действий [19].																																																																											
Фаззификация или приведение к нечеткости. Определяются степени истинности, т. е. значения функций принадлежности для левых частей каждого правила (предпосылок или антецедентов). Для базы правил с m правилами обозначим степени истинности как Aik(xk), i = 1..m, k = 1..n.																																																																											
Нечеткий вывод. Определяются уровни «отсечения»																																																																											
для левой части каждого из правил: ?i = mini(Aik(xk)), и находятся «усеченные» функции принадлежности: Bi*(y) = mini(?i, Bi(y)).																																																																											
Композиция или объединение полученных усе-																																																																											
ченных функций. Используется максимальная ком- позиция нечетких множеств: ?(y) = maxi(Bi*(y)), где ?(y) — функция принадлежности итогового нечеткого множества.																																																																											
Дефаззификация или приведение к четкости. Суще- ствует несколько методов дефаззификации. Например, центроидный метод или метод среднего центра [19].																																																																											
С учетом введенных понятий построена нечеткая модель, основанная на бинарном нечетком отноше- нии S, которая строится на двух базисных множествах X и Y.																																																																											
X = {x1{z1}, x2{z2}, x3{z3}, …, x7{z7}} описывает множество компонент интерфейса, где z — множество, характеризующее каждое x.																																																																											
Y = {y1{k1}, y2{k2}, y3{k3}, …, y7{k7}} — множество характеристик пользователя, где k — множество, харак- теризующее каждое y.																																																																											
Элементы универсумов имеют следующий содер- жательный смысл:																																																																											



x1 — цветовая гамма (z1 — черно-белый, z2 — не- сколько цветов, z3 — любые цвета), x2 — размер шрифта (z1 — крупный, z2 — средний, z3 — мел- кий), x3 — размер кнопок (z1 — крупные, z2 — сред- ние, z3 — мелкие), x4 — расстояние между кноп- ками (z1 — большое, z2 — среднее, z3 — малое), x5 — звуковое сопровождение (z1 — наличие, z2 — отсутствие), x6 — наличие подсказок (z1 — наличие, z2 — отсутствие), x7 — наличие командной строки (z1 — наличие, z2 — отсутствие).																																																																											
y1 — системный опыт (k1 — высокий, k2 — сред- ний, k3 — низкий), y2 — компьютерная грамотность (k1 — высокая, k2 — средняя, k3 — низкая), y3 — опыт работы с подобными программами (k1 — высо- кий, k2 — средний, k3 — низкий), y4 — машинопись (k1 — высокая, k2 — средняя, k3 — низкая), y5 — дальтонизм (k1 — есть, k2 — нет), y6 — моторика рук (k1 — высокая, k2 — средняя, k3 — низкая), y7 — память (k1 — высокая, k2 — средняя, k3 — низкая).																																																																											
Входными данными являются характеристики пользователей, которые задаются лингвистическими переменными. В табл. 1 представлены все входные лингвистические переменные. Для каждой характе- ристики определено множество, которое измеряется в баллах. Для образования новых термов использо- ваны процедуры: синтактическая, представляющая собой логическую связку AND (И), и семантическая — min(?A(x). ?B(x)).																																																																											
На примере  лингвистической  переменной 																																																																											
«Системный опыт» описано присвоение значений тер-																																																																											

мов и построение графиков функций принадлежности нечеткого множества (рис. 3). Для остальных входных лингвистических переменных произведена аналогичная процедура.																																																																											
Далее добавлены лингвистические переменные вы- ходных данных. Они представлены в табл. 2. Для ка- ждой характеристики определено множество из разных единиц измерения.																																																																											
Для работы механизма нечеткого вывода сформи- рованы продукционные правила. Фрагмент базы пра- вил представлен в табл. 3. Приведено формирования правил для лингвистической переменной «Цветовая гамма», для остальных переменных: «Размер кнопок»,																																																																											
«Расстояние между кнопками», «Размер шрифта»,																																																																											
«Звуковое сопровождение», «Подсказки», «Командная строка» терм-множества сформированы аналогично.																																																																											
Экспертная система позволила получить решение на основе описанных правил базы знаний.																																																																											

Проектирование программной инструментальной системы																																																																											
Для визуализации работы ПИС использована диа- грамма вариантов использования — визуальная модель, отражающая спецификацию программного средства с точки зрения ее функциональности (рис. 4).																																																																											
Работать с программной системой могут эксперт и пользователь, которые входят в систему с разными правами доступа. Для пользователя подбирается ин- терфейс.																																																																											


Таблица 1. Входные лингвистические переменные																																																																											
Table 1. Input linguistic variables																																																																											

Название																																																																											
Терм-множество (T)																																																																											
Множество-область (X), баллы																																																																											
Системный опыт																																																																											
Высокий																																																																											
65–100																																																																											

Средний																																																																											
35–70																																																																											

Низкий																																																																											
0–45																																																																											
Компьютерная грамотность																																																																											
Высокий																																																																											
70–100																																																																											

Средний																																																																											
35–75																																																																											

Низкий																																																																											
0–40																																																																											
Опыт работы с подобными программами																																																																											
Есть																																																																											
50–100																																																																											

Частично																																																																											
25–60																																																																											

Нет																																																																											
0–30																																																																											
Машинопись																																																																											
Быстро																																																																											
75–150																																																																											

Нормально																																																																											
30–80																																																																											

Медленно																																																																											
0–40																																																																											
Дальтонизм																																																																											
Есть																																																																											
0–1																																																																											

Нет																																																																											
0,9–2																																																																											
Моторика рук																																																																											
Высокая																																																																											
65–100																																																																											

Средняя																																																																											
30–70																																																																											

Низкая																																																																											
0–35																																																																											
Память																																																																											
Отличная																																																																											
75–100																																																																											

Умеренная																																																																											
40–80																																																																											

Плохая																																																																											
0–45																																																																											


Таблица 2. Выходные лингвистические переменные																																																																											
Table 2. Output linguistic variables																																																																											

Название, единица измерения																																																																											
Терм-множество (T)																																																																											
Множество-область (X)																																																																											
Размер шрифта, пиксел																																																																											
Крупный																																																																											
14–18																																																																											

Средний																																																																											
11–15																																																																											

Мелкий																																																																											
8–12																																																																											
Размер кнопок, коэффициент																																																																											
Крупный																																																																											
2–4																																																																											

Средний																																																																											
1,5–2,5																																																																											

Мелкий																																																																											
0–2																																																																											
Расстояние между кнопками, коэффициент																																																																											
Большое																																																																											
2–4																																																																											

Среднее																																																																											
1,5–2,5																																																																											

Малое																																																																											
0–2																																																																											
Цветовая гамма, коэффициент																																																																											
Черно-белый																																																																											
0–1,5																																																																											

Несколько цветов																																																																											
1,4–2,5																																																																											

Любые цвета																																																																											
2,4–4																																																																											
Звуковое сопровождение, коэффициент																																																																											
Наличие																																																																											
0,85–2																																																																											

Отсутствие																																																																											
0–0,9																																																																											
Наличие подсказок, коэффициент																																																																											
Наличие																																																																											
0,85–2																																																																											

Отсутствие																																																																											
0–0,9																																																																											
Наличие командной строки, коэффициент																																																																											
Наличие																																																																											
0,85–2																																																																											

Отсутствие																																																																											
0–0,9																																																																											

Таблица 3. Нечеткие продукционные правила																																																																											
Table 3. Fuzzy production rules																																																																											
Входная лингвистическая переменная Цветовая гамма																																																																											




Примечание: Д — дальтонизм; СО — системный опыт																																																																											


Эксперт занимается настройкой экспертной систе- мы. В настройку входят: формирование структуры; для каждой входной переменной подбор оценочного мате- риала; создание базы правил и тестирование созданной экспертной системы с возможностью подробной трас- сировки расчетов.																																																																											
Пользователь после авторизации может оценить свои характеристики с помощью оценочного материала, назначенного экспертом, и приступить к формированию личного адаптивного интерфейса прикладной програм- мы, который предоставляется для работы в САПР.																																																																											
В проектной части ПИС можно выделить три этапа. На первом — производится оценка характеристик поль- зователя. На втором — независимо от выбора условия формирования прототипа (создать новый или заменить старый прототип), происходит подбор компонентов интерфейса. На третьем — на основе сформированного набора компонентов создается прототип адаптивного интерфейса прикладной программы. Каждый из этих																																																																											

этапов непосредственно взаимодействует с базой дан- ных программной системы.																																																																											

Практическая реализация программной инструментальной системы																																																																											
Перед тем как пользователь будет подбирать компо- ненты интерфейса, эксперт создает структуру эксперт- ной системы (рис. 5). Выбрав пункт меню «Эксперт», задаются лингвистические переменные и термы [20].																																																																											
Далее эксперт может приступить к формированию базы правил (рис. 6).																																																																											
После формирования структуры и создания базы правил проводится тестирование экспертной системы (рис. 7). Эксперт, выбрав пункт меню «Подбор компо- нентов», может установить входные значения. Нажав на кнопку «Рассчитать», ПИС выведет результат подбора компонентов интерфейса в качественных и количе- ственных значениях. Подробные расчеты, выполняе-																																																																											


























Рис. 4. Диаграмма вариантов использования																																																																											
Fig. 4. Diagram of use cases																																																																											

мые экспертной системой, можно просмотреть, нажав на соответствующую кнопку и сохранить в файл (по желанию).																																																																											
При входе в ПИС пользователю требуется оце- нить свои характеристики с помощью различных видов диагностики. Например, для оценки качества																																																																											
«Компьютерная грамотность» пользователю предлага- ется пройти тестирование.																																																																											
После оценки характеристик пользователь может перейти к подбору компонентов интерфейса и созда- нию адаптированного прототипа, выбрав пункт меню																																																																											
«Подбор компонентов интерфейса». Для этого тре- буется выбрать режим создания прототипа и увидеть созданный адаптированный прототип интерфейса при- кладной программы (рис. 8).																																																																											
В приведеном примере (пользователь неопытный) получен прототип, который состоит из следующих ком- понентов: размер шрифта — средний; размер кнопок — средний; расстояние между кнопками — большое; цветовая гамма — несколько цветов; наличие подска- зок — есть; наличие звукового сопровождения — есть, наличие командной строки — нет. Проведенное юза- билити тестирование подтвердило адаптированность интерфейсной части программного обеспечения для определенной аудитории пользователей.																																																																											




Рис. 5. Структура экспертной системы																																																																											
Fig. 5. Structure of the expert system																																																																											

Рис. 6. База правил экспертной системы																																																																											
Fig. 6. The base of the rules of the expert system																																																																											









Рис. 7. Тестирование экспертной системы																																																																											
Fig. 7. Expert system testing																																																																											

Обсуждение результатов																																																																											
Разработана ПИС, которая учитывает характе- ристики и возможности пользователя. Для подбора компонентов интерфейса под определенного пользо- вателя использован метод экспертного оценивания. Сформирована база правил на основе продукционной модели знаний. Выполнена оценка результатов полу- ченных характеристик пользователя и правил эксперт- ной системы. В результате создан набор компонентов интерфейса и сгенерирован прототип интерфейса, кото- рый соответствует конкретному пользователю.																																																																											
Так как характеристики пользователя имеют раз- личные степени неопределенности, неоднозначности,																																																																											

Рис. 8. Фрагмент адаптивного интерфейса																																																																											
Fig. 8. Fragment of the adaptive interface																																																																											

внутреннюю противоречивость и др., и являются труд- но формализованными и специфическими, то целе- сообразно использовать интеллектуальные системы, базирующиеся на нечеткой логике и нечетких множе- ствах. Наиболее приемлемым в данном случае является метод Мамдани.																																																																											

Заключение																																																																											
Внедрение разработанной экспертной системы по- зволит просто подобрать набор элементов интерфейса под каждого инженера-конструктора и сформировать адаптивный прототип интерфейса прикладной про- граммы. Данный результат улучшит автоматизиро- ванное рабочее место специалиста, а взаимодействие человека и компьютера станет более комфортным и эргономичным.																																																																											

Проектирование быстрой программной реализации специализированной нейросетевой архитектуры																																																																											
с разреженными связями																																																																											
Постоянно растущий объем данных требует создания алгоритмов для их обработки. По этой причине в ряде областей задачи машин- ного обучения и интеллектуального анализа данных становятся все более распространен- ными и актуальными. Важное место в них за- нимает извлечение признаков, поскольку ис- пользование слабо релевантных признаков резко снижает эффективность любых алгорит- мов. И если еще 10–20 лет назад был распро- странен ручной подбор признаков [1], то сей- час наиболее перспективными являются нейросетевые алгоритмы, осуществляющие ав- томатический подбор признаков в процессе ре- шения задачи. Это позволяет сократить ручной объем работы для исследователей, а в ряде слу- чаев и повысить качество работы [2]. Однако глубокие нейронные сети сложны с вычисли-																																																																											

тельной точки зрения, что затрудняет их при- менение в высоконагруженных системах с жесткими требованиями по времени ответа.																																																																											
Кроме того, глубокие нейронные сети плохо подходят для решения задач онлайнового (ди- намического) обучения, поскольку они ста- тичны и не могут обучаться в режиме реаль- ного времени. По этой причине в подобных за- дачах легкие модели (например, логистическая регрессия) зачастую выигрывают у тяжеловес- ных, поскольку позволяют обновлять пара- метры в режиме реального времени. Однако столь простые модели требуют ручного под- бора признаков, что отнимает много времени у исследователей, и порой необходимо привле- чение к работе экспертов заданной предметной области. В работе [3] авторами была предло- жена нейронная сеть, которая осуществляет ав-																																																																											

томатизированный подбор признаков, поддер- живая при этом обновление параметров в ре- жиме реального времени. Данная статья посвя- щена вопросам программной реализации этой архитектуры.																																																																											

Описание архитектуры																																																																											

Рассматриваемая модель представляет со- бой нейронную сеть с одним скрытым слоем. Отличие от традиционного персептрона заклю- чается в разреженности архитектуры: нейроны скрытого слоя связаны только с частью нейро- нов входного слоя. Выходной слой нейронной сети состоит из одного нейрона с сигмоидаль- ной функцией активации, которая выдает веро- ятность для заданного набора входных пара- метров.																																																																											
На вход модель принимает заданное коли- чество признаков. Сами признаки категориаль- ные, и для их подачи на вход применяется уни- тарное кодирование [4]. Каждому признаку от- водится одинаковый диапазон значений во входном векторе. Схема архитектуры пред- ставлена на рисунке 1.																																																																											
Специфичность данной архитектуры заклю- чается в том, что она имеет разреженные связи с определенной структурой. И это дает ей ряд преимуществ.																																																																											

Особенности разреженной нейросетевой архитектуры																																																																											

Исследования работы головного мозга по- казывают, что биологические нейроны коди- руют информацию в разреженном и распреде- ленном видах. Согласно оценкам, процент ак- тивных нейронов в один и тот же момент времени колеблется от 1 до 4. Это соответ- ствует балансу между разнообразием возмож- ных представлений и небольшим потребле- нием энергии. Традиционные сети прямого распространения без использования L1 регуля- ризации не обладают таким свойством. Напри- мер, при использовании сигмоидальной функ- ции активации нейроны после начальной ини- циализации имеют устойчивое состояние на середине между режимами насыщения. Это выглядит неестественно с биологической точки зрения и вредит оптимизации на основе градиентного спуска.																																																																											
Разреженные представления имеют не- сколько преимуществ [5]. В контексте рассмат- риваемой задачи стоит выделить эффективное представление данных переменного размера. Различные входы могут содержать разное ко- личество информации, и потому их более удобно представлять в виде структур с пере- менным размером. Стоит отметить, что слиш-																																																																											




ком высокая степень разреженности может приводить к деградации модели, поскольку она сокращает ее емкость. Однако на сегодняшний день известно, что глубокие нейронные сети часто содержат избыточное число параметров (что приводит к усложнению вычислений и ро- сту потребления ресурсов), поэтому их можно значительно упростить без существенной по- тери качества [6]. Помимо вычислительной из- быточности, большое количество параметров зачастую ухудшают обобщающую способ- ность моделей, делая их более подверженными переобучению.																																																																											
Следовательно, можно удалить много пара- метров нейронной сети без существенного ухудшения (а порой и с улучшением) произво- дительности. Разумеется, такие изменения при- водят к возникновению разреженных архитек- тур. Помимо пониженных требований к памяти (нужно хранить меньшее число параметров), сокращение числа параметров позволяет упро- стить итоговые вычисления и уменьшить время предсказания, что играет роль в высоко- нагруженных системах или в системах, работа- ющих со слабым аппаратным обеспечением.																																																																											
Есть различные стратегии сокращения па- раметров нейронных сетей. Стратегии усече- ния весов были предложены еще Лекуном в ра- боте [7], и они же остаются наиболее популяр- ными до настоящего времени. Относительно недавно в работе [8] был предложен алгоритм сокращения количества связей, основанный на похожести нейронов. Стратегия прореживания нейронной сети может быть также встроена в обучение модели. Еще один подход заключа- ется в обучении маленькой модели, которая по своему поведению будет имитировать боль- шую модель [9]. Кроме того, в некоторых рабо- тах предлагается обучать глубокие модели, но с меньшим числом параметров. Оставшиеся параметры при этом должны предсказываться на основании уже обученных.																																																																											
В предложенной нейросети разреженность уже заложена в саму архитектуру с учетом ре- шаемой задачи (предсказание поведения поль- зователей в Интернете). Это осложняет ее реа- лизацию на базе таких нейросетевых фрейм- ворков, как Pytorch, Tensorflow, Theano и т.д. Разреженность связей можно реализовать при помощи обнуления некоторых весовых коэф- фициентов или путем использования модулей Sparse. Однако полученная реализация получа- ется в несколько раз медленнее, чем простая логистическая регрессия, что осложняет пере- ход на нее в высоконагруженных системах. По																																																																											

этой причине для применения данной архитек- туры в задаче предсказания поведения пользо- вателей в Интернете было принято решение разработать самостоятельную программную реализацию, оптимизированную непосред- ственно под данную архитектуру. Далее рассматривается концепция программной реа- лизации и описываются разработанные алго- ритмы, позволяющие обеспечить быстродей- ствие предложенной нейронной сети.																																																																											

Диаграмма классов системы																																																																											

Диаграмма основных классов реализован- ной библиотеки представлена на рисунке 2. Класс feature_t используется для описания под- держиваемых признаков в модели, level_t – для описания уровня модели, который может со- стоять из нескольких признаков (в таком слу- чае применяется класс hashing trick [10]), а levels_holder_t описывает конфигурацию мо- дели целиком (модель состоит из набора уров- ней). Помимо конфигурации, у модели есть набор настроек (к примеру, количество элемен- тов, отводимых на представление каждого признака), который описывается классом lr_settings_t. В результате класс самой нейросе- тевой модели наследует от класса настроек и класс конфигурации модели. Сама нейросете- вая модель описывается двумя классами: класс neural_net_t позволяет только использовать мо- дель (загрузив ее предварительно из дампа), а класс neural_net_fitter_t – обучать. Такое разде- ление дает возможность программным компо- нентам, которые только используют обучен- ную модель, не хранить множество дополни- тельных параметров, связанных с настройками обучения. Из рисунка 2 видно, что класс lr_settings_t оказывается включенным дважды. Для разрешения этой ситуации используется виртуальное наследование. Также с классом neural_net_fitter_t жестко связан объект опти- мизатора (композиция), то есть он создается в конструкторе класса neural_net_fitter_t. Разде- ление оптимизаторов и самих моделей дает по- тенциальную возможность использовать одни и те же оптимизаторы для обучения разных мо- делей.																																																																											

Структуры данных и алгоритмы создания нейросети																																																																											

Для реализации выбран язык программиро- вания C++, так как он включает в себя множе- ство современных инструментов программиро-																																																																											



Logger																																																																											
-m_filename: string																																																																											
-m_log_level: int																																																																											
+Logger()																																																																											
+log(log_level: int, msg: string)																																																																											
+setLogLevel(log_level: int)																																																																											


lr_settings_t																																																																											

levels_holder_t																																																																											
-m_levels: vector<level_t>																																																																											
-m_is_valid: bool																																																																											
#logger: Logger*																																																																											

+reset(levels: vector<vector<feature_t>>)																																																																											
+contains(feature: EFeature): bool																																																																											
#unique_key(event: vector<vector<int>>): vector<int>																																																																											
-reset_meta_level()																																																																											

level_t																																																																											
-m_features: vector<feature_t>																																																																											
-m_typed: bool																																																																											
+level_t()																																																																											
+reset(features: feature_t, typed: bool): bool																																																																											
+features(): vector<features>																																																																											
+for_each_key(e: vector<EFeature>, level_num: int)																																																																											
+feature_from_event(e: vector<EFeature>): feature_t																																																																											

#m_I: int																																																																											
#m_level_I: vector<int>																																																																											
+lr_settings_t(num_levels: int)																																																																											
+N(): int																																																																											


feature_t																																																																											
-m_feature: EFeature																																																																											
+feature_t(f: EFeature)																																																																											
+feature(): EFeature																																																																											
+create_by_name(name: string): feature_t																																																																											





lr_fitter_settings_t																																																																											
#m_a: double #m_lambda: double #m_epoch_count: int #...																																																																											
+lr_fitter_settings_t(num_levels: int)																																																																											
+update(rhs: lr_fitter_settings_t)																																																																											

neural_net_t																																																																											
#m_num_hidden: int																																																																											
#m_hidden_weights: vector<vector<float>> #m_output_weights: vector<float> #m_structure: vector<vector<int>>																																																																											

+predict(e: vector<int>): float																																																																											
+load()																																																																											
+size()																																																																											




«enumeration»																																																																											
gd_algorithm_t																																																																											
Vanilla Adam RmsProp																																																																											
...																																																																											


«enumeration»																																																																											
EFeature																																																																											
eAge eGeo eBanner eContents																																																																											
eUserTopics																																																																											
...																																																																											




neural_net_fitter_t																																																																											
-m_processed_files: int																																																																											
-m_gd_optimizer: gd_optimizer_t																																																																											
+m_logloss: float																																																																											
+neural_net_fitter_t(f: vector<vector<feature_t>>, name: string)																																																																											



-N: int																																																																											
-b1: float																																																																											
-u: vector<float>																																																																											
-v: vector<float>																																																																											

gd_optimizer_t																																																																											

+createNNStructure()																																																																											
+update(e: vector<int>, y: int): float																																																																											
+fit(): bool																																																																											
+ready_to_fit(): bool																																																																											

+gd_optimizer_t(N: int, gd_algo: gd_algorithm_t, b1: float)																																																																											
+step(g: double, lr: double, i: int): double																																																																											
+addEventsCount()																																																																											
-countCorrection(i: int)																																																																											


Рис. 2. Диаграмма классов реализованной библиотеки Fig. 2. The implemented library class diagram																																																																											

вания, таких как лямбда-функции, move-семан- тика, умные указатели и т.д., сохраняя при этом хорошую производительность [11].																																																																											
Архитектура нейросети задается статически и хранится в двумерном массиве. Входные дан- ные поступают в виде набора из L признаков, каждый из которых имеет N различных значе- ний. Таким образом, входное пространство значений разбито на L диапазонов, каждый из которых   соответствует    одному    признаку. С учетом архитектуры сети количество нейро-																																																																											

по номеру набора признаков li быстро получать затронутые номера нейронов скрытого слоя, была создана матрица соединений нейронной сети. В этой матрице каждому номеру признака на входном слое соответствует список затрону- тых номеров нейронов скрытого слоя. Для нейронной сети, где L = 5 (5 различных катего- риальных признаков), данная матрица выгля- дит так, как показано в таблице 1.																																																																											
Таблица 1																																																																											
Пример матрицы соединений																																																																											

нов скрытого слоя равняется																																																																											

L ? ( L ? 1) ? L ?																																																																											
2																																																																											

для пяти признаков																																																																											


Table 1																																																																											

? L ? (L ? 1) . Поскольку сеть не является полно-																																																																											
2																																																																											
связной, хранить полную матрицу весов (с ну- левыми весами в позициях, где нет связей) расточительно, поэтому в разработанной реа- лизации хранятся только ненулевые коэффици- енты. Благодаря фиксированной архитектуре можно заранее рассчитать размер такой мат- рицы с ненулевыми коэффициентами. Чтобы																																																																											

The example of a matrix of coupling for 5 features																																																																											

Для формирования такой матрицы сначала заполняется вспомогательный двумерный мас- сив соединений для нейронов скрытого слоя (для каждого нейрона скрытого слоя содер- жится массив с номерами связанных с ним нейронов входного слоя). Количество строк равняется количеству нейронов скрытого слоя, а количество столбцов – числу связей каждого нейрона (для данной архитектуры оно равно 1 или 2). Для нейронной сети из пяти признаков такая вспомогательная структура имеет вид, представленный в таблице 2.																																																																											
Таблица 2																																																																											
Вспомогательная матрица																																																																											
для нейронной сети с пятью признаками																																																																											
Table 2																																																																											
A utility matrix for a neural network with 5 features																																																																											

Такая структура данных заполняется на ос- нове модульной арифметики. Приведем алго- ритм ее заполнения (рис. 3).																																																																											
Сложность такого алгоритма составляет O(n2), где n – количество уровней в модели. Учитывая, что n не превышает нескольких де- сятков, это не является проблемой. Кроме того, создание архитектуры нейросети делается только один раз за всю работу сети, поэтому доля затраченного на это времени крайне не- значительна. Чтобы из такой вспомогательной матрицы получить основную матрицу связей, достаточно однократного прохода по циклу. Алгоритм 2 описывает формирование матрицы соединений нейронной сети (рис. 4).																																																																											
Сложность данного алгоритма составляет O(n3), где n – количество уровней модели (по- скольку количество скрытых нейронов сети пропорционально квадрату числа уровней в модели). Однако и это не является проблемой по тем же причинам, что и в алгоритме 1. В итоге для каждого значения входного при- знака можно получить номера связанных с ним нейронов скрытого слоя. Поскольку каждый нейрон входного слоя связан ровно с L нейро- нами скрытого слоя, веса нейронов скрытого слоя можно хранить в матрице размерности N?L?L. В случае полносвязной сети аналогич- ного размера для хранения весов скрытого слоя потребовалась бы матрица размера																																																																											
L ? (L ? 1)																																																																											

N ? L ?																																																																											

, то есть в L/2 раз больше. При																																																																											
2																																																																											

L = 20 признакам получается экономия памяти в 10 раз.																																																																											
Порядок создания нейронной сети с учетом вспомогательных объектов изображен на диа-																																																																											



Алгоритм 2. Заполнение основной матрицы соединений нейронной сети																																																																											
Исходные параметры: Вспомогательная матрица соединений connections, Количество нейронов скрытого слоя num_hidden																																																																											
Результат: основная матрица связей																																																																											
i = 0 до тех пор, пока i < num_hidden выполнять																																																																											
j = 0 до тех пор, пока j < числа нейронов входного слоя, связанных с i-м нейроном скрытого слоя (размер connections[i]) выполнять																																																																											
получить номер нейрона входного слоя level = connections[i][j];																																																																											
к строке level (соответствует связям набора входных признаков с номером																																																																											
level) матрицы связей добавить номер нейрона скрытого слоя i;																																																																											
перейти к следующему нейрону входного слоя, с которым связан i-й нейрон скрытого слоя;																																																																											
конец																																																																											
перейти к следующему нейрону скрытого слоя;																																																																											
конец																																																																											
Рис. 4. Алгоритм 2																																																																											
Fig. 4. Algorithm 2																																																																											
грамме последовательности (рис. 5), на кото- рой видно, что при создании объекта нейросети сначала инициализируется объект настроек, за- тем создается конфигурация уровней, после чего инициализируются параметры обучения модели. Затем по вышеописанному алгоритму формируется нейронная сеть с заданной струк- турой, после чего создается объект оптимиза- тора. При создании объекта оптимизатора ис-																																																																											
пользуются параметры обучения модели.																																																																											
Последовательность обработки примера нейросетью																																																																											

Обработка примеров нейронной сетью про- изводится в следующей последовательности:																																																																											
расчет номеров затронутых индексов (в силу разреженности данных для одного при- мера затрагиваются лишь несколько индексов);																																																																											
получение номера уровня (это делается по номеру индекса, так как на каждый признак																																																																											



отводится одинаковое количество значений);																																																																											
получение номеров нейронов скрытого слоя, с которыми связан данный уровень (с ис- пользованием матрицы, изображенной в таб- лице 1);																																																																											
расчет взвешенной суммы для нейрона выходного слоя;																																																																											
переиспользование рассчитанного набо- ра индексов для предсказания и обновления.																																																																											
Процесс суммирования нейронов скрытого слоя изображен на рисунке 6. Основная осо- бенность суммирования заключается в том, что оно производится не по нейронам скрытого слоя, а по весам. Сначала рассчитывается вклад во все нейроны скрытого слоя от первого при- знака, затем – от второго и т.д. Такой способ суммирования позволяет получить ускорение за счет локального расположения в памяти сла- гаемых (весов).																																																																											
При предсказании сначала производится расчет затронутых индексов и значений нейро- нов скрытого слоя. Эти значения используются при получении предсказания. Во время обуче- ния сначала предсказывается вероятность для данного примера, затем рассчитывается функ- ция потерь, на основании которой вычисля- ются градиенты и обновляются коэффициенты. При этом переиспользуются индексы и значе- ния коэффициентов на скрытом слое, получен-																																																																											

ные при обучении модели. Последнее позво- ляет значительно сократить время, затрачивае- мое моделью на обработку одного примера.																																																																											
Основные элементы процедуры обучения изображены на диаграмме активности (рис. 7). Отметим, что некоторые этапы расчета гради- ентов выполняются параллельно. После обуче- ния модели на каждом примере производится расчет метрики кросс-энтропия. В данной мет- рике суммарная ошибка на выборке складыва- ется из ошибок по отдельным примерам, по- этому ее удобно использовать в задачах онлай- нового обучения для контроля качества работы модели. Если по какой-либо причине не уда- лось получить предсказание для данного при- мера, то и обучение также не производится.																																																																											

Сравнение скорости обработки примеров с другими реализациями																																																																											

После разработки вышеописанной архитек- туры были проведены измерения для сравне- ния времени ее работы с реализациями, сделан- ными на базе уже   имеющихся   библиотек. В сравнениях участвовали четыре реализации.																																																																											
Собственная реализация логистической регрессии с хешированием составных призна- ков [10]. Использовались 15 комбинаций при- знаков.																																																																											












Получить предсказание модели																																																																											





Успешно																																																																											

Взять список выставленных индексов из predict																																																																											



Рассчитать значение функции потерь																																																																											
Выставить нулевое значение вероятности																																																																											
UNREGISTERED																																																																											
Обновить веса скрытого слоя																																																																											





Обновить пороги скрытого слоя	Обновить веса выходного слоя																																																																										





Рассчитать значение метрик																																																																											





Вернуть значение вероятности																																																																											




Рис. 7. Диаграмма активности процедуры обучения модели по одному примеру Fig. 7. The activity diagram of model training using one sample																																																																											
Вышеописанная реализация нейронной сети с использованием простых признаков на входе.																																																																											
Реализация предложенной архитектуры нейронной сети на базе библиотеки Lasagne с использованием разреженных матриц [12].																																																																											
Реализация предложенной архитектуры на базе Pytorch [13]. На момент проведения экс- периментов была доступна версия pytorch 0.4.1 (дата релиза – июль 2018 года) без поддержки автоматического расчета градиентов для разре- женных матриц. Поэтому реализация данной архитектуры была произведена на базе плот-																																																																											
ных матриц.																																																																											
В эксперименте производились измерения для разной размерности, отводимой на каждый признак. Количество коэффициентов, отводи- мых на признак, изменялось от 28 до 216. Всего использовалось 15 признаков. Таким образом, общий размер входного вектора изменялся от 4 тысяч до 1 млн признаков. Замерялось время получения предсказаний для 100 тысяч приме- ров и обновления модели на 100 тысяч при- меров (1 итерация). Замеры производились на сервере с процессором Intel Xeon CPU E5-2667																																																																											
3.30 GHz и оперативной памятью Micron 36KSF2G72PZ-1 1333 MHz (0.8ns) объемом																																																																											
256 Гб.																																																																											


predict 1x2, 100K примеров	update 1x2, 100K примеров																																																																										


100																																																																											
90																																																																											
80																																																																											
70																																																																											
60																																																																											
50																																																																											
40																																																																											
30																																																																											
20																																																																											
10																																																																											
0																																																																											


















8	9	10	11	12	13	14	15	16																																																																			
Размерность признака, 2^x																																																																											
Реализация лог. регрессии x 10 Разработанная реализация x 10 Реализация на базе Lasagne																																																																											
Реализация на базе Pytorch																																																																											

100																																																																											
90																																																																											
80																																																																											
70																																																																											
60																																																																											
50																																																																											
40																																																																											
30																																																																											
20																																																																											
10																																																																											
0																																																																											
















8	9	10	11	12	13	14	15	16																																																																			
Размерность признака, 2^x																																																																											
Реализация лог. регрессии x 10 Разработанная реализация x 10 Реализация на базе Lasagne																																																																											
Реализация на базе Pytorch																																																																											



Рис. 8. Сравнение времени предсказания для 100 тысяч примеров																																																																											
Fig. 8. Prediction time comparison for 100 thousands samples																																																																											

Рис. 9. Сравнение времени обучения моделей для 100 тысяч примеров																																																																											
Fig. 9. Training time comparison for 100 thousands samples																																																																											



Результаты измерений для предложенной архитектуры приведены на рисунках 8 и 9.																																																																											
На графиках видно, что разработанная реа- лизация нейронной сети работает практически так же, как логистическая регрессия, и на поря- док быстрее реализации на базе Lasagne. Реа- лизация на базе Pytorch при увеличении раз- мера вектора начинает работать значительно медленнее, поскольку она основана на плот- ных, а не на разреженных матрицах. Разрабо- танная архитектура легко расширяема до под- держки не только пар, но и троек, четверок признаков и т.д. Однако в нейронной сети, в ко- торой каждый нейрон скрытого слоя связан с тремя нейронами на входном слое, время пред- сказания и обучения значительно возрастает.																																																																											

Заключение																																																																											

В целом можно сделать вывод, что благо- даря описанным оптимизациям разработанная реализация позволяет получить ускорение при- мерно в 10 раз по сравнению с реализацией, написанной на уже готовых нейросетевых фреймворках. Таким образом, использование разработанной реализации целесообразно на практике, особенно в высоконагруженных си- стемах, работающих в режиме реального вре- мени, и только в том случае, когда каждый нейрон скрытого слоя связан с небольшим ко- личеством нейронов на входе. В противном случае предпочтительно использовать тради- ционные плотные матрицы.																																																																											

Проблема разработки VR тренажеров сборки/разборки, и вариант																																																																											
высокопроизводительного решения на базе технологии VR Concept																																																																											
I. ВВЕДЕНИЕ																																																																											


Технологии виртуальной реальности (VR) с каждым днем все больше входят в нашу жизнь и уже встречаются в таких сферах, как развлечение, строительство, проектирование, обучение, медицина, промышленность. Виртуальная реальность обеспечивает полное погружение человека в искусственную цифровую среду через его ощущения: зрение, слух, осязание [1]. В цифровом мире человек взаимодействует с окружающими его объектами.																																																																											
Внедрение VR технологий в промышленности обеспечит технологическое лидерство России. Одной из ключевых задач, в которых может быть эффективно использована виртуальная реальность, является обучение персонала работе со сложным оборудованием. Одним из направлений обучения является обучение операциям сборки/разборки. Новые технологии в обучении рабочего персонала будут способствовать сокращению затрат на обслуживание оборудования, сокращению числа ошибок и простоев, увеличению эффективности работы с инженерными 3D-моделями.																																																																											
VR позволяет повысить мотивацию и заинтересованность по сравнению со стандартными подходами обучения (изучение бумажных материалов, видеолекций) при сохранении качества обучения [2,3]. Системы обучения в виртуальной реальности позволяют собирать информацию об ошибках в процессе выполнения работы и визуализировать полученные данные в виде графиков и диаграмм [4]. Описаны примеры использования виртуальной реальности для визуализации правил охраны труда и промышленной безопасности, ремонта оборудования [5]. Виртуальные тренировки работников по сборке/разборке, ремонту и обслуживанию сложного оборудования, отработка навыков в сфере охраны труда и промышленной безопасности могут на 30% сократить производственные затраты и уменьшить количество ошибок работников и																																																																											

простоев оборудования, позволяют более подробно изучить работу оборудования, улучшит навыки работы персонала и тем самым повысить качество ремонта.																																																																											
Помимо процесса обучения сборочным операциям виртуальные тренажеры сборки/разборки востребованы и на этапе проектирования сборочных процессов [6]. Виртуальные тренажеры позволяют на более раннем этапе разработки проекта найти неэргономичные решения, построить рациональную последовательность сборки, оптимальное размещение и перемещение деталей по цеху, учесть необходимое технологическое оснащение, спланировать распределение нагрузки по рабочим местам.																																																																											
В тренажёрах в виртуальной реальности для обучения можно выделить два вида коммуникации: человек- машина и человек-человек. Взаимодействие человека с машиной проявляется в следовании заранее написанному и запрограммированному сценарию, действия человека в виртуальной реальности обрабатываются и анализируются программным обеспечением. В свою очередь человек получает обратную связь от программы, в которой реализован сценарий обучения, в виде допуска к следующим этапам, появлению новых элементов. Коммуникация человек-человек проявляется в возможности подключения нескольких пользователей к одному проекту. Они могут как быть активными участниками виртуального мира, взаимодействовать с объектами в нем, так и быть сторонними наблюдателями, которые только видят и анализируют действия пользователя при обучении, могут скорректировать процесс обучения, дать подсказки.																																																																											
Для  реализации  сценария  обучения  виртуальные																																																																											
тренажеры включают в себя наличие разного рода подсказок: текстовых, звуковых, графических. С помощью подсказок возможно предоставить необходимую справочную информацию для продолжения	сборки/разборки	оборудования. Существуют различные варианты запроса подсказок: вызов с помощью меню, представленного в сцене, использование заранее определенных объектов сцены, распознавание голоса.																																																																									
Кроме работы в режиме обучения, при котором пользователю доступна любая справочная информация и время выполнения заданий не ограничено, VR тренажеры предоставляют экзаменационный режим работы, в котором нет доступа к справочным материалам, ограничено время выполнения операций, происходит логирование всех действий пользователя для дальнейшей оценки правильности выполнения работы, подсчета ошибок. В виртуальной реальности возможно организовать гибкий процесс обучения. В одних сценариях использования тренажера возможно бесконечное повторение одних и тех же действий неограниченно по времени выполнения. Такой сценарий обучения востребован при первичном знакомстве с системой. Кардинально отличающийся сценарий необходим для оценки качество полученных навыков в																																																																											

процессе обучения. При таком сценарии возможно ограничивать число попыток и затрачиваемое время.																																																																											

ТРАДИЦИОННЫЕ И ИННОВАЦИОННЫЕ МЕТОДЫ ОБУЧЕНИЯ ПЕРСОНАЛА НА ПРЕДПРИЯТИИ.																																																																											
Обучение персонала на предприятии, то есть обучение взрослых людей2, существенно отличается от обучения детей, так как взрослые зачастую перегружены информационно. Обучение должно быть максимально ёмким, и включать методы, которые воздействуют на разные каналы восприятия, и дают объемность понимания и полноту получаемого знания. Иллюстративные, пояснительные, практические, творческие и проблемно-постановочные методы в обучении всегда были эффективными. Сегодня заметна тенденция уменьшения теории и увеличения практики, появления яркого визуального контента и когнитивных заданий. Специалисты отдела кадров стараются сделать методы обучения для взрослых более инновационными, все чаще переводят методические материалы и учебники в электронный формат, в офисах внедряются новые технологии для работы и обучения. Процесс обучения становится более оптимизированным и движется в сторону цифровизации3.																																																																											
В обзоре основных технологий и принципов обучения																																																																											
«Современные виды и методы обучения персонала» приводится следующая классификация современных подходов к обучению [7]:																																																																											
на рабочем месте:																																																																											
лекции																																																																											
семинары																																																																											
тренинги																																																																											
наставничество (менторинг), бизнес-коучинг																																																																											
временные ротации (обмен рабочей деятельностью между сотрудниками)																																																																											
вне рабочего места:																																																																											
дистанционное обучение																																																																											
деловые игры (решение бизнес-кейсов)																																																																											
баскет-метод (имитации ситуаций)																																																																											
ворк-шопы																																																																											
смешанное обучение.																																																																											
Все профессии условно можно поделить на две большие категории – профессии умственного труда (интеллектуальная деятельность) и физического (работа моторики и физической силы). Работникам интеллектуальных профессий не требуется «полевая практика», так как результаты их работы – это передача знаний, обзор и формирование документации, то есть их																																																																											

2 Изучением обучения взрослых занимается наука андрагогика. Андрагогика - (гр. ???? an?r - взрослый человек, мужчина; ????? ?gein - вести) - раздел теории обучения, раскрывающий специфические закономерности освоения знаний и умений взрослым субъектом учебной деятельности, а также особенности руководства этой деятельностью со стороны профессионального педагога.																																																																											
3 Цифровизация (также диджитализация) – это процесс трансформации																																																																											
бизнеса при помощи внедрения современных технологий и инструментов, которые помогают продвигать компанию, улучшать позиции на рынке, взаимодействовать с клиентами и автоматизировать многие процессы.																																																																											

деятельность связана с обработкой имеющейся информации и получением новой; с минимальным или отсутствующим риском для жизни. Сегодня такие сотрудники успешно развивают свои компетенции и повышают квалификацию при помощи отлично зарекомендовавших себя для этих задач лекций, семинаров, личного менторинга. Оттачивание полученных навыков возможно в ходе деловой игры, например, при решении бизнес-кейсов.																																																																											
Другое дело обстоит с категорией работников физического труда. Их деятельность непосредственно связана с постоянной практической работой, так как отработка движений и действий работника до автоматизма иногда спасает чью-то жизнь. Вероятность возникновения аварийных ситуаций на производствах и предприятиях, где превалирует физический труд, чрезвычайно высок. Например, по оценке экспертов из Федеральной службы по экологическому, технологическому и атомному надзору, в 2011 году крупные аварии и сопровождающие их пожары и взрывы на производствах произошли из-за некачественного монтажа и ремонта оборудования на 22%, нарушения правил технологического регламента на 11%, недостаточно качественных сальниковых уплотнений и фланцевых соединений на 11% [8], то есть из-за недобросовестной работы сотрудников или отсутствия у них достаточных компетенций. В общей сложности за этот год пострадало 43,6 тысяч человек, погибло - 1,82 тысячи человек. В 2019 году показатели ниже, но все равно цифры огромные - 23,3 и 1,06 тысячи человек соответственно [9]. Поэтому крупные корпорации и компании находятся в поиске передовых, а главное, безопасных решений в области обучения персонала.																																																																											
В  2020-21  годах  Московской  школой  управления																																																																											
«Сколково» совместно с Агентством стратегических инициатив было проведено масштабное исследование, предметом которого стало выявление востребованных профессий в девятнадцати экономических отраслях на ближайшее будущее, рассмотренных сквозь призму стремительного развивающегося мира, изменений климата и экологии и других важных социальных аспектов [10]. Энергетика, в особенности, атомная и альтернативная, транспорт (наземный, водный, авиа, космос), нанотехнологии, добыча и переработка полезных ископаемых, строительство, машиностроение (в т.ч. робототехника) – все эти отрасли будут востребованы в обозримом будущем, и для подготовки первоклассных современных специалистов нужны соответствующие методы и подходы. [11]																																																																											
Для обучения таких специалистов уже готово решение – тренажеры и симуляторы. Сегодня они являются важнейшим элементом профессиональной подготовки в таких областях деятельности, где ошибки при обучении на реальных объектах могут привести к чрезвычайным последствиям, а их устранение – к большим финансовым затратам. Эти устройства позволяют искусственно смоделировать, воссоздать ту жизненную																																																																											

и профессиональную реальность, в которой в дальнейшем предстоит действовать работнику. Симуляторы	обеспечивают	формирование профессиональных навыков в искусственно моделируемой среде. Заменяя собой реальный технологический процесс, производственную или жизненную ситуацию, они могут в существенной мере формировать и дополнять опыт обучающегося в его взаимодействии с внешним миром. [12]																																																																									
Таким образом, к списку методов обучения, приведенному в начале раздела, с начала 2000-х годов добавились симуляционные тренажеры (компьютерные программы с трехмерным изображением, опытные образцы и т.п), а во втором десятилетии 21 века – тренажеры виртуальной и дополненной реальности, которые сейчас стремительно развиваются. Пожалуй, это самая перспективная область в обучении персонала на сегодняшний день.																																																																											
Сегодня в среде HR-специалистов распространено выражение «игровое обучение» (или «эдутейнмент» – edutainment). Это концепт обучения, производный от																																																																											
«education» и «entertainment», который подразумевает распространение учебного контента с помощью развлекательного подхода. Видеоконтент, виртуальный помощник, игровые методики, нестандартные выступления и лекции – всё это может быть адаптировано как элементы игрового обучения. Основная цель – обучить аудиторию учащихся сотрудников, одновременно развлекая их. Сюда можно отнести TED-лекции4, геймификацию рабочего процесса и, конечно же, симулятивные и виртуальные тренажеры. Основная идея игрового обучения заключается в том, что, когда обучающий контент является развлекательным, он с большей вероятностью запомнится. [13]																																																																											
Грамотный, высококвалифицированный и быстро обучаемый (и переобучаемый) персонал - залог успеха и конкурентоспособности предприятия. К такому выводу пришли различные исследователи, интересующиеся темой. [14,15] Проблемой является то, что знания, полученные работниками в высших учебных заведениях, стремительно устаревают, нарастает необходимость их существенного обновления. Существует даже понятие «период полураспада компетентности»5. Это промежуток времени, за который половина приобретенных знаний устаревает. В настоящее время скорость устаревания знаний примерно в 4 раза превышает скорость их обновления. Для поддержания   знаний   на   уровне   требований																																																																											

4 Ежегодные конференции, проводимые одноименным американским частным некоммерческим фондом, миссия которых состоит в распространении уникальных идей в науке, искусстве, технологиях, глобальных проблемах, бизнесе и т.д. (англ. TED - technology, entertainment, design - технологии, развлечения, дизайн)																																																																											
5  Термин  «период  полураспада  компетентности»  означает																																																																											
продолжительность времени после окончания образовательного учреждения, когда в результате устаревания полученных знаний по мере появления новой информации компетентность специалиста снижается на 50%.																																																																											

современности специалист должен не менее 4–6 часов в неделю уделять изучению новой информации в своей профессиональной области. [16]																																																																											
Поэтому все большее распространение в западных и российских компаниях получает идея создания системы непрерывного  образования  сотрудников  (концепция																																																																											
«обучающейся организации»). [17]																																																																											
Согласно статистике по трендам корпоративного обучения, приведенной на выставке «Learning Technology» в Лондоне в феврале 2020 года, к 2025 году поколение Y, характеризующееся глубокой вовлеченностью в цифровые технологии, составит 75% от всего мирового персонала. А раз меняется персонал, должны измениться и подходы к его обучению, к тому же пандемия не позволила бизнесу оставаться статичным. Согласно исследованию британских специалистов, проведенному в этом же году, сотрудники компаний сегодня заинтересованы в увеличении цифрового обучения и улучшения обучения мобильного [18]. VR тренажеры способны достичь этих требований в полной мере.																																																																											
Виртуальные миры сегодня не только удел геймеров и профессиональных киберспортсменов, как это было еще десятилетие назад, а наша привычная реальность. Об этом	говорят		все		те		персональные	 гаджеты	и многочисленные			приложения	для	них,			 которыми пользуется почти каждый современный человек. Не за горами		создание		метавселенной6		-	 виртуальной реальности,			у		 которой			нет		 буквально			никаких ограничений. У Цукерберга М. - главы корпорации Meta Platforms		Inc.			(которой				принадлежит		множество популярных продуктов - Facebook, Instagram, WhatsApp) глобальные планы на этот счет, по его оценке, на создание метавселенной уйдет примерно 5 лет, а работы начались уже осенью 2021 года [19, 20]. Первые шаги уже предприняты - любой человек сегодня может оказаться в виртуальной реальности со своим аватаром, благодаря			социальной	среде		Horizon,			созданной компанией для совместной работы, исследований, занятий спортом и т.д. Все это приближает нас к расширению наших возможностей в виртуальном мире. Виртуальная и дополненная реальности – понятия относительно новые. Повсеместно о них стали говорить не более чем десять лет назад. Как и все передовые IT- технологии, первоначально они разрабатывались для нужд военных и космических, и плавно перешли в нашу обыденную жизнь. Конечно, технологии виртуальной и дополненной реальности сразу стали использовать в профессиональной деятельности человека – сейчас, например,				 огромными					темпами			развиваются виртуальные			симуляторы			 почти  для  всех  сфер медицины, от акушерства до стоматологии, для транспортной сферы, от изучения устройства самолета до обучения лета на нем, для энергетической сферы,

6 Метавселенная - постоянно действующее виртуальное пространство, в котором люди могут взаимодействовать друг с другом и с цифровыми объектами через свои аватары, с помощью технологий виртуальной реальности.																																																																											

промышленной, спорта, индустрии развлечений и т.д. Тренажеры дополненной и виртуальной реальности имеют массу достоинств:																																																																											
потенциал тренажеров, в отличие от стационарного оборудования, позволяет создавать для обучаемых любую обстановку, максимально приближенную к реальным условиям;																																																																											
возможность расчленения сложного алгоритма действия на простые этапы для их последовательного освоения с постепенным усложнением условий работы;																																																																											
возможность посмотреть любую конструкцию изнутри; возможность показать все процессы от механики до взаимодействия веществ буквально на молекулярном уровне;																																																																											
возможность немедленной объективной оценки качества выполнения работы, фиксации допущенных ошибок, одновременной демонстрации правильных действий и повторения упражнения до безошибочного его выполнения;																																																																											
обучение в полуигровой форме естественным образом привлекает внимание обучающегося;																																																																											
возможность отработки внештатных и аварийных ситуаций; полная безопасность обучения, предоставление	обучаемому	возможности самостоятельно принимать решения и действовать в критических и аварийных ситуациях;																																																																									
глубокое погружение обучаемого в процесс достигается в недорогих шлемах виртуальной реальности;																																																																											
оптимизация рабочих процессов;																																																																											
интерактивное взаимодействие с предметом обучения с помощью положения головы и контроллера, расположенного в руке. [21]																																																																											
В России виртуальные тренажеры уже используются в медицине, строительстве и транспортной сфере; с целью улучшения их эффективности и качества, регулярно проводятся исследования на предмет усваиваемости материала при изучении его в виртуальной реальности, вовлеченности персонала и т.д.																																																																											

Рисунок 1 - Эффективность основных методов обучения																																																																											

По результатам одного из исследований российской компании Modum lab, занимающейся производством виртуальных тренажеров, была составлена инфографика (рис.  1),  демонстрирующая,  что  усвояемость  и																																																																											

запоминаемость информации лучше, чем во время обучения в формате виртуальной реальности, только лишь у персонального обучения специалистом. Но не в виде менторства, а скорее репетиторства, подразумевающего полный контроль и направление действий обучаемого. Что невозможно организовать в крупной компании, с большим количеством сотрудников в штате. С помощью тренажеров виртуальной реальности процесс обучения почти полностью автоматизируется, эффективность обучения при этом остается на высоком уровне.																																																																											
Прочие исследования этой компании показали, что:																																																																											
Применение виртуальной реальности развивает эмоциональный интеллект, так как симуляции в виртуальной реальности позволяют вызвать больший эмпатический отклик, чем просмотр симуляций на экранах монитора. [22]																																																																											
Использование	имитационных	технологий виртуальной реальности снижает уровень тревоги и снижает негативную самооценку во время публичных выступлений. [23] Исследование подтвердило снижение тревожности пользователей VR-тренажёра публичных выступлений на 25,2% по сравнению со снижением на 12,6% при обычной тренировке перед зеркалом.																																																																									
VR-тренажёры показывают более высокую проверяющую способность по сравнению с классическим бумажным тестом и опросами. [24]																																																																											
VR эффективен в корпоративном обучении. [25] Сравнивалось обучение по методичке и обучение в тренажере. В результате исследования выяснилось, что VR эффективнее для получения знаний, чем текстовые материалы — группы, использовавшие VR, показали результаты выше 22%. 84% информантов, участвовавших в тестовом VR-обучении, предпочли бы и дальше использовать технологию и не прибегать к очному формату.																																																																											
Идеальным вариантом обучения, показавшим максимальную эффективность, оказалась комбинация двух форматов: VR и методический материал, причем в такой последовательности, когда сотрудник проходит обучение сначала в VR (рис. 2). Скорее всего это связано с погружением в ситуацию на первом этапе. Пользователь включается в происходящее и анализирует все на примерах, а затем закрепляет знания с помощью памятки. На выходе получается такой смешанный формат обучения, где строгая теория в методичке сопровождается впечатлениями в VR.																																																																											





Рисунок 2 - Результаты входных и выходных тестов по четырем группам в переводе на стандартизированные оценки																																																																											

Эти исследования отлично демонстрируют эффективность использования VR-тренажеров в корпоративном обучении. Правильно обозначив цели, построив грамотную структуру тестирования и дизайн, тщательно проанализировав результаты, на выходе можно создать идеальный тренажер, который отвечал бы особенностям конкретной компании.																																																																											
ТЕХНОЛОГИЯ БЫСТРОЙ РАЗРАБОТКИ VR ТРЕНАЖЕРОВ СБОРКИ/РАЗБОРКИ В СРЕДЕ ВИРТУАЛЬНОЙ РЕАЛЬНОСТИ VR CONCEPT																																																																											
Представленные на рынке VR тренажеры являются высокотехнологичными, каждый тренажер – это красивый уникальный продукт, на разработку которого требуется много трудовых, временных и финансовых ресурсов, поэтому использование виртуальной реальности не распространено на предприятиях. Для массового применения VR тренажеров на предприятиях необходимо, чтобы создание тренажера стало конвейерным производством. Для распространения использования виртуальной реальности на предприятиях необходимо массово, быстро, недорого и качественно научиться создавать тренажеры.																																																																											
Большинство представленных на рынке компаний для создания проектов для виртуальной реальности используют игровые движки, такие как Unity, Unreal Engine. Существенным их недостатком для использования в проектах промышленных предприятиях является сложность переноса CAD моделей в виртуальную реальность. Для добавления в проект 3D модели оборудования необходимо выполнить процедуру текстурирования и оптимизации модели для того, чтобы облегчить затраты на ее прорисовку в виртуальной реальности и тем самым повысить точность изображения. Данные процедуры по времени и затратам аналогичны созданию новой копии модели. Однако на российском рынке присутствует платформа для создания виртуальной реальности VR Concept, в которой реализована поддержка загрузки CAD моделей. VR Concept — российский разработчик приложения виртуального прототипирования для коллективной работы с цифровыми двойниками в виртуальной реальности [26].																																																																											
VR Concept предоставляет широкий набор инструментов																																																																											

для работы с виртуальным цифровым прототипом будущего здания, автомобиля, самолета, судна и любого другого сложного изделия на всех этапах его разработки																																																																											
— от визуализации бизнес-идеи до проведения виртуальных испытаний и внесения изменений на этапе проектирования [27]. Среди основных преимуществ VR Concept можно выделить следующие:																																																																											
Наличие собственного движка, алгоритмы которого позволяют снизить требования к производительности ресурсов, что делает возможность работы в виртуальной реальности на не самых мощных компьютерах и ноутбуках																																																																											
Бесшовная интеграция, проявляющаяся в возможности загружать CAD и BIM модели в VR без предварительной обработки. VR Concept поддерживает загрузку большинства форматов САПР-систем: AutoCAD, NanoCAD, Revit, Solidworks, КОМПАС-3D																																																																											
Коллективная работа. Возможно организовать доступ к одной модели нескольких человек, которым даже не обязательно находиться в одном месте. К одному проекту по удаленному доступу может подключиться неограниченное число пользователей. Для организации совместной работы в виртуальной реальности необходимо настроить порты роутера для открытия доступа по сети и прописать настройки плагина, отвечающего за запуск виртуальной реальности																																																																											
Простой и интуитивно понятный интерфейс делает возможным быстрый старт без навыков программирования																																																																											
В работе реализован прототип конвейерной разработки тренажеров, выделены общие этапы к созданию тренажера в виртуальной реальности. Для разработки тренажера сборки/разборки любого вида промышленного оборудования можно выделить одинаковые шаги. Систематизация и унификация одинаковых шагов позволяет создать прототип конвейерной разработки, при которой определены шаблоны, которые нужно настроить, последовательность одинаковых элементов реализована заранее.																																																																											
На базе VR Concept предложена технология создания тренажеров для виртуальной реальности. Разработаны модули, в которых реализован функционал поддержки разных видов подсказок для обучения и общий сценарий обучения процессу сборки/разборки промышленного оборудования. Данный подход позволяет массово создавать тренажеры со схожим функционалом для разных типов оборудования. Подход, предполагающий использование платформы VR Concept для разработки тренажера	сборки/разборки	промышленного оборудования в виртуальной реальности, предполагает выполнение следующих этапов:																																																																									
Сбор информации об объекте тренажера, получение технологической карты разборки/сборки оборудования, нормативной документации, 3D моделей оборудования.																																																																											
Создание сценария разборки оборудования, включающий в себя последовательность шагов, которые необходимо выполнить для разборки или сборки оборудования.																																																																											

Загрузка 3D моделей оборудования и вспомогательных элементов в сцену редактора VR Concept (поддерживаются конструкторские CAD и BIM форматы, для оборудования, рассматриваемого в работе, не требуется оптимизация загружаемых файлов)																																																																											
Настройка сцены в редакторе VR Concept (задание свойств элементов)																																																																											
Настройка сценария разборки оборудования и подсказок для процесса обучения с помощью настольного	приложения	для	создания конфигурационных файлов																																																																								
В процессе создания тренажера происходит преобразование исходных данных о последовательности разборки оборудования из одного формата в другой. На первом этапе присутствуют неструктурированные данные, такие как технологические карты ремонта, записи процесса сборки/разборки, полученные в результате наблюдения за работой на производстве, интервью специалистов по ремонту, начальников производства. Эти данные могут быть неполными или наоборот излишними. Для создания тренажера исходные данные нужно формализовать, привести к единому виду, который будет содержать достаточно информации о последовательности разборки.																																																																											
На втором этапе формируется перечень инструкций разборки оборудования, происходит процесс формализации данных. Каждая инструкция содержит информацию об одной элементарной операции. Все детали 3D модели должны быть пронумерованы и поставлены в соответствие элементам из перечня инструкций. Также на данной стадии работы с данными определяется количеством этапов разборки. Инструкции разборки, полученные на данном этапе, используются для настройки сцены и создания файла инструкций, который загружается в программу логики тренажера, поэтому правильность формирования инструкции разборки и построения соответствия между деталями 3D модели и описанием операций важна.																																																																											
На третьем этапе формируется инструкция разборки оборудования в виде, в котором она загружается в программу тренажера. В качестве формата для загрузки в программу выбран json. Программа VR тренажера принимает на вход json файл, состоящий из массива элементарных инструкций. Главным преимуществом разработки VR тренажеров сборки/разборки промышленного оборудования в среде виртуальной реальности VR Concept с использованием универсальных модулей является то, что для создания тренажера не требуется знание языков программирования и опыт работы с движками для визуализации. Разработка тренажера заключается в настройке сцены проекта в графическом редакторе и создании файлов инструкций тренажера с помощью настольного приложения.																																																																											
РАЗРАБОТКА МОДУЛЕЙ ДЛЯ РЕАЛИЗАЦИИ ТЕХНОЛОГИИ																																																																											

Для создания тренажеров с использованием описанной																																																																											

технологии необходимы программный модули, в которых реализованы общие функции. Для использования технологии разработана система, концептуальная архитектура которой представлена на рисунке 3. В разрабатываемой системе можно выделить две независимые подсистемы. Первая подсистема представляет собой программу для запуска и функционирования VR тренажера сборки/разборки промышленного оборудования.																																																																											
Именной в этой программе реализован общий алгоритм сценария обучения персонала сборке/разборки оборудования, который включает в себя обработку действий пользователя в виртуальной реальности, запуск необходимых подсказок, перемещение элементов. В ней можно выделить следующие логические модули:																																																																											
Модуль демонстрации сборки/разборки оборудования																																																																											
Модуль воспроизведения звуковых подсказок																																																																											
Модуль	отображения	текстовых	(графических) подсказок																																																																								
Модуль загрузки инструкции разборки оборудования и конфигурационных файлов тренажера																																																																											
Модуль обмена данными с VR Concept																																																																											

Рисунок 3 - Концептуальная архитектура системы																																																																											

При запуске программы происходит загрузка конфигурационных файлов с описанием подсказок, с последовательностью операций разборки оборудования. В случае успешной загрузки файлов пользователь может приступить к использованию VR тренажера. Ядро VR Concept регулярно отправляет UDP пакет с состояниями рычагов, отвечающих за запуск подсказок. В программе происходит обработка полученных данных. В случае изменения входящего значения происходит запуск или остановка демонстрации разборки, воспроизведения аудио файла, обновление номера этапа или смены графической подсказки.																																																																											
Вторая подсистема представляет собой программу для создания конфигурационных файлов для запуска тренажера и инструкции разборки. В программе можно выделить следующие функциональные модули:																																																																											

Модуль просмотра операции сборки																																																																											
Модуль	создания	инструкции	разборки	и конфигурационных файлов для тренажера																																																																							
Модуль обмена данными с VR Concept.																																																																											
Для реализации модулей выбран язык программирования C++, который используется в ядре VR Concept. Для создания настольного приложения был выбран кроссплатформенный фреймворк Qt, предоставляющий классы для создания настраиваемых графических интерфейсов. Преимущество технологии быстрого создания тренажеров в среде виртуальной реальности VR Concept является то, что человеку не нужно знать языки программирования для написания логики тренажера. Алгоритмы управления подсказками заранее реализованы, для их использования для конкретного вида оборудования требуется только задание настроек индексов в конфигурационных файлах. Чтобы облегчить создание конфигурационных файлов используется автогенерация файлов с помощью экранных форм. Для этого реализовано настольное графическое приложение. Таким образом для создания тренажера не требуются специальные знания в области программирования и работы в виртуальных средах.																																																																											
VR ТРЕНАЖЕР СБОРКИ/РАЗБОРКИ ЦЕНТРОБЕЖНОГО НАСОСА																																																																											
Авторами разработан и реализован прототип высокопроизводительной технологии разработки VR тренажеров, опишем ее применение на примере создания тренажера сборки/разборки центробежного консольного насоса К160/30 (К160/20). В качестве исходных данных для разработки тренажера получены от заказчика чертежи насоса, комплект технологической документации по ремонту [28], конструкторские 3D модели оборудования. В работе рассмотрен упрощённый вариант насоса, степень детализации элементов которого уменьшена, представлены только ключевые элементы насоса. Создание обучающего VR тренажера сборки/разборки насоса проходила в соответствии с предложенной технологией быстрой разработки в среде виртуальной реальности VR Concept. Первый этап разработки тренажера – это подготовка исходных данных для последующего создания проекта в редакторе VR Concept. На этом этапе аналитик (технолог, специалист) на основе данных из технологической документации по ремонту подготовил детализированный сценарий разборки насоса. В сценарии номера элементов соответствуют обозначениям на чертежах. Было выделено 4 этапа разборки:																																																																											
Демонтаж насоса																																																																											
Разборка корпуса насоса																																																																											
Разборка подшипникового узла																																																																											
Разборка спирального корпуса																																																																											
Полученный подробный сценарий разборки и переданные 3D модели оборудования послужили исходными материалами для создания VR тренажера в данной выпускной квалификационной работе. На основе  сценария  разборки  были  подготовлены																																																																											

справочные материалы: записаны аудиофайлы с описанием этапов и озвучиванием элементарных операций, составлены графические подсказки, включающие чертежи насоса и сценарий разборки. Также были подобраны объекты для управления подсказками. После подготовки справочных материалов, был создан проект VR Concept. В проект были добавлены модели насоса, рычагов управления подсказками, слайдер для смены этапов и текстовых подсказок. Объектам были добавлены необходимые свойства.																																																																											

Рисунок 4 - Вид сцены в виртуальной реальности																																																																											
Для эффективного обучения раздельно реализованы поэтапная демонстрация сборки/разборки насоса и непосредственные действия над элементами оборудования обучаемого. Для этого добавлены две модели насоса: первая для разборки контроллерами, вторая для демонстрации сценария разборки – три рычага для запуска разных типов подсказок, слайдеры для просмотра текстовых подсказок и смены номера этапа, изображения с текстовыми подсказки.																																																																											
Обучающийся может просмотреть демонстрацию разборки или сборки для каждого отдельного этапа с остановками и повторами, прослушать аудио подсказки, прочитать справочные материалы и выполнить разборку самостоятельно.																																																																											














Рисунок 5 - Взаимодействие с предметами с помощью контроллеров																																																																											
Кроме обучающегося, за процессом тренировки могут наблюдать  инструктор,  экзаменационная  комиссия.																																																																											

Наблюдение может быть внешним, когда инструктор или члены комиссии смотрят отображение того, что видит пользователь в виртуальной реальности. Также наблюдающие с помощью коллективного режима доступа могут подключиться с другого компьютера к проекту. Для этого у них должны быть очки виртуальной реальности, установленное и настроенное программное обеспечение VR Concept. Наблюдающие видят полностью сцену для обучения со всеми встроенными элементами и аватар пользователя, который проходит обучение. Они могут общаться с пользователем и взаимодействовать с объектами в сцене без ограничения.																																																																											
ЗАКЛЮЧЕНИЕ																																																																											
Анализ технологического развития и потребностей бизнеса показал, что много недорогих VR тренажеров будут востребованы, поскольку виртуальная реальность позволяет обучать персонал предприятия работе со сложным оборудованием. Основная проблема в разработке современных VR тренажеров заключается в длительности и дороговизне процесса создания одного экземпляра тренажера. В работе предложена технология создания недорогих, но реалистичных тренажеров сборки/разборки промышленного оборудования. Для реализации технологии был выбран инструмент VR Concept. Реализованная технология позволяет облегчить и ускорить процесс созданий тренажера. Реализация обобщенного сценария процесса обучения и заранее подготовленных функций обработки подсказок позволяет создавать тренажер сборки/разборки оборудования только путем настройки проекта в редакторе VR Concept и конфигурационных файлов, в которые вносится информация о типах используемых подсказок и их индексы. Авторами была не только придумана теоретическая технология, но и были опробованы практические примеры создания тренажеров в виртуальной реальности.																																																																											
.  Таким  образом,  было  создано  отображение																																																																											
физического мира в виртуальной реальности. 3D модели соответствуют физическим объектам разбираемого оборудования. При этом возможна различная степень детализации для обучения персонала, занимающегося разборкой разных подсистем. В одном случае крупные узлы оборудования могут оставаться цельными и неразборными, а для обучения работе с данным узлом возможна детализация до наименьших разборочных элементов: гаек, шайб, винтиков. При погружении в виртуальную реальность у обучающегося формируются навыки работы с оборудованием, сходные навыкам, сформированным при обучении на реальном оборудовании. Это достигается за счет соответствия цифровых моделей реальным физическим объектам, возможности перемещения деталей оборудования только согласно сценариям, осуществимым в реальной жизни, возможности звукового сопровождения взаимодействия объектов между собой (например, скрежет при снятии гаек,  лязг  металла).  VR  тренажеры  могут  быть																																																																											

использованы для быстрого и эффективного обучения персонала. Так как VR тренажер включает в себя программный комплекс, то возможно реализация блоков программы, отвечающих за снятие данных при прохождении обучения. В автоматическом режиме возможно получение времени, затрачиваемого на прохождение обучающего курса, количество и типы совершенных ошибок. Последующий анализ типов ошибок позволит скорректировать процесс обучения для каждого	сотрудника	и	сделать	его персонализированным, что приведет к увеличению эффективности обучения																																																																							
Дальнейшее развитие технологии быстрой разработки VR тренажеров связано с включением модулей логирования действий пользователя для последующей оценки пользователя, анализа процесса обучения, совершенных ошибок. Также возможно построение системы обучения, которая будет включать в себя вспомогательные приложения для ведения базы данных пользователей, прошедших обучения, перечня используемых тренажеров для разного оборудования.																																																																											

Применение стека технологий ELK для сбора и анализа системных журналов событий																																																																											
Введение																																																																											
Современные достижения в области информационных тех- нологий и их широкое распространение в различных сферах деятельности привело к взрывному росту обрабатываемых данных и возникновению понятия «больших данных» [1, 2]. Наряду с ростом объема данных, происходит и рост сложности задач, решаемых с помощью информационных технологий, что ведет не только к росту масштаба вычислительных ин- фраструктур, но и к усложнению их устройства. Так, например, достижения в области технологий виртуализации и значи- тельный рост объемов вычислительных ресурсов привели к возникновению нового направления исследований в области технологий построения и применения вычислительных ин- фраструктур – облачных вычислений [3, 4].																																																																											
Одной из основных идей облачных вычислений является вве- дение дополнительного уровня абстракции над физическими ресурсами вычислительной инфраструктуры в виде виртуаль- ных машин (ВМ). При этом ВМ могут как являться конечным продуктом облачной инфраструктуры, так и служить базой для построения сложных многокомпонентных информаци- онно-вычислительных систем, которые сами могут являть- ся облачными сервисами более высокого уровня. Очевидно, что подобное усложнение структуры вычислительных ин- фраструктур и сервисов приводит и к усложнению процесса управления ими.																																																																											
Одной из актуальных проблем, возникающих при управлении облачными инфраструктурами, является обработка возни- кающих нештатных ситуаций и сбоев в работе системы [5-7]. Так, задачу поиска первоисточников возникающих неполадок значительно усложняет распределенная архитектура совре- менных систем с большим количеством взаимосвязей между их компонентами. Для ее решения, как правило, используется анализ данных журналов событий и различных показателей функционирования системы, получаемых с помощью систем мониторинга. Актуальность данной проблемы также под- тверждается и большим количеством исследований, направ- ленных на изучение методов извлечения полезной информа- ции из получаемых и, как правило, слабоструктурированных данных [8-11].																																																																											
Другой актуальной проблемой является падение скорости извлечения данных из-за быстрого увеличения объемов по- лучаемых данных. При возникновении нештатных ситуаций, скорость извлечения данных о функционировании системы напрямую влияет на скорость исправления возникающих сбо- ев и, соответственно, на общую стабильность работы системы. Для решения описанных проблем и задач разрабатываются программные продукты и комплексы, которые позволяют ор- ганизовать сбор и хранение данных, а также предоставляют инструменты для их анализа. В данной работе рассматрива- ется подобное техническое решение и аспекты его внедрения для анализа журналов событий облачной инфраструктуры Объединенного института ядерных исследований (ОИЯИ).																																																																											
Облачная инфраструктура ОИЯИ																																																																											
ОИЯИ принимает участие в большом количестве различных научных и образовательных проектов и экспериментов, кото-																																																																											
 																																																																											
рые нуждаются в надежной и масштабируемой информацион- ной вычислительной инфраструктуре. На базе Лаборатории информационных технологий (ЛИТ) ОИЯИ была развернута облачная инфраструктура, базирующаяся на модели инфра- структура как сервис (англ. Infrastructure as a Service, IaaS). По данной модели конечным продуктом облачного сервиса являются виртуальные машины – виртуальные серверы с не- обходимой вычислительной мощностью. Облако ОИЯИ [12] построено на основе проекта с открытым исходным кодом OpenNebula, в состав которого входят средства для разверты- вания виртуального окружения, управления хранилищами данных, контроля доступа и мониторинга.																																																																											
Сервис используется как для предоставления персональных ВМ индивидуальным пользователям, так и как основа для ряда многоузловых информационно-вычислительных комплексов, например, таких, как виртуальный вычислительный кластер HTCondor и сервис интерактивных вычислений JupyterHub. Так- же облако ОИЯИ является частью интегрированной облачной инфраструктуры стран-участниц ОИЯИ [13, 14], состоящей из отдельных облачных инфраструктур ее участников. Подобная интеграция дает возможность использования всех отдельных облачных вычислительных инфраструктур участников через единый интерфейс запуска вычислительных задач.																																																																											
Облако ОИЯИ активно развивается. В 2015 году вычислитель- ный ресурс облака ОИЯИ уже насчитывал 200 ядер ЦП и 400 ГБ оперативной памяти. К 2016 году цифры выросли до значений 330 ядер ЦП и 840 ГБ оперативной памяти. По состоянию на 2019 год, количество ядер ЦП возросло до 1564, а объем опера- тивной памяти до 8.54 ТБ. На текущий момент вычислитель- ные мощности составляют 5000 ядер ЦП и 56 ТБ ОЗУ. На дан- ный момент облако состоит из 205 серверов, которые условно можно отнести к трем типам: управляющие, вычислительные и узлы хранения. 184 сервера выделены под виртуальные ма- шины пользователей. Высокая динамика роста вычислитель- ных ресурсов влечет за собой увеличение числа виртуальных серверов, что, в свою очередь, значительно увеличивает по- тенциальный объем обрабатываемых данных. Хотя структура облака и является относительно простой на физическом уров- не, на уровне использующих ее сервисов структура усложняет- ся и приобретает динамический характер, в частности, за счет их масштабируемости. Упрощенная схема облачной инфра- структуры ОИЯИ представлена на рисунке 1.																																																																											



Р и с. 1. Упрощенная схема облачной инфраструктуры ОИЯИ F i g. 1. Simplified diagram of the JINR cloud infrastructure																																																																											
 																																																																											


 																																																																											
Задача сбора и анализа журналов событий становится все бо- лее и более сложной из-за роста масштабов облака ОИЯИ, а также внедрения новых сервисов, построенных на его основе, и интеграции со сторонними вычислительными системами.																																																																											
Требования к системе																																																																											
Для обеспечения надежности и доступности сервисов требу- ется оперативно реагировать на отклоняющиеся от нормы события, возникающие в кластере облачной инфраструкту- ры. Критические ошибки и предупреждения могут повлечь за собой сбой функционирования системы, что может привести к потере пользовательских данных, данных экспериментов. Не исключены и угрозы информационной безопасности. Для выявления всех аномальных явлений необходимо проводить непрерывный системный сбор и анализ лог-файлов инфра- структуры, что невозможно без использования сторонних специализированных инструментов. Для решения этой зада- чи необходимо внедрить в облако ОИЯИ специализированную систему сбора и анализа лог-файлов.																																																																											
Основные требования к системе были сформулированы исхо- дя из описанной выше специфики облачной инфраструктуры ОИЯИ, они включают:																																																																											
•	Возможность интеграции с системой единого входа ОИЯИ (Single Sign-On, SSO).																																																																										
•	Возможность масштабирования системы при увеличении нагрузки.																																																																										
•	Способность обрабатывать слабоструктурированные данные в различных форматах, в частности - файлы си- стемных журналов событий.																																																																										
•	Предоставление механизма защиты передаваемых по сети данных в процессе их сбора.																																																																										
•	Наличие графического пользовательского интерфейса для облегчения взаимодействия операторов с системой.																																																																										
•	Возможность установки собственного экземпляра систе- мы на собственных вычислительных мощностях.																																																																										
•	Распространение по лицензии с открытым исходным ко- дом для обеспечения возможности свободной доработки системы, исходя из локальных особенностей.																																																																										
Реализация системы																																																																											
Основные компоненты																																																																											
При реализации системы была задействована совокупность инструментов по сбору, анализу, агрегации и фильтрации дан- ных, также известная под названием ELK Stack:																																																																											
•	Elasticsearch – распределенная система поиска и аналити- ки, которая позволяет хранить, анализировать и искать информацию из больших объемов данных. В своем ядре содержит Lucene – библиотеку для полнотекстового высо- копроизводительного поиска.																																																																										
•	Logstash – конвейер обработки данных, который позво- ляет фильтровать и преобразовывать принимаемые дан- ные и передавать полученные результаты одному или нескольким получателям.																																																																										
•	Kibana – веб-интерфейс для визуализации данных.																																																																										
 																																																																											
Elasticsearch применяется для решения большого спектра задач, начиная от обычного поиска слов в тексте [15], закан- чивая сбором и анализом метрик производительности [16], геоданных [17], различных системных данных [18] и даже ма- шинным обучением [19]. Рассматриваемый стек технологий хорошо себя зарекомендовал как в индустрии, так и в научных и образовательных организациях [20-25].																																																																											
Elasticsearch Stack – программный продукт с поддержкой кла- стерной архитектуры, что позволит горизонтально масштаби- ровать сервис при быстро растущем облаке.																																																																											
ELK Stack является системой с открытым исходным кодом под лицензией Apache 2.0, что позволяет бесплатно использовать его продукты, в то же время у компании Elastic есть коммер- ческий продукт X-Pack под лицензией Elastic License, что суще- ственно усложняет работу с продуктами Elastic. Часть функ- ционала X-Pack доступна по пробной версии, но основные и довольно важные функциональные возможности распростра- няются только под коммерческой лицензией:																																																																											
•	Index Lifecycle Management – позволяет управлять состоя- нием индексов (индекс - специализированная структура и механизм управления данными в Elasticsearch).																																																																										
•	Infrastructure and Logs UI – плагин для визуализации, фильтрации и просмотра лог-файлов.																																																																										
•	Kibana multi-tenancy – инструменты для разграничения прав доступа пользователей к различным объектам си- стемы (индексам, панелям визуализации данных и т.д.), необходимые для реализации многопользовательского использования системы.																																																																										
Весной 2019 года Amazon выпустил Open Distro for Elasticsearch1 под свободной лицензией Apache 2.0, который включает в себя свободные реализации многих возможностей из X-Pack. Во-первых, набор функций безопасности:																																																																											
•	Node-to-node encryption – шифрование трафика между уз- лами Elasticsearch кластера.																																																																										
•	HTTP basic authentication – метод аутентификации, кото- рый включает в себя имя пользователя и пароль как часть HTTP-запроса.																																																																										
•	Role-based access control – управление доступом на основе ролей.																																																																										
•	Kibana multi-tenancy – инструменты разграничения прав доступа.																																																																										
•	Alerting – система для отправки уведомлений.																																																																										

Во-вторых, SQL, что предоставляет возможность писать запро- сы на языке SQL, а не на предметно-ориентированном языке запросов Elasticsearch (DLS).																																																																											
В-третьих, Performance Analyzer – REST API, позволяющий полу- чать различные метрики производительности кластера.																																																																											
В-четвертых, Index Management – позволяет управлять индек- сами.																																																																											

Используемый в описываемых работах дистрибутив Open Distro for Elasticsearch является полностью свободным и от- крытым программным решением, основная цель которого – обеспечение дальнейшего развития инновационных про- граммных решений с открытым исходным кодом и свободное																																																																											
 																																																																											

 																																																																											
1 Open Distro for Elasticsearch [Электронный ресурс]. URL: https://opendistro.github.io/for-elasticsearch (дата обращения: 02.03.2021).																																																																											
 																																																																											


 																																																																											
распространение полнофункционального дистрибутива си- стемы.																																																																											

Интеграция с SSO ОИЯИ																																																																											
Одним из важнейших критериев выбора системы являлась возможность ее интеграции с системой SSO ОИЯИ, которая является собственной реализацией популярного протокола аутентификации OAuth22. Хотя выбранный стек технологий и не предоставляет прямой поддержки протокола OAuth2, он имеет механизм подключения внешних систем аутентифика- ции через проксирующий сервер. Функциями прокси-сервера являются переадресация пользователя на страницу входа в системе SSO ОИЯИ и передача необходимых пользовательских																																																																											
 																																																																											
данных сервисам ELK.																																																																											
Для реализации описанного механизма был разработан соб- ственный прокси-сервер на основе проекта OAuth2 Proxy3, осуществляющий перенаправление пользовательских запро- сов на вход в систему SSO ОИЯИ и получения от нее пользо- вательских данных в случае успешной аутентификации. Для формирования корректного HTTP-запроса на вход в Kibana (из получаемых OAuth2 Proxy данных о пользователе) был исполь- зован широко известный веб-сервер Nginx. Также Nginx был использован и для установления безопасных соединений меж- ду веб-браузером пользователя, системой ELK и SSO ОИЯИ. Схе- ма работы этого механизма проиллюстрирована на рисунке 2.																																																																											
 																																																																											

 																																																																											


Р и с. 2. Схема интеграции технологии SSO в систему анализа данных F i g. 2. Scheme for integrating SSO technology into a data analysis system																																																																											
 																																																																											
Защита сетевых соединений																																																																											
Одним из требований к разрабатываемой системе было предо- ставление механизма защиты передаваемых по сети данных в процессе их сбора. В системе можно выделить три категории сетевых соединений, которые необходимо защитить:																																																																											
•	связь веб-браузера клиента с веб-интерфейсом Kibana;																																																																										
•	связи между компонентами ELK, находящихся на разных сетевых узлах;																																																																										
•	связи между узлами, с которых осуществляется сбор данных, и подсистемами ELK.																																																																										

Защита первой категории соединений была обеспечена за счет шифрования трафика веб-сервером Nginx при реализации интеграции системы с SSO ОИЯИ.																																																																											
Для обеспечения шифрования всех внутренних соединений, попадающих в оставшиеся две категории, в ELK предусмотрен собственный механизм, для реализации которого требуется наличие удостоверяющего центра (УЦ). Задачей УЦ является подтверждение подлинности ключей шифрования с помощью сертификатов электронной подписи.																																																																											
Подобный механизм защиты имеет широкую область приме-																																																																											
 																																																																											
нения, и в крупных вычислительных инфраструктурах, подоб- ных облачной инфраструктуре ОИЯИ, единый УЦ может быть использован в разных компонентах инфраструктуры. В част- ности, в рассматриваемой инфраструктуре уже был ранее соз- дан УЦ для защиты соединений в системе управления конфи- гурациями Puppet4, использующейся для конфигурирования облачных узлов. Таким образом, уже на этапе первоначальной настройки новые узлы получают собственные сертификаты, подписанные локальным УЦ, которые впоследствии использу- ются для шифрования всех внутренних соединений. Подобная интеграция позволила избежать дублирования функционала для решения схожих задач в разных частях инфраструктуры.																																																																											

Применение Logstash																																																																											
Одним из примеров, иллюстрирующих динамическое измене- ние конфигурации облачной инфраструктуры, является ме- ханизм обеспечения отказоустойчивости управляющих узлов облака ОИЯИ. Он основан на консенсусном алгоритме Raft5, который гарантирует согласованность серверов относительно друг друга. Это достигается тем, что в кластере из 3 управляю- щих узлов, путем голосования, выбирается специальный узел,																																																																											
 																																																																											

 																																																																											
2 Hardt D. The OAuth 2.0 Authorization Framework. RFC 6749. October 2012. DOI: 10.17487/RFC6749 [Электронный ресурс]. URL: https://www.rfc-editor.org/info/ rfc6749 (дата обращения: 02.03.2021).																																																																											
3 Speed J. OAuth2 Proxy [Электронный ресурс]. URL: https://github.com/oauth2-proxy/oauth2-proxy (дата обращения: 02.03.2021).																																																																											
4 Puppet: Powerful infrastructure automation and delivery [Электронный ресурс]. URL: https://puppet.com (дата обращения: 02.03.2021).																																																																											
5 OpenNebula [Электронный ресурс]. URL: https://docs.opennebula.io/5.12/advanced_components/ha/frontend_ha_setup.html#raft-overview (дата обращения: 02.03.2021).																																																																											
 																																																																											


 																																																																											
называемый «лидером», который будет обеспечивать функци- ональность системы. Лидер периодически посылает сигналы остальным узлам, которые называются «последователи», чтобы сохранить свой статус лидерства. Если управляющему узлу кла- стера не удалось отправить сигнал, то выбираются кандидаты и начинаются новые выборы лидера. При каждой модификации системы, прежде чем сделать запись о смене состояния системы в базе данных (БД), лидер записывает в БД последовательность операций, которые необходимо выполнить для смены состо- яния системы, и реплицирует эти записи на последователей. Данная операция увеличивает задержку выполнения операций при работе с БД, но гарантирует сохранение целостности состо- яния системы и обеспечивает сохранение работоспособности кластера при выходе из строя лидирующего узла.																																																																											
Из описания алгоритма Raft видно, что управляющие узлы в каждый отдельно взятый момент времени будут иметь раз- личные роли, которые со временем могут измениться (напри- мер, в случае возникновения сбоя в системе). При этом каж- дый узел ведет собственные системные журналы событий, но из-за возможной смены ролей узлов отдельные части содер- жимого одного и того же лог-файла на отдельно взятом узле могут соответствовать разным ролям, что затрудняет анализ журналов событий.																																																																											
Алгоритм Raft предусматривает наличие у лидера дополни- тельного «плавающего» ip-адреса, который при выходе из строя текущего лидера переходит к новому. Так как у каждого из трех узлов всегда имеется свой собственный ip-адрес, плава- ющий ip-адрес можно использовать как индикатор наличия у узла роли «лидер». Таким образом, упростить анализ журнала событий можно, организовав запись системных журналов не в три индекса Elasticsearch, а в четыре, соответствующих трем постоянным и одному плавающему ip-адресу. В данной органи- зации четвертый индекс всегда будет содержать только записи журналов (что проиллюстрировано на рисунке 3), соответству- ющие лидирующему узлу, и при этом сохранится возможность независимого просмотра журналов всех трех узлов.																																																																											
 																																																																											
Для реализации описанной выше задачи был использован функционал подсистемы Logstash. С помощью встроенных фильтров Logstash извлекает ip-адреса управляющих узлов, сравнивает их с заданным шаблоном и отправляет данные в соответствующие индексы, что позволяет просматривать за- писи журналов независимо как со всех трех узлов, так и записи только лидирующего узла. Данная реализация проиллюстри- рована на рисунке 4.																																																																											


Р и с. 4. Схема пополнения индексов данными, содержащими записи журналов событий управляющих узлов																																																																											
F i g. 4. Scheme for replenishing indexes with data containing records of the event logs of control node																																																																											
 																																																																											
Заключение																																																																											

 																																																																											











Р и с. 3. Схема формирования единого журнала лидирующего узла. Цветом выделены блоки записей журнала событий, поступающие с соответствующих серверов.																																																																											
F i g. 3. The formation scheme of a single journal of the leading node. The color shows the blocks of event log records coming from the corresponding servers.																																																																											
 																																																																											
Анализ системных журналов является одной из важнейших задач для поддержания стабильной работы любой сложной программной системы, и с ростом масштабов и сложности со- временных информационно-вычислительных систем данная задача становится все более трудновыполнимой. В данной ра- боте был описан опыт внедрения стека технологий ELK в ка- честве системы сбора и анализа системных журналов событий облачной инфраструктуры ОИЯИ. Данный опыт показывает, что, используя данный стек технологий, можно довольно бы- стро и достаточно просто построить систему сбора и анализа системных журналов событий для осуществления централи- зованного мониторинга IT-инфраструктуры. В дальнейшем планируется расширить область применения системы на все																																																																											
 																																																																											


 																																																																											
облачные сервисы ОИЯИ, а также оценить возможность её применения и для сбора журналов работы пользовательских вычислительных задач, выполняемых на кластере HTCondor. Использование ELK в качестве системы анализа системных журналов событий – лишь частный случай в текущей прак- тике, данный инструмент может быть востребован и в других исследовательских проектах ОИЯИ.																																																																											

Предиктивный ввод текста на основе факторной модели языка																																																																											
1	Введение																																																																										
Различные системы автодополнения текста используются в вычислительной технике на протяжении многих лет. Основная задача та- ких систем – сокращение числа нажатий на клавиатуру, необходимых для ввода какого- то слова, например, SMS-сообщения. В по- следнее десятилетие необходимость создания качественных систем автодополнения и пре- диктивного ввода текста была обусловлена появлением и ростом популярности мобиль- ных устройств, обладающих, в основном, 12- клавшной телефонной клавиатурой либо сен- сорным экраном с небольшой диагональю. Набор текста на устройствах данной катего- рии является затруднительным из-за малого физического размера клавиш и, зачастую, назначением ввода нескольких различных символов на одну клавишу.																																																																											
Используемые подходы [Gale, Sampson, 1995], [Katz, 1987], [Stocky, Faaborg, Lieberman,																																																																											
2004], [Sandnes, 2015] к решению проблемы автодополнения текста основаны на исполь- зовании   частотных   словарей,   содержащих																																																																											
 																																																																											
слова и вероятность их встречи в тексте. Дан- ный подход показывает свою эффективность при использовании с аналитическими языка- ми, характеризуемыми малым числом слово- форм. Однако при использовании данного метода автодополнения текста с синтетиче- скими флективными языками (например, рус- ским), имеющими большое число словоформ, качество предсказания падает, поскольку ме- тод не учитывает морфологические парамет- ры вводимых слов. В традиционных методах автодополнения текста данная проблема ре- шается путём хранения вероятностей встречи кортежей из N слов, однако это влечёт повы- шенное потребление памяти, что ограничива- ет их использование в мобильных устрой- ствах.																																																																											
2	Способ предиктивного ввода текста на основе факторной модели языка																																																																										
Факторная модель языка [Bilmes, Kirchhoff, 2003] - статистическая модель языка, разрабо- танная в 2003 году. Факторная модель языка рассматривает слово как вектор из факторов																																																																											
, одним из которых выступает само слово, а остальными – его характеристи- ки важные для конкретной модели, такие как, такие так морфологические параметры, теги части речи, корни, псевдоосновы, семантиче- ский контекст употребления слова, огласовки и т.д.																																																																											
В реализуемой модели языка факторами являются слово и тег, содержащий информа- цию о значениях следующих морфологиче- ских параметров:																																																																											
•	грамматический род;																																																																										
•	число;																																																																										
•	падеж;																																																																										
•	транзитивность;																																																																										
•	лицо;																																																																										
•	время;																																																																										
•	наклонение.																																																																										
Реализуемая факторная модель языка мо- жет быть описана следующим образом:																																																																											
 																																																																											
Новые информационные технологии в автоматизированных системах – 2018																																																																											
3	Сравнение с традиционными способами																																																																										
Для разработанного способа предиктивно- го ввода были произведены изменения точно- сти предсказания и KSPC (число нажатий на клавиатуру, необходимое для ввода одного																																																																											
,	символа). Данные показатели были сравнены																																																																										
 																																																																											
где    – весовой коэффициент для би- граммной модели;																																																																											
– значение максимальное частоты употреб- ления биграммы   , при котором исполь- зуется backoff модель;																																																																											
- весовой коэффициент для униграмм- ной модели,    - backoff функция, определяемая как:																																																																											

           .																																																																											
Для определения коэффициента ? вычисля- ется величина    вероятной массы, приходя- щейся на униграммный вариант:																																																																											


.																																																																											
Величина	определяется как																																																																										
.																																																																											
 																																																																											
с показателями для традиционной биграмм- ной модели с откатом на униграммы.																																																																											
Для проведения эксперимента использова- лись несколько обучающих и тестовых кор- пусов, характеристики которых приведены в таблице 1.																																																																											
При проведении эксперимента число би- грамм в языковых моделях было ограничено 2500. Переобучение модели языка при прове- дении эксперимента было запрещено. В таб- лице 2 приведены показатели точности пред- сказания следующего слова для всех корпу- сов и значение KSPC.																																																																											
Более высокую точность предсказания сле- дующего слова для корпуса L можно объяс- нить тем, что часть наиболее часто употреб- ляемых биграмм этого корпуса была включе- на в биграммы, используемые модулем авто- дополнения и предиктивного ввода.																																																																											
Было произведено сравнение точности предсказания и значения KSPC в зависимости от числа биграмм в словаре. Число использу- емых биграмм при этом составляло 0, 2500, 5000, 7500, 10000 и 25000.																																																																											
Таблица 1. Используемые корпуса текстов																																																																											
 																																																																											
Название корпуса	Объём корпус																																																																										
(число биграмм)	Источник корпуса	Входит в обучающий корпус	Примечания																																																																								
I	68321	OpenCorpora (сеть Internet)	Да	Подмножество корпуса																																																																							
OpenCorpora со снятой омо- нимией.																																																																											
L	348351	Художественная																																																																									
литература	Да	Проза																																																																									
W	700516	Художественная																																																																									
литература	Нет	Проза																																																																									
P	84646	Художественная литература	Нет	Поэзия																																																																							
N	2175221	Новости	Нет	Новостные статьи с ресурса																																																																							
Lenta.ru																																																																											
 																																																																											
Предиктивный ввод текста на основе факторной модели языка																																																																											

 																																																																											
Таблица 2. Количественные показатели работы																																																																											
метода																																																																											
Корпус	Метод	Точность	KSPC (x100)																																																																								
I	Стандартный	18%	89.8																																																																								
I	Улучшенный	21%	87.7																																																																								
L	Стандартный	17.2%	91.8																																																																								
L	Улучшенный	28.8%	85.4																																																																								
W	Стандартный	15.9%	92.5																																																																								
W	Улучшенный	26.6%	86.8																																																																								
P	Стандартный	12.6%	93.9																																																																								
P	Улучшенный	21.1%	90																																																																								
N	Стандартный	17%	91																																																																								
N	Улучшенный	24.6%	86.4																																																																								

Рисунок 7 Зависимость точности прогноза от числа биграмм																																																																											

 																																																																											
Рисунок 8 Зависимость KSPC от числа биграмм																																																																											
Из графиков очевидно, что наибольший прирост качества предсказания происходит при переходе от чистой и факторной уни- граммной модели языка к простой и фактор- ной биграммной моделям с откатом. При дальнейшем увеличении числа используемых биграмм столь значительного увеличения ка- чества предсказания не происходит. Прирост при переходе от 10000 до 25000 биграмм для улучшенного метода привёл к росту качества предсказания всего на 0.01%. Максимальная точность предсказания для улучшенного ме- тода автодополнения на рассматриваемом новостном корпусе составляет 26% и дости-																																																																											
 																																																																											
гается при числе биграмм в 7500. Традицион- ный метод показывает максимальную точ- ность в 20.4% при числе используемых би- грамм 25000. Значения параметра KSPC для улучшенного метода на 3.8-5.7 пунктов ниже, чем у стандартного метода с откатом.																																																																											
4	Заключение																																																																										
Разработанный метод обладает следующи- ми преимуществами по сравнению со стан- дартным:																																																																											
•	большая точность предсказания для текстов различной тематики;																																																																										
•	меньшее число биграмм, требуемых для достижения максимальной точности предсказания;																																																																										
•	обеспечение согласованности предла- гаемых вариантов завершения по морфологи- ческим параметрам типовых конструкция в русском языке.																																																																										
Основными недостатками разработанного метода являются зависимость качества его работы от обучающего набора данных и зави- симость качества работы метода от точности определения значений морфологических па- раметров введённых слов. Помимо этого, словарь, используемый в работе предложен- ного метода, имеет занимает больший объём памяти, чем словарь, используемый традици- онными биграммным методом, из-за необхо- димости дублирований слов, имеющий оди- наковое символьное представление, но раз- личные наборы значений морфологических параметров.																																																																											
Для улучшения качества предсказания вво- димых слов можно предложить следующие варианты улучшения разработанного способа предиктивного ввода:																																																																											
•	оптимизацию перечня используемых мор- фологических параметров;																																																																										
•	повышение точности работы морфологи- ческого анализатора;																																																																										
•	переход к более сложной модели языка, учитывающей морфологические парамет- ры двух предыдущих слов.																																																																										

Построение тепловой карты на основе точечных данных об активности пользователя приложения																																																																											
введение																																																																											

овышение сложности компьютерных систем обусловливает рост требова- тельности к пригодности их исполь- зования — «юзабилити» (англ. usability) — степени    эффективности,     трудоемкости и удовлетворенности, с которыми продукт может быть использован определенными пользователями при определенном контек- сте использования для достижения опре- деленных целей [1]. Увеличение степени юзабилити заключается в максимизации указанных характеристик, так как каждая из них играет важную роль как в коммерче- ской сфере, так и в некоммерческой [2]. На- пример, чем меньше времени кассир будет тратить на обработку покупок и чем меньше он будет совершать ошибок при этом, тем больше он сможет обслужить в течение дня покупателей, а значит, больше принесет прибыли магазину [3]. Неразрывно связан- ная с юзабилити тема человеко-компью- терного взаимодействия (human-computer																																																																											
 																																																																											
interaction) включена в современные стан- дарты образования в области информаци- онных технологий [4; 5].																																																																											
Методы оценки юзабилити основываются на понимании того, как пользователь ведет себя при взаимодействии с интерфейсом, какие ошибки совершает [6]. Для достиже- ния такого понимания необходимо анализи- ровать данные о его активности (реальном поведении) при работе с программным про- дуктом посредством пользовательского ин- терфейса.																																																																											
Существуют различные виды активно- сти пользователя, но наибольший интерес представляют те, которые могут быть визу- ализированы наиболее наглядным и доступ- ным для анализа образом. К ним относятся точечные данные, например клики мышью и движения курсора мыши, которые обыч- но представляются в виде так называемых тепловых карт. Однако в научных источ- никах не удалось обнаружить методы для их построения. Существуют различные про- граммные продукты, в которых реализованы																																																																											
 																																																																											

49																																																																											
 																																																																											


 																																																																											
подобные методы, но они являются закры- тыми. В данной статье авторы анализируют способы визуализации активности пользо- вателей программных приложений и пред- лагают формальный метод для построения тепловой карты активности пользователя, а также его реализацию в составе открыто- го программного обеспечения.																																																																											

активность пользователя и способы ее визуализации																																																																											
При анализе взаимодействия пользо- вателя с приложением может быть полез- на любая информация о любой активности пользователя [7]. Чем большим объемом информации владеет эксперт, тем больше факторов он сможет учесть. Однако при этом информация должна быть пригодна для последующей обработки и использова- ния. Например, при тестировании юзабили- ти иногда ведут видеозапись происходяще- го на экране и/или поведения пользователя. Это позволяет отследить практически все виды активности, но последующая обработ- ка таких видеозаписей крайне трудоемка, не говоря уже о сложностях с подготовкой испытуемых. Методика видеозаписи обеспе- чивает полноту собираемой информации, но не обеспечивает способа ее хранения в виде статистических данных, с которыми можно производить дальнейшие операции. Возможность сбора данных активности пользователя вне лабораторных условий также важна. Кэтрин Томпсон (Katherine Thompson) вместе со своими  коллега- ми в 2004 г. опубликовала исследование																																																																											
«Здесь, там, везде: Удаленное тестирова- ние юзабилити, которое работает» («Here, there, anywhere: Remote usability testing that works») [8], в котором подробно рассказы- вается о разнице между лабораторными ис- следованиями и сбором статистики в реаль- ных условиях. По результатам исследова- ний был сделан вывод, что даже при самой тщательной подготовке испытуемые будут вести себя в лабораторных условиях иначе, чем в реальной жизни, из-за чего некоторые																																																																											
 																																																																											
ошибки могут быть просто не обнаружены при лабораторных исследованиях.																																																																											
Существуют различные способы визуа- лизации данных активности пользователя, выбор которых зависит как от их состава и специфики, так и от требований к уровню наглядности и детализации, необходимых для проводимого анализа. Таблицы, напри- мер, являются одним из самых простых и ча- сто используемых способов представления структурированных данных, но они не обе- спечивают достаточной наглядности.																																																																											
Наиболее популярны в качестве сред- ства визуализации активности пользовате- ля так называемые тепловые карты, или те- плокарты (англ. heatmap) — графическое представление данных, где хранимые в ви- де матрицы значения отображаются при по- мощи цвета. Подобные системы иерархич- ной кодировки цветов используются в изо- бражениях фракталов и других системах представления данных. Термин «теплокар- та» впервые предложил и официально за- регистрировал как товарный знак разра- ботчик программного обеспечения Кормак Кинни (Cormac Kinney, предприниматель, разработчик) в 1991 г. Он использовал дан- ный термин для описания 2D-изображения, отображающего в режиме реального вре- мени информацию финансового рынка. Интересно, что в 1998 г. право на владение этим товарным знаком было передано ком- пании SS&C TECHNOLOGIES, INC., но она не продлила его, и он перестал действовать в 2006 г. [9].																																																																											
Тепловые карты часто связывают с кар- тограммами — способом картографиче- ского изображения, визуально показываю- щим интенсивность какого-либо показателя в пределах территории на карте. Данные мо- гут наноситься на карту штриховкой различ- ной густоты, окраской определенной степе- ни насыщенности (фоновая картограмма) или точками (точечная картограмма).																																																																											
Биологические тепловые карты обыч- но используются в молекулярной биоло- гии и медицине для представления дан- ных по экспрессии множества генов в раз-																																																																											
 																																																																											

50																																																																											
 																																																																											


 																																																																											
личных образцах, полученных, например, от разных пациентов или в разных услови- ях от одного пациента. Они организованы в виде таблицы, в которой цвет квадрата показывает уровень экспрессии, а столб- цы и строки — различные гены или образ- цы, иерархическая организация которых мо- жет быть изображена в виде дерева на по- лях таблицы.																																																																											
Основной принцип, заложенный во всех сферах применения и способах построе- ния тепловых карт, — это представление различных значений при помощи цвета, что обеспечивает высокий уровень наглядности и ускоряет процесс анализа.																																																																											
Классические тепловые карты использо- вались в тех областях науки, где исходные данные позволяли достаточно легко опре- делить цвет для конкретной ячейки (уровни экспрессии генов, биржевые индексы), об- ласти (картограммы) или точки/пикселя (то- мограмма мозга в медицинских исследова- ниях, температурная карта в метеорологии). Однако применительно к юзабилити стан- дартные методы построения тепловых карт не обеспечивают должный уровень нагляд- ности для всех типов данных. Некоторые ви- ды активности пользователя, такие как кли- ки мышью и шаг движения курсора, услов- но можно назвать «точечными», потому что они фактически связаны с конкретной точ- кой (пикселем) на экране, что представля- ется слишком малой областью по сравне- нию со всем интерфейсом для детального анализа. К сожалению, в научных источни- ках не удалось обнаружить точных методов для построения тепловых карт на основе точечных данных. Существуют различные программные продукты, реализующие по- добные методы, но они являются закрыты- ми [10].																																																																											
В первые годы ХХI в. веб-индустрия на- чала активно применять тепловые карты для отображения данных о кликах, движениях мышью пользователя и переходов по ссыл- кам. В настоящее время трудно определить, кто первым предложил собирать эти данные и использовать их для последующего анали-																																																																											
 																																																																											
за. Существует патент CN 1949259 A «Метод сбора точечной информации путем добавле- ния кода на веб-страницу» («Method for point contacting information of collecting web page by embedding code in web page»), зареги- стрированный в 2006 г. на компанию China Merchants Technology Holdings Co., Ltd [11]. Без привязки к конкретным технологиям он описывает принцип добавления в код веб- страниц логики отслеживания кликов поль- зователя и отправки данных на специальный сервер. Однако в том же 2006 г. появляется израильская интернет-компания ClickTale, которая начинает предлагать схожий веб- сервис для сбора данных о кликах пользо- вателя. В дальнейшем, с повышением инте- реса крупных компаний к подобной анали- тике активности пользователей, появляет- ся множество других аналогичных патентов и различных веб-сервисов. В российском сегменте Интернета популярностью пользу- ется Яндекс.Метрика [12], обладающая ши- роким спектром возможностей для аналити- ки. Данный инструмент позволяет строить различные виды тепловых карт. На рис. 1 приведен пример тепловой карты кликов.																																																																											
Зарегистрирован патент «Методы ви- зуализации данных» («Data visualization methods») [13] на метод создания графиче- ского представления данных в виде тепло- вой карты. Он описывает процесс построе- ния тепловой карты без привязки к области юзабилити и анализу активности пользова- теля, основная сфера его применения — представление числовых данных. В нем под- робно изложен принцип представления от- дельных элементов данных в виде окруж- ностей с градиентом интенсивности цвета от центра к краям и принцип суммирования интенсивности при пересечении окружно- стей. На рис. 2 представлен пример рабо- ты метода при использовании равномерного градиента цвета и частичном пересечении окружностей.																																																																											
При анализе точечных данных активно- сти пользователя указанный метод плохо применим, поскольку он не учитывает неко- торые важные моменты. Во-первых, не ука-																																																																											
 																																																																											

51																																																																											
 																																																																											


 																																																																											
Рис. 1. Тепловая карта кликов, построенная с помощью веб-сервиса Яндекс.Метрика Fig. 1. Click heatmap constructed in Yandex. Metrica web service																																																																											

 																																																																											
зывается, каким образом выбирать началь- ную интенсивность, так как предполагается использование метода для конкретных чис- ловых данных. Во-вторых, при полном пере- крытии одной окружности другой отобра- жается не суммарная интенсивность, а ис- пользуется ее обратное распределение для перекрытой окружности, чтобы она прояви- лась сквозь перекрывающую ее, как пред- ставлено на рис. 3. Это снижает уровень на- глядности при анализе точечных данных ак- тивности пользователя, поскольку наиболь- ший интерес представляет именно общая суммарная интенсивность.																																																																											
 																																																																											
Метод построения тепловой карты																																																																											

Учитывая недостатки и закрытость суще- ствующих методов, авторы предлагают но- вый метод построения тепловой карты для точечных данных об активности пользова- теля приложения. Основная идея предлага- емого метода — при построении тепловой карты должны учитываться как плотность расположения данных, так и определяемые экспертом параметры. Эксперт может опре- делять такие параметры, как дистанция гра- диента интенсивности и дистанция перекры- тия. Расшифруем эти понятия.																																																																											
 																																																																											

 																																																																											
Рис. 2. Пример построения тепловой карты с равномерным градиентом цвета и частичным пересечением окружностей																																																																											
Fig. 2. Example of heatmap constructed with a uniform color gradient and partial intersection of the points																																																																											

52																																																																											
 																																																																											



 																																																																											

Рис. 3. Патент на визуализацию точечных данных в виде тепловой карты, перекрытие точек Fig. 3. The patent for the visualization of point data in the heatmap with overlapped points																																																																											
 																																																																											
Каждый элемент точечной активности представляют в виде окружности с линей- но-убывающим градиентом интенсивности цвета от центра к краям. Радиус окружно- сти (область интенсивности) определяется значением дистанции градиента интенсив- ности (ДГИ) и задается экспертом. Конкрет- ный цвет каждой точки на тепловой карте определяют по значению ее совокупной ин- тенсивности, суммы значений интенсивно- сти всех областей, покрывающих эту точку, и выбранной цветовой схемы (палитры). Ес- ли значение совокупной интенсивности боль- ше 1 (единицы), его необходимо задать рав- ным 1 (единице).																																																																											
Начальное значение градиента интенсив-																																																																											
ности И вычисляется по формуле ? ?    1 ,																																																																											
н	?	???																																																																									
где МКП — максимальное количество пере- крывающих друг друга окружностей на всей области данных. Две или более окружности считаются перекрывающими друг друга, если расстояние между ними попарно меньше значения дистанции пере- крытия (ДП), заданной экспертом. Конеч- ное значение градиента интенсивности Ик всегда равно 0 (нулю).																																																																											
Благодаря расчету Ин на основе МКП обе- спечивается достоверность визуальных дан- ных без потерь. При высокой плотности то- чечных данных наибольшую интенсивность будут иметь отдельные области, фактиче- ски очерченные этими точками, а не те, где сформировалась бы максимальная сово-																																																																											
 																																																																											
купная интенсивность. Например, на рис. 4 изображены две области интенсивности. Для удобства окружности представлены в ви- де треугольников на координатной плоско- сти, где горизонтальная ось — координата (позиция) точки, вертикальная — интенсив- ность.																																																																											
Пока расстояние между двумя точками больше половины ДГИ, совокупная интен- сивность меньше 1 (единицы), так как ин- тенсивность рассчитывается по линейному градиенту. Когда же расстояние становит- ся меньше либо равно половине значения ДГИ, совокупная интенсивность становит- ся больше либо равной 1 (единице) соот- ветственно.																																																																											
В зависимости от заданного экспертом значения ДП до определенного момента до- пускается потеря визуальных данных, так как в большинстве случаев интерес пред- ставляет именно совокупная интенсивность некоторой области интерфейса. Например, клики по кнопке или ее области, а не по кон- кретной точке на ней. Если точки оказыва- ются на расстоянии меньшем либо равном значению ДП, как, например, на рис. 5, про- исходит перерасчет начальной интенсивно- сти для всех точек.																																																																											
На основе значений интенсивности и вы- бранной цветовой схемы (палитры) могут быть построены различные тепловые кар- ты, карты прозрачности и другие разновид- ности карт, выбор конкретной карты зави- сит от специфики проводимого анализа. Под картой прозрачности, например, пони-																																																																											
 																																																																											

53																																																																											
 																																																																											


Дистанция Градиента Интенсивности	Дистанция Перекрытия																																																																										


1,0																																																																											


0,5																																																																											


 																																																																											
0,0																																																																											
 																																																																											

Координата	К1	К2																																																																									
 																																																																											
Рис. 4. Пересечение областей интенсивности точек Fig. 4. Intersection of the points’ intensity regions																																																																											
 																																																																											
мается визуализация, при которой области с наименьшей активностью представлены черным непрозрачным цветом, с увеличе- нием прозрачности — в областях с боль- шей интенсивностью. Возможные цветовые схемы и их разновидности в данной статье не рассматриваются.																																																																											
Таким образом, под тепловой картой то- чечной активности пользователя будет по- ниматься визуализация точечной активности пользователя, построенная на основе вы- численных значений совокупной интенсив- ности для каждой точки и с использованием определенной цветовой схемы.																																																																											
Опишем метод построения тепловой кар- ты точечной активности пользователя, ис- пользуя введенные выше понятия ДГИ, ДП, МКП, начального и конечного значения гра- диента интенсивности.																																																																											
 																																																																											
Метод построения тепловой карты на основе точечных данных																																																																											
об активности пользователя приложения																																																																											

Вход: Точечные данные об активности пользователя (набор точек с указанием их координат на плоскости), значение ДГИ, значение ДП, палитра.																																																																											
Выход: Тепловая карта точечной актив- ности пользователя.																																																																											
Шаг 1. Получить входные данные. Точеч- ные данные активности пользователя мо- гут генерироваться или собираться любым образом, например, с помощью встраива- ния в программный код специальной логики, которая отслеживает клики мышью на ин- терфейсе и записывает информацию о них в файл. Значение ДГИ, значение ДП и па-																																																																											
 																																																																											

Дистанция Перекрытия																																																																											


1,0																																																																											


0,5																																																																											


 																																																																											
0,0																																																																											
 																																																																											

Координата																																																																											
 																																																																											

К1	К2																																																																										
 																																																																											
Рис. 5. Перекрытие областей интенсивности точек Fig. 5. Overlapping of the point’s intensity regions																																																																											

54																																																																											
 																																																																											


 																																																																											
литра определяются экспертом и зависят от специфики проводимого анализа.																																																																											
Шаг 2. Рассчитать значение МКП.																																																																											
Шаг 3. Рассчитать значение Ин по фор-																																																																											
 																																																																											
ния рассчитать совокупную интенсивность как сумму значений интенсивности всех об- ластей, покрывающих эту точку.																																																																											
Шаг 4.2. Если значение совокупной интен-																																																																											
 																																																																											
муле ??																																																																											
 																																																																											
?	1 .																																																																										
???																																																																											
 																																																																											
сивности больше 1, установить значение со- вокупной интенсивности равным 1 (единице).																																																																											
 																																																																											
Шаг 4. Для каждого элемента данных ак- тивности пользователя построить на карте область интенсивности в виде окружности с центром в указанной точке, радиус опре- делить равным значению ДГИ и построить линейный градиент значения интенсивно- сти от центра окружности к краям. Началь- ное значение градиента задать равным Ин, конечное — равным 0 (нулю).																																																																											
Шаг 4.1. Если области интенсивности двух или более окружностей пересекают- ся, для каждой точки в области пересече-																																																																											

Шаг 1. Получить входные данные																																																																											

Шаг 2. Рассчитать значение МКП																																																																											

Шаг 3. Рассчитать значение Ин																																																																											
 																																																																											

Шаг 4. Построить области интенсивности для каждого элемента данных																																																																											


Области интенсивности пересекаются?																																																																											
 																																																																											
Шаг 5. Визуализировать тепловую карту на основании значений интенсивности для каждой точки и указанной палитры.																																																																											
Шаг 6. Отдать на выход тепловую карту.																																																																											
Графическая схема описанного метода представлена на рис. 6.																																																																											
Представленный метод реализован в со- ставе свободного программного обеспечения для сбора и визуализации данных активности пользователей настольных приложений [14]. Пример тепловой карты, построенной в соот- ветствии с методом, представлен на рис. 7.																																																																											










Да																																																																											
 																																																																											

Нет																																																																											


 																																																																											

Значение совокупной интенсивности > 1?																																																																											

Нет																																																																											
 																																																																											

Да																																																																											

Шаг 4.2. Установить значение совокупной интенсивности равным 1																																																																											
 																																																																											


 																																																																											

 																																																																											
Рис. 6. Схема метода построения тепловой карты Fig. 6. Scheme of the heatmap’s construction method																																																																											

55																																																																											
 																																																																											


 																																																																											
При построении тепловой карты с исполь- зованием данного продукта можно настра- ивать такие параметры, как прозрачность (карты), палитра, дистанция градиента (обо- значенная в методе как ДГИ) и дистанция пе- рекрытия. Это позволяет добиться требуемо- го уровня подробности визуализации в соот- ветствии с проводимым анализом. Например, иногда выгоднее представлять каждую точеч- ную активность в виде окружности малого ра- диуса, если проводится анализ процесса ра- боты с конкретными кнопками, а иногда важ- нее понимание используемых областей всего интерфейса в целом и значение ДГИ можно указать достаточно большим.																																																																											

Заключение																																																																											
Разработанный метод построения тепло- вой карты на основе точечных данных об ак- тивности пользователя приложения позво- ляет учитывать как плотность расположения данных, так и определяемые экспертом па- раметры — дистанцию градиента интенсив- ности и дистанцию перекрытия. Предложен- ный метод может быть использован при не- посредственном анализе и оценке юзабилити пользовательских интерфейсов, а также при проведении научных исследований в данной сфере. Разработанное программное обеспе- чение, реализующее данный метод, свободно распространяется через Интернет и доступ-																																																																											
 																																																																											
но на сайте Саратовского государственно- го технического университета имени Гагари- на Ю. А. [15]. Полученные результаты будут использованы в последующих научных ис- следованиях при разработке методов оценки юзабилити настольных приложений на осно- ве данных об активности пользователя.																																																																											

Подготовка данных для кластеризации событий в журналах информационной безопасности																																																																											
Из всех этапов анализа подготовка данных представляется наименее проблемным шагом, но на самом деле требует наибольшего количества ресурсов и времени для завершения. Во многих рассмотренных статьях [1-3] этап подготовки данных указан, как просто этап, без подробного описания, без указания сложных моментов в начале. Зачастую указано, что данные описываются в виде таблиц и все на этом, на самом деле все намного сложнее и трудозатратнее. Данные нередко собираются из различных источников, любой из которых может представлять их в своем виде либо в определенном формате. Поэтому их необходимо подготовить для процесса анализа.																																																																											
Информация, которая получена из витрины данных или корпоративного хранилища из исходных данных, зачастую имеет нечеткую структуру. Но машинное обучение не работает самостоятельно и независимо, как считают большинство пользователей. Для адекватной деятельности этого инструмента, как и любого ИТ-средства, нужны верно определенные начальные данные и инструкции. Не бывает так, что, загрузив все большие накопленные данные различных форматов в алгоритм Machine Learning,																																																																											
 																																																																											
 																																																																											

можно получить корректные результаты на выходе. А также начальные данные часто ненадежны и изменены: они могут содержать аномальные значения (выбросы); в них могут находиться значения, которые выходят за рамки возможных значений (шумы); и отсутствовать значения (пропуски).																																																																											
Притом, нередко появляется задача подготовительной работы начальных данных. К примеру, может стоять задача установления тональности клиентских отзывов, для этого необходимо сперва разделить текст на смысловые выражения (токены), преобразовать слова («оцифровка»), перевоплотить их в числовые векторы. Из-за своеобразия местности, а именно, по причине наличия холмов или подвальных помещений, попадаются в географических данных ошибки установления координат и опечатки в адресах. В числовой последовательности наблюдаются значения, которые выходят за рамки допустимого диапазона, к примеру, цифра 11 в десятибалльной шкале оценок. Кроме того, числовые значения начальных данных могут очень колебаться по абсолютным величинам: от нескольких сотых процентов до десятков тысяч единиц. Такие погрешности изменят показатели моделирования и не разрешат получить модель машинного обучения с удовлетворительным качеством.																																																																											
Стандарты Data Mining не просто так представляют подготовку данных в отдельный этап [4]. Data Preparation – это процесс манипулирования необработанными данными в форме, которая может быть легко и точно проанализирована. Он является кропотливым итеративным, также занимает до 80 % всех затрат времени и ресурсов в жизненном цикле. В него входят задачи обработки исходных («сырых») данных, которые представлены ниже:																																																																											
1.	Выбор данных – выбор признаков (функций или предикторов) и объектов с учетом их актуальности для задач Data Mining, качества и технических ограничений (размер и тип);																																																																										
 																																																																											
 																																																																											

2.	Очистка данных – удаление опечаток, некорректных значений (например, числа в строковом параметре и т.п.), отсутствующих значений (Missing values или NA), устранение дубликатов и разных описаний одного и того же объекта, восстановление уникальности, целостность и логические отношения;																																																																										
3.	Генерация признаков – получение признаков и преобразование их в векторы для модели машинного обучения, а также преобразование для повышения точности алгоритмов машинного обучения;																																																																										
4.	Интеграция – объединение данных из различных источников (информационных систем, таблиц, протоколов и т. д.), в том числе, их агрегация, когда новые значения рассчитываются путем суммирования информации из множества существующих записей;																																																																										
5.	Форматирование – это синтаксические изменения, не меняющие смысла данных, но требуемые инструментами моделирования, такие как сортировка в определенном порядке или удаление ненужных знаков препинания в текстовых полях, обрезка «длинных» слов, округление действительных чисел до целого, и т.п.																																																																										
Подготовка данных включает такие процессы, как:																																																																											
?	Получение;																																																																										
?	Очистка;																																																																										
?	Нормализация;																																																																										
?	Превращение в оптимизированный набор данных.																																																																										
Обычно это табличная форма, подходящая для методов, которые были намечены на шаге проектировки. Перед тем, как использовать методы машинного обучения, нужно конвертировать данные в табличное представление, более распространенное в Machine Learning и Data Mining [5- 6]. Получив файл с «сырыми» данными, к примеру, в формате CSV, специалист поначалу просматривает его, чтоб осознать характер записей																																																																											
 																																																																											
 																																																																											

(строк), также смысл, тип и спектр значений признаков (столбцов). После специалист по данным создает выборку (dataset, набор данных) – выбирает данные, связанные потенциально с проверяемой гипотезой машинного обучения. Почти все трудности могут появиться при возникновении недействительных, многосмысленных либо недостающих значений, повторении полей либо данных, несоответствующих приемлемому интервалу. Исследование данных состоит из предварительного изучения, которое необходимо для понимания типа и смысла полученной информации [7-8]. Вместе с данными, которые были собраны при определении проблемы, такая категоризация описывает, какой способ изучения данных идеальнее всего подойдет для определения модели. Изучение состоит из следующих шагов:																																																																											
?	Обобщение данных;																																																																										
?	Группировка данных;																																																																										
?	Исследование отношений между разными атрибутами;																																																																										
?	Определение моделей и тенденций;																																																																										
?	Построение моделей регрессионного анализа;																																																																										
?	Построение моделей классификации.																																																																										
Для наших данных необходимы первые три шага. Как правило, анализ данных требует обобщающих утверждений об изучаемых данных. Обобщение – это процесс уменьшения количества данных, подлежащих интерпретации, без потери важной информации.																																																																											
Кластерный анализ – метод анализа данных, используемый для поиска групп, объединенных общими атрибутами (также называется группировкой) [9]. Далее выполняется очистка данных: конвертация типов данных, агрегация признаков, заполняются отсутствующие значения, исправляются шумы и выбросы. Нормализация значений применяется к числовым переменным, чтобы привести их в один и тот же диапазон и использовать																																																																											
 																																																																											
 																																																																											

вместе в одной модели Machine Learning. Как правило, нормализация данных означает преобразование исходных числовых значений в новые значения в диапазоне от 0 до 1 на основе начального минимума и максимума [10].																																																																											
Несмотря на работу по правильному сохранению данных для анализа, для каждой конкретной задачи всё равно могут требоваться корректировки значений. Основные манипуляции по подготовке данных проводились относительно значений Даты-Времени, а также IP-адресов источника и объекта. Результат вывода исходной таблицы с датой, приведённой в стандартный формат для работы, представлен на рис. 1.																																																																											
 																																																																											
Рис. 1 – Вывод исходной таблицы																																																																											
Далее, для приведения всех значений к типу целочисленных, значения даты и времени кодируются. IP-адреса очищаются от разделителей и так же приводятся к целочисленному типу. Результат вывода таблицы, приведённой к единому типу данных представлен на рис. 2.																																																																											
 																																																																											
 																																																																											

Рис. 2 – Результат вывода таблицы после корректировки																																																																											
Полученные данные обладают несопоставимыми значениями. Для их использования требуется привести их к общему масштабу. Для этих целей в программе была использована нормализация на стандартное отклонение:																																																																											
? = ?? ? ?																																																																											
?																																																																											
где ? – среднее; ? – стандартное отклонение.																																																																											
Результат вывода датасета, содержащего нормализованные значения, представлен на рис. 3.																																																																											
 																																																																											
Рис. 3 – Результат вывода с нормализованными значениями																																																																											
Полученный набор данных готов для обработки алгоритмами кластеризации.																																																																											

ОЦЕНКА ЭФФЕКТИВНОСТИ ИСПОЛЬЗОВАНИЯ УНИГРАММ ПРИ ИДЕНТИФИКАЦИИ ТЕКСТА																																																																											

Первые исследования по частоте встречаемости букв в текстах на таджикском языке были предприняты в [1] и связывались с определением “наилучшей” раскладки букв на компьютерной кла- виатуре. В [2] изучалась взаимосвязь классической и современной таджикской литературы путем сопоставления распределений частотностей букв различных произведений. Полученный результат – статистическая неразличимость объектов исследований – позволил, с одной стороны, сформировать общую картину частотности букв, свойственную таджикскому языку, а с другой стороны, подсказал необходимость использования иных методов анализа текстов, основанных на частотности букв.																																																																											
В настоящей работе в качестве исследовательского инструмента тестируются критерий одно- родности Н.В. Смирнова о принадлежности двух независимых выборок одному закону распределе- ния [3] и сопутствующий ему метод, использованный в [4,5].																																																																											
1.	Информация о коллекции текстов. Выборка текстов, предназначенная для исследова- тельских целей, так же как и в [2], была представлена произведениями А.Фирдауси, Дж.Руми, С.Айни, М.Турсунзода и Л.Шерали.																																																																										
2.	Обработка литературных данных. В качестве единиц измерения текста используются бу- квенные униграммы. Напомним, что таджикский алфавит А состоит из 35 букв. Одновременно с A																																																																										
 																																																																											
будем использовать также и расширенный алфавит A* ? A ?																																																																											
 																																																																											
“пробел” , которому соответствует																																																																											
 																																																																											
расширенный набор из 36 униграмм, позволяющий учитывать дополнительную информацию как относительно произведений, так и относительно самих униграмм.																																																																											
Процесс обработки литературных данных реализуется в 3 этапа.																																																																											
Этап 1. Вычисления частот встречаемости букв (с учётом и без учёта пробелов) по отдельно- сти для всех упомянутых в п.1 произведений (авторов – 5, у каждого – по 2 произведения, итого – 10 текстов).																																																																											




Адрес для корреспонденции: Косимов Абдунаби Абдурауфович. 735700, Республика Таджикистан, Худжанд, ул. Ленина, 226, Худжандский политехнический институт Таджикского технического университета. E-mail: abdunabi_kbtut@mail.ru.																																																																											
 																																																																											

 																																																																											
На основе полученных данных строятся функции распределения																																																																											
 																																																																											
Fi,n (?)																																																																											
 																																																																											
частотности ?																																																																											
 																																																																											
униграмм (с учётом и без учёта пробела) для авторских текстов, помечаемых индексом i ,																																																																											
i ? 1,…,10 .																																																																											
Этап 2. Вычисление по формуле																																																																											
 																																																																											
D(i, j ) ?																																																																											
 																																																																											
sup| F																																																																											
 																																																																											
(?) ? F																																																																											
 																																																																											
(?)|																																																																											
 																																																																											

(1)																																																																											
 																																																																											
n,m	i,n	j ,m																																																																									
?																																																																											
максимального значения взаимного отклонения функций распределения частотностей униграмм i -																																																																											
 																																																																											
го и j -го произведений, а по ним и статистики																																																																											
 																																																																											

(i, j ) n,m																																																																											
 																																																																											
Н.В.Смирнова (см. [3]) по формуле:																																																																											
 																																																																											

 																																																																											
S (i, j )	?																																																																										
 																																																																											
D(i, j )   ,																																																																											
 																																																																											

(2)																																																																											
 																																																																											
n,m	n,m																																																																										

где n и m – суммарные количества униграмм в i- ом и j - ом произведениях.																																																																											
Одновременно с (1), (2) применяется другой способ обработки данных. Именно, вместо (1) используется формула																																																																											
 																																																																											
d (i, j ) ?																																																																											
 																																																																											
sup| F																																																																											
 																																																																											
(?) ? F																																																																											
 																																																																											
(?)|																																																																											
 																																																																											
(3)																																																																											
 																																																																											
p	i, p	j , p																																																																									
?																																																																											
максимального значения взаимного отклонения функций распределения частотностей униграмм																																																																											
i -го и j -го произведений, а вместо (2) – формула																																																																											

 																																																																											
s(i, j )	?																																																																										
 																																																																											
d (i, j )   ,																																																																											
 																																																																											

(4)																																																																											
 																																																																											
p	p																																																																										


причём в (3) и (4) p – число униграмм (p = 35 – для алфавита А и p = 36 – для алфавита																																																																											
 																																																																											

A* ). Очевид-																																																																											
 																																																																											
но, что (3) и (4) являются упрощениями формул (1) и (2). Они тестируются здесь для того, чтобы по- лучить представление о перспективности их использования.																																																																											
 																																																																											
Этап 3. Проверка нулевой гипотезы H 0																																																																											
 																																																																											
о том, что пара произведений (авторов), помечен-																																																																											
 																																																																											
ных индексами i и j , являются выборками из одной и той же генеральной совокупности. Если речь идёт о произведениях, то они считаются однородными и могут принадлежать одному и тому же авто- ру. Если же речь идёт об авторах, то их однородность понимается в смысле неразличимости соответ- ствующих функций распределений частотностей униграмм.																																																																											
 																																																																											
Утверждение H 0																																																																											
 																																																																											
проверяется путём тестирования неравенства																																																																											
 																																																																											

 																																																																											
(i, j) n,m 																																																																											
 																																																																											
K? ,																																																																											
 																																																																											

(5)																																																																											
 																																																																											

в котором																																																																											
 																																																																											
K? – квантиль А.Н.Колмогорова уровня значимости ? (= 0.05, 0.01, 0.001).																																																																											
 																																																																											

 																																																																											
Если (5) выполняется для заданного уровня значимости ? , то гипотеза H 0																																																																											
 																																																																											
об “однородно-																																																																											
 																																																																											
сти” i и j -объектов отвергается. Справедливой, с уровнем значимости 1? ? , становится конкури-																																																																											
 																																																																											

рующая (альтернативная) гипотеза																																																																											
 																																																																											
H1 , противоречащая																																																																											
 																																																																											
H 0 : i и j - объекты “не однородны”.																																																																											
 																																																																											
Если имеет место неравенство																																																																											
 																																																																											



(i, j) n,m 																																																																											
 																																																																											

K? ,																																																																											
 																																																																											


(6)																																																																											
 																																																																											
то принимается гипотеза H 0																																																																											
 																																																																											
об “однородности” i и j - объектов.																																																																											
 																																																																											
Аналогичные неравенства привлекаются для принятия решений по результатам применения формул (3) и (4) с необходимыми оговорками.																																																																											
4.	Результаты 1-го этапа о распределениях частотности униграмм отдельных произведений и их авторов здесь не показаны: определенное представление о них можно получить из [2], где приво- дятся списки частотностей униграмм таджикского языка с учётом и без учёта пробела.																																																																										
Результаты 2-го этапа показаны в таблицах 1 и 2. В каждой ячейке даются два числа – верхнее число, подсчитанное по формулам (1) и (2), и нижнее, подсчитанное по формулам (3) и (4). Отметим, что в ячейках на главной диагонали представлена информация об отношениях между произведения- ми одного автора, а во всех других ячейках – информация об отношениях между произведениями																																																																											
различных авторов.																																																																											
Результаты 3-го этапа связаны с проверкой нулевой гипотезы для уровня значимости ? =																																																																											
 																																																																											
0.001, которому соответствует квантиль А.Н.Колмогорова со значением																																																																											
 																																																																											
K? = 1.95 . В этом случае																																																																											
 																																																																											
для всех статистик Н.В.Смирнова из табл. 1, расположенных на главной диагонали, кроме ячейки [Айни “Одина”-Айни “Ањмади Девбанд”], выполняется неравенство (6). Согласно критерию Н.В.Смирнова, это эквивалентно утверждению о том, что произведения одного и того же автора (кроме Айни) однородны, то есть подчиняются одному и тому же распределению частотностей уни- грамм, а произведения Айни оказываются неоднородными.																																																																											
 																																																																											

Значения статистик S (i, j)																																																																											
 																																																																											

Н.В.Смирнова и показателя s(i, j)																																																																											
 																																																																											
Таблица 1 для униграмм без учёта пробела																																																																											
 																																																																											

Авторы и																																																																											
произведения																																																																											
Фирдауси Беж.&Ман.	Руми																																																																										
Дафтари Аввал	Турсунзода Садои Осиё	Шерали Катибањо	Айни Ањмади Девбанд																																																																								
Фирдауси																																																																											
Рустам ва Сўњроб																																																																											
1.2321 0.0278																																																																											
7.2647 0.1307																																																																											
2.2834 0.1486																																																																											
3.0900 0.1164																																																																											
7.4661 0.1999																																																																											
Руми Дафтари																																																																											
Дуввум																																																																											
6.8363 0.1301																																																																											
1.5539 0.0208																																																																											
3.1030 0.1985																																																																											
3.3708 0.1203																																																																											
10.2665 0.2454																																																																											
Турсунзода Њасани																																																																											
Аробакаш																																																																											
4.1970 0.1112																																																																											
5.6928 0.1296																																																																											
1.8178 0.1210																																																																											
2.6982 0.1084																																																																											
4.4244 0.1335																																																																											
Шерали																																																																											
Суханреза	3.4528 0.1215	3.5771 0.1161	1.2437 0.0876	1.1820 0.0548	5.4324 0.2066																																																																						
Айни Одина	8.9235 0.1804	13.9363 0.2092	2.5448 0.1637	4.1592 0.1512	2.5127 0.0625																																																																						
 																																																																											

Что касается статистик Н.В.Смирнова, расположенных вне главной диагонали табл. 1, то для них, кроме ячейки [“Шерали Суханреза – Турсунзода Садои Осиё”], выполняется неравенство (5). Последнее эквивалентно утверждению о том, что произведения разных авторов не однородны, то есть принадлежат различным распределениям частот встречаемости униграмм, а указанные произве- дения Шерали и Турсунзода оказываются однородными.																																																																											
Таким образом, критерий Н.В.Смирнова из 25 случаев лишь в двух случаях даёт ошибочный результат. Следовательно, эффективность применение критерия оценивается в 92%.																																																																											
Идентификация авторства по формулам (3), (4) также оказывается вполне приемлемой, если вместо (5) и (6) воспользоваться их аналогами:																																																																											
 																																																																											
(i, j)	k,																																																																										

(i, j)	k,																																																																										
 																																																																											

(7)																																																																											


(8)																																																																											
 																																																																											

полагая при этом, что k = 0.07.																																																																											
В таком случае с выполнением неравенства (7) будем связывать неоднородность i и j произ- ведений, а с неравенством (8) – напротив, их однородность. Применяя это правило к нижнему ряду чисел табл. 1, устанавливаем, что (7) выполняется для всех ячеек, расположенных вне главной диаго- нали, а (8) нарушается лишь в одной ячейке на пересечении произведений Турсунзода. В рассматри- ваемом случае эффективность метода составляет 96 % и оказывается даже выше, чем для критерия Н.В.Смирнова.																																																																											
 																																																																											

Значения статистик S (i, j)																																																																											
 																																																																											

Н.В.Смирнова и показателя s(i, j)																																																																											
 																																																																											
Таблица 2 для униграмм с учетом пробела																																																																											
 																																																																											

Авторы и																																																																											
произведения																																																																											
Фирдауси Беж.&Ман.	Руми Дафтари																																																																										
Аввал	Турсунзода Садои Осиё	Шерали Катибањо	Айни Ањмади Девбанд																																																																								
Фирдауси																																																																											
Рустам ва Сўњроб																																																																											
1.2491 0.0258																																																																											
6.7251 0.1108																																																																											
2.8395 0.1708																																																																											
2.7163 0.0939																																																																											
8.2945 0.2044																																																																											
Руми Дафтари																																																																											
Дуввум																																																																											
6.4865 0.1131																																																																											
1.2442 0.0152																																																																											
3.8365 0.2269																																																																											
3.5817 0.1173																																																																											
10.4503 0.2303																																																																											
Турсунзода Њасани																																																																											
Аробакаш																																																																											
4.4826 0.1091																																																																											
6.7612 0.1415																																																																											
1.5287 0.0941																																																																											
2.5825 0.0953																																																																											
4.2710 0.1188																																																																											
Шерали Суханреза	3.5615 0.1152	3.9132 0.1168	1.5990 0.1041	1.3403 0.0571	5.1573 0.1807																																																																						
Айни																																																																											
Одина	9.5962 0.1782	14.7053 0.2029	2.2189 0.1320	3.9900 0.1331	2.4532 0.0563																																																																						

Анализ табл. 2 (с учетом пробела), хотя и повторяет результаты анализа табл.1 (без учета пробела), тем не менее проявляет более высокую чувствительность в распознавании авторства текста: для ячейки “Айни Одина – Айни Ањмади Девбанд” при учете пробела значение статистики Н.В.Смирнова понизилось со значения 2.5127 до 2.4532, а для ячейки “Шерали Суханреза – Турсун- зода Садои Осиё”, напротив, повысилось с 1.2437 до 1.5990.																																																																											
 																																																																											

Что касается метода, основанного на формулах (7), (8), то его эффективность остается преж- ней, на уровне 96%. Единственная ошибка по-прежнему связана с ячейкой на пересечении произве- дений Турсунзода.																																																																											
5.	Заключение. Из полученных результатов извлекается следующее статистическое																																																																										
Утверждение. Критерий Н.В.Смирнова и его модифификатор позволяют по частотности знаков таджикского алфавита (букв с пробелами и без них) с достаточно высокой степенью эф- фективности идентифицировать произведения поэтов классической таджикско-персидской лите- ратуры, а также различных авторов современной таджикской поэзии и прозы.																																																																											
Высказанное утверждение опирается на результаты обработки ограниченного по объёму ма- териала, который, тем не менее, как по составу авторов, так и по списку использованных произведе- ний представляет собой представительную выборку из генеральной совокупности изучаемой пред- метной области.																																																																											
Сделанный вывод согласуется с аналогичными результатами для русского языка [6].																																																																											

О ПОДДЕРЖКЕ ПРИНЯТИЯ РЕШЕНИЯ В ТЕХНОЛОГИИ DATA MINING																																																																											
В настоящее время деятельность любого предприятия (коммерческого, производственно- го, научного и т.д.) сопровождается регистраци- ей и записью всех подробностей его функцио- нирования. Эффективное использование этой информации связано с продуктивной перера- боткой данных. Специфика современных требо- ваний к такой переработке следующая:																																																																											
•	данные являются разнородными (количе- ственными, качественными, текстовыми);																																																																										
•	результаты должны быть конкретны и по- нятны;																																																																										
•	инструменты для обработки данных долж- ны быть просты в использовании.																																																																										
Традиционная математическая статистика при обработке данных использует концепцию усреднения по выборке. Практика показывает, что эта процедура недостаточна для принятия решений в различных сферах человеческой де- ятельности, требующей обнаружения в данных ранее неизвестных, нетривиальных, практиче- ски полезных закономерностей. Исследователь- ский аспект изучения закономерностей в данной предметной области объектов и их отношений связан с использованием средств информацион- ных и коммуникационных технологий.																																																																											
В основу современной технологии Data																																																																											
Mining (discovery-driven data mining) положена концепция шаблонов, отражающих фрагменты																																																																											
 																																																																											
многоаспектных взаимоотношений в данных. Эти шаблоны представляют собой закономер- ности, свойственные подвыборкам данных, которые могут быть компактно выражены в понятной человеку форме. Поиск шаблонов производится методами, не ограниченными рамками априорных предположений о струк- туре выборки и виде распределений значений анализируемых показателей.																																																																											
Data Mining является мультидисциплинар- ной областью, возникшей и развивающейся на базе достижений прикладной статистики, рас- познавания образов, методов искусственного интеллекта, теории баз данных и др. (рис. 1). От- сюда обилие методов и алгоритмов, реализован- ных в различных действующих системах Data Mining. Многие из таких систем интегрируют в себе сразу несколько подходов. Как правило, в каждой системе имеется какая-то ключевая ком- понента, на которую делается главная ставка.																																																																											
Выделяют пять стандартных типов законо- мерностей, которые позволяют выявлять ме- тоды Data Mining: ассоциация, последователь- ность, классификация, кластеризация и про- гнозирование.																																																																											
Далее остановимся на классификационном анализе, включающем кластерный и дискри- минантный анализ.																																																																											
Кластерный анализ – это совокупность																																																																											
 																																																																											

 																																																																											
Распознавание образов																																																																											
Нейросети																																																																											

Хранилища данных																																																																											
Эффективные вычисления																																																																											
 																																																																											



Data Mining																																																																											
 																																																																											
Статистика Теория баз данных																																																																											
Экспертные системы Визуализация данных																																																																											
Информационный поиск																																																																											
 																																																																											
Оперативная аналитическая обработка																																																																											
Рис. 1. Data Mining — мультидисциплинарная область																																																																											

 																																																																											
многомерных статистических процедур, кото- рая позволяет упорядочить объекты по одно- родным группам.																																																																											
Решение задачи кластерного анализа выпол- няется в следующей последовательности:																																																																											
1.	Формируются выборки для анализа.																																																																										
2.	Выбирается	совокупность	признаков, характеризующих объект.																																																																								
3.	Выбираются меры сходства (расстояния) между объектами и производится их расчет.																																																																										
4.	Формируются кластеры.																																																																										
 																																																																											
при изоморфном – в однородные группы будут включаться те компании, в которых структуры распределения прибыли сходны.																																																																											
В обоих способах признаки сначала преобра- зуют таким образом, чтобы не было единиц из- мерения и размах шкалы был одинаковым.																																																																											
Для нормирования шкал необходимо выпол- нить следующие преобразования. При изотони- ческом разбиении сначала каждое значение при- знака заменяется на вычисленное по формуле:																																																																											
n																																																																											
 																																																																											
5.	Проводится анализ полученной инфор- мации.																																																																										
 																																																																											
Vij ? xij																																																																											
 																																																																											
? xij ,																																																																											
i?1																																																																											
 																																																																											
Большинство алгоритмов кластерного ана- лиза относят к так называемым агломератив- ным процедурам, которые сначала объединяют в группы самые близкие объекты, а затем к ним																																																																											
 																																																																											
где xij – значение j-го признака для i-го объекта.																																																																											
После этого каждому объекту ставится в соответствие одно число, вычисленное по фор- муле:																																																																											
 																																																																											
присоединяют более дальние.																																																																											
Рассмотрим процедуру кластерного ана- лиза, предлагаемую для обработки данных. Существуют две разновидности, которые мо- гут давать различное разбиение на кластеры. Выбирать подходящую разновидность следует исходя из постановки задачи. Если это невоз- можно, необходимо провести разбиение двумя																																																																											
 																																																																											
?i ? ?Vij .																																																																											
j ?1																																																																											
Расстояния между двумя объектами опре-																																																																											
деляют по формуле:																																																																											
dij ? ?i ? ? j .																																																																											
При изоморфном разбиении сначала вы- полняют нормирование шкал по формуле:																																																																											
 																																																																											
способами и попытаться определить, какой из них более соответствует фактически сущест-																																																																											
 																																																																											
Zij																																																																											
 																																																																											
? Vij																																																																											
 																																																																											
?Vij .																																																																											
j ?1																																																																											
 																																																																											
вующим структурам данных. При изотониче- ском разбиении группы объектов состоят из																																																																											
однородных по уровню значений, а при изо-																																																																											
 																																																																											
Расстояния между двумя объектами опре- деляют по формуле:																																																																											
m																																																																											
 																																																																											
морфном в группы включаются объекты, близ- кие по структуре, т.е. те, в которых пропорции																																																																											
 																																																																											
dik ?																																																																											
 																																																																											
??Zij																																																																											
j ?1																																																																											
 																																																																											
? Zik																																																																											
 																																																																											
?2 .																																																																											
 																																																																											
признаков мало отличаются. Это означает, что различные способы разбиения могут давать различное объединение по группам. Напри- мер, у нас есть данные, которые характеризу- ют распределение прибыли фирм на расши- рение производства, научные исследования, социальные выплаты и пр. Тогда при изото- ническом разбиении группы будут состоять из фирм, в которых уровни прибыли близки, а																																																																											
 																																																																											
В изоморфном преобразовании расстояние будет минимальным в том случае, когда век- торы коллинеарны, и максимальным, если они перпендикулярны.																																																																											
После определения расстояний возможно разбиение на группы с помощью метода ближай- шего соседа. Метод заключается в следующем: сначала для первого объекта находится ближай- ший и объединяется с ним в один кластер. Затем																																																																											
 																																																																											
для второго объекта ищется ближайший сосед и объединяется с ним в другой кластер и т.д. В случае, если ближайший сосед уже находится в одном из кластеров, происходит присоединение исследуемого объекта к нему. Таким образом образуются начальные кластеры.																																																																											
На следующем этапе обычно выполняют построение дендритов и определение связно- сти в системе кластеров. Это позволяет объ- единить первоначальные кластеры в более сложные структуры, которые в большей степе- ни отвечают их реальной форме.																																																																											
Дискриминантный анализ относится к мето- дам классификаций многомерных наблюдений при наличии обучающих выборок (в отличие от кластерного анализа, осуществляющего класси- фикацию автоматически – без обучения). Его цель состоит в идентификации новых объектов и отнесении их к уже имеющимся группам или совокупностям.																																																																											
Пусть имеется п наблюдений, характери- зующих набор из к признаков. Тогда каждое наблюдение представляет собой случайный																																																																											
вектор x = (x , x , … x )Т. Задача дискримина-																																																																											
 																																																																											
без дорогостоящих специализированных про- грамм для обработки данных.																																																																											
Далее в качестве примера проведем класси- фикационный анализ прогноза развития потре- бительской кооперации на 20xx год (таблица) с использованием программ для кластерного (Приложение 1) и дискриминантного анализа (Приложение 2).																																																																											
Пример кластерного анализа. Первым эта- пом работы программы является вычисление расстояний между объектами (рис. 5).																																																																											
На следующем этапе, с использованием найденных расстояний, происходит объеди- нение объектов в кластеры (рис. 2):																																																																											
 																																																																											
1	2	k																																																																									
 																																																																											
ции состоит в разбиении всего множества ре- ализаций рассматриваемой многомерной вели- чины на некоторое число групп (областей) Ri																																																																											
(i=1, 2, ..., l) и последующем отнесении нового																																																																											
наблюдения к одной из них, используя некое решающее правило. При этом информация об истинной принадлежности объекта считается недоступной или требует чрезмерных матери- альных и временных затрат.																																																																											
В ходе процедуры автоматически вычи- сляются функции классификации, предназна- ченные для определения той группы, к кото- рой наиболее вероятно принадлежит новый объект. Количество функций классификации равно числу имеющихся групп. Наблюде- ние считается принадлежащим той группе (совокупности), для которой получено наи- высшее значение функции классификации или наивысшее значение апостериорной ве- роятности – вероятности, с которой новое наблюдение принадлежит к этому классу, вычисленное на основе априорной вероятно- сти и расстояния Махаланобиса. Расстоянием махаланобисского типа называют естествен- ную меру отдаленности двух объектов друг от друга, если наблюдения извлекаются из нор- мальных генеральных совокупностей с одной и той же матрицей ковариации [4].																																																																											
Один  из  методов  автоматизированного																																																																											
классификационного анализа данных основан на использовании программной среды Excel [4]. Достоинством такого подхода является возможность получения искомого результата																																																																											
 																																																																											

Рис. 2. Начальные кластеры																																																																											
При наличии большего числа показателей или более сложной структуры данных возмож- но образование большего числа кластеров. Путем расчета межкластерных расстояний возможно их дальнейшее объединение в более крупные структуры (рис. 3).																																																																											
Таким образом, исходя из рис. 3. с учетом значений, приведенных на рис. 2, получаем следующие кластеры:																																																																											
1.	Архангельский, Вологодский, Мурман- ский, Карельский, Коми, Ярославский, Калуж- ский, Ивановский.																																																																										
2.	Ленинградский, Псковский, Тверской, Тульский.																																																																										
3.	Кировский, Чувашский, Пермский, Башкирский, Удмуртский, Татарский.																																																																										
Программа позволяет провести анализ вли- яния показателей деятельности потребитель- ских союзов на состав получаемых кластеров (аналог факторного анализа).																																																																											
Пример дискриминантного анализа. Рас- смотрим пример классификации Ивановско- го и Татарского потребсоюзов при наличии обучающей выборки из предыдущего разде- ла. Заполним рабочий лист Microsoft Excel согласно рис. 6. Столбец Группа принадлеж- ности наблюдения относит наблюдения к тому или иному кластеру (использовано де- ление на кластеры, полученное в кластерном анализе).																																																																											
 																																																																											
Основные показатели прогноза развития потребительской кооперации на 20xx год																																																																											

№ п/п	Наимено- вание потреб- союзов	Весь розничный																																																																									
товарооборот	Объем бытовых услуг, млн руб.	Производство основных видов промышленной продукции	Закупки основных видов сельскохозяйственной продукции																																																																								
		млн руб.	в т. ч. оборот обще-																																																																								
ственного питания, млн руб.		хлеб, тыс., т	колбасные изделия, т	кондитерские изделия, т	консервы, туб	безалкогольные напитки, тыс. дкл	пиво, тыс. дкл	Мясо, т	Молоко т	Яйца, млн шт.	Картофель, т	Овощи, т	Плоды, т																																																														
1	Архангель-																																																																										
ский	1900	130	7	18,7	610	900	130	20	12	1800	1000	11,7	5000	1830	650																																																												
2	Вологодский	2550	140	5	22,8	600	1100	15	110		2400	4000		8000	1000	80																																																											
3	Мурманский	145	12	1	1,3		15				110	40	0,9	700	540	100																																																											
4	Карельский	630	30	2	3,5	250	200		8		440	500	40	1000	400	380																																																											
5	Коми	530	28	2	2,4		75		7		500	1500	2,5	5800	620	100																																																											
6	Ленинград-																																																																										
ский	1900	150	1,5	4	1100	300	9500	10		5000	2000	12	5000	2000	1100																																																												
7	Псковский	3150	225	10	32	160	1600		240		2300	7000	23	8400	2300	1200																																																											
8	Тверской	1950	150	6	21	240	1200	1000	300	45	2000	8000	18	8000	4000	800																																																											
9	Калужский	860	68	7	12	410	600	170	40		2200	4000	5	7500	2400	520																																																											
10	Тульский	850	45	3	12,5	1000	400	7750	60		3750	3000	8	8000	4500	950																																																											
11	Ярославский	1600	95	6	8		800		8		2200	2000	11	3000	3000	1300																																																											
12	Кировский	3800	450	8	44	730	1730	700	400	33	3000	5000	22	8000	4000	1100																																																											
13	Чувашский	2550	310	10	23,5	2000	2700	1900	920	12	6300	20000	12,1	11000	5000	1200																																																											
14	Пермский	1850	115	5	25	140	900	3900	100	200	3000	5000	5,9	17000	8000	450																																																											
15	Башкирский	3000	300	20	33	1000	1600	1500	600	60	11000	25000	15	20000	5000	8000																																																											
16	Удмуртский	2150	240	15	22	1500	3000	3000	560		6200	13000	10,5	13500	3500	250																																																											
17	Татарский	3100	300	29	40	1500	1900	1900	510		6500	20000	15	19000	5000	1000																																																											
18	Ивановский	560	30	1,5	6,7		200	2000	30		900	1000	4,5	1000	1000	700																																																											

а Татарский – к третьей. Данный результат соответствует полученному при кластерном анализе, а также согласуется с выводами ра- боты, выполненной в программной среде Sta- tistica.																																																																											


 																																																																											


Рис. 3. Матрица расстояний между начальными кластерами																																																																											

В результате вычислений с использовани- ем программы (рис. 4) получаем, что Иванов- ский потребсоюз относится к первой группе,																																																																											
 																																																																											
Рис. 4. Результат работы программы дискриминантного анализа																																																																											
В заключение отметим, что настоящая схема классификации может быть использо- вана для анализа инвестиционной привлека- тельности предприятий потребительской ко- операции.																																																																											
 																																																																											

 																																																																											
Рис. 5. Матрица расстояний между объектами																																																																											

Рис. 6. Начальные данные для дискриминантного анализа																																																																											

Обзор методов предиктивного ввода текста																																																																											
1	Актуальность проблемы																																																																										
Автодополнение и предиктивный ввод текста предназначены для увеличения скорости и облегчения набора текста. Необходимость в наличии и развитии данных средств резко выросла с появлением мобильных телефонов и устройств с сенсорным экраном, на которых является затруднительным быстрый и безошибочный набор текста.																																																																											
Существующие подходы к решению проблемы автодополнения текста основаны на использовании словарей, содержащих слова и вероятность их встречи в тексте. Данный подход показывает свою эффективность при использовании с аналитическими языками, характеризуемыми малым числом словоформ. Однако при использовании	данного	метода автодополнения текста с синтетическими флективными языками (например, русским), имеющими большое число словоформ, качество предсказания падает, поскольку метод не учитывает морфологические параметры вводимых слов. Частично данная проблема может быть решена путём использования биграмм, но значительный рост размера словаря мешает использованию биграмм для повышения качества предсказания.																																																																									
В данной работе будет проведён анализ																																																																											
возможных путей решения упомянутых проблем	с	учётом	фактора																																																																								
 																																																																											
2	Обзор существующих методов автодополнения текста																																																																										
Задача автодополнения вводимого текста состоит в предсказании вводимого пользователем слова по его началу.																																																																											
Назовём	классом	согласования словоформы совокупность её граммем, определяющих			либо определяемые значениями		граммем		словоформ, синтаксически связанных с данной. Рассмотрим возможные классы согласования на примере наречий и прилагательных.																																																																		
Наречия, вступая в подчинительную связь с другими частями речи, не изменяют свою форму и, следовательно, относятся к одному классу согласования.																																																																											
Прилагательные,	вступая	в подчинительную связь, согласуются с главным словом в трёх грамматических категориях: роде, числе и падеже. Таким образом, число классов согласования прилагательных определяется числом различных наборов значений категорий рода, числа и падежа.																																																																									
Для остальных частей речи число классов согласования определяется по аналогии.																																																																											
2.1	Стохастические методы																																																																										
Для решения задачи автодополнения обычно используются стохастические методы.																																																																											
Для предсказания окончания одного слова используется методы, основанные на использовании марковских моделей [Daniel, James, 2000].																																																																											
Для предсказания последовательностей слов используется модели, основанные на N- граммах.																																																																											
Для определения наиболее вероятного продолжения последовательности wn слов w1…wn-1 используются вероятности встречи последовательности w1…wn:																																																																											
 																																																																											
производительности и	будет предложен подход, который позволит повысить качество																																																																										
 																																																																											
P(wn|w1. . . wn?1																																																																											
 																																																																											
) = 	P(w1. . . wn)	.																																																																									
?n?1 P (w1|w1. . . wi?1)																																																																											
 																																																																											
автодополнения	текста	на	флективном																																																																								
русском языке.																																																																											
 																																																																											
К	сожалению,	собрать	статистику																																																																								
взаимного	употребления		длинных последовательностей	слов	довольно																																																																						
 																																																																											
непросто. Это потребует наличия большого корпуса исходных текстов и значительного объёма памяти для хранения собранной статистики.	Поэтому	используется упрощённая модель, в которой считается, что																																																																									
вероятность того, что слово w продолжит последовательность w …w зависит только от																																																																											
 																																																																											
score = 	1	.																																																																									
log5(1+n)																																																																											
Основание	логарифма	выбрано экспериментальным путём [Stocky, Faaborg, Lieberman, 2004].																																																																									
Из полученных пар «словоформа — вес» строится   словарь,   используемый   для																																																																											
 																																																																											
1	n	предложения вариантов следующего слова во																																																																									
 																																																																											
N предыдущих слов в последовательности.																																																																											
P(wn|w1. . . wn?1) ? P(wn|wn?N. . . wn?1).																																																																											
Из-за большого объёма необходимой для																																																																											
хранения N-грамм памяти на практике используются	смешанные	модели, использующие униграммы для всех слов языка и биграммы для пар наиболее часто встречаемых слов.																																																																									
Для языков флективного строя использование такой модели может привести к резкому снижению качества предсказания за счёт потери согласованности по морфологическим параметрам пар слов, не входящих	в	группу	наиболее распространённых.																																																																								
Помимо этого, следует обратить внимание на особенность работы механизмов предиктивного ввода, основанных на использовании N-грамм. Поскольку метод учитывает частоты взаимных употреблений лексем, в результате работы механизма будут предлагаться варианты завершения слов, соответствующие известным механизму шаблонным фразам.																																																																											
2.2	Метод commonsense																																																																										
Метод commonsense [Stocky, Faaborg, Lieberman, 2004] похож на метод биграмм, однако имеет существенные отличия в механизме	получения	возможных продолжений вводимой фразы и метода оценки вероятности встречи предлагаемых вариантов.																																																																									
Вместо использования словаря метод commonsense предполагает использование базы знаний (семантической сети, содержащей  знания  в  виде  утверждений																																																																											
«теннис — это вид спорта» и «для игры в теннис требуется ракетка»).																																																																											
После ввода слова w получает из базы знаний семантический контекст слова w и присваивает каждому слову в утверждении (где n – порядковый номер утверждения) вес:																																																																											
 																																																																											
вводимой пользователем фразе.																																																																											
Результаты исследований [Stocky, Faaborg, Lieberman, 2004] показывают небольшое преимущество данного метода над статистическими (рис. 1), однако метод не является адаптированным для использования с языками флективного строя.																																																																											


Рис. 1. Сравнение точности предсказания методом commonsense и различными статистическими методами																																																																											
2.3	Метод reflective text																																																																										
Метода reflective text [Sandnes, 2015] реализует предсказание окончания вводимого слова путём предсказания раскрытия введённого пользователям сокращения. Для работы метода используется словарь.																																																																											
Для начала работы метода требуется ввод трёх и более символов. Введённые символы сравниваются со словами словаря с использованием алгоритма наибольшей общей подпоследовательности (LCS) [Hunt, Szymanski, 1977]. В качестве возможных завершений предлагаются слова словаря, содержащие	запрошенную последовательность. Если пользователь явно не выбрал правильное завершение вводимой им последовательности символов, система использует кратчайший из вариантов. При наличии нескольких вариантов предпочтение отдаётся тем, что начинаются с введённой пользователем последовательности.																																																																										
Рассмотрим работу алгоритма для норвежского языка (рис. 2).																																																																											
 																																																																											
 																																																																											
Рис. 2. Пример работы метода reflective text																																																																											
 																																																																											
Пользователь собирается ввести фразу «her faller oljeprisen og kronekursen» (падают цены на нефть и курс кроны).																																																																											
До начала ввода под курсором отображаются пустые квадратные скобки, обозначающие отсутствие предлагаемых вариантов.																																																																											
Пользователь вводит слово «her» и видит список предлагаемых вариантов.																																																																											
Слово «her» является первой альтернативой и будет выбрано при нажатии клавиши «пробел».																																																																											
Пользователь вводит последовательность																																																																											
«falr».																																																																											
При	нажатии	клавиши	«3» последовательность «falr» заменяется на слово «faller» и вводится пробел.																																																																								
Пользователь вводит последовательность																																																																											
«ljprn».																																																																											
Слово «oljeprisen» является первой альтернативой и будет подставлено при нажатии на клавишу «пробел».																																																																											
Пользователь вводит слово «og» и последовательность «krnkrs».																																																																											
 																																																																											
При нажатии на клавишу «2» последовательность «krnkrs» заменяется на слово «kronekuersen» и вводится пробел.																																																																											
Исследования	производительности [Sandnes, 2015] были проведены для словаря английского языка, содержащего 45374 словоформы, и словаря норвежского языка, содержащего 181731 словоформу. Для обработки одного нажатия на клавишу и подготовки списка возможных вариантов раскрытия сокращения в среднем потребовалось 109 мс (среднеквадратичное отклонение 67.4) для словаря английского языка и 395 мс (среднеквадратичное отклонение 379.5) для норвежского языка.																																																																										
3	Выбор наиболее подходящего алгоритма для русского языка																																																																										
Рассмотренные выше алгоритмы обладают определёнными преимуществами и недостатками.																																																																											
К достоинствам алгоритма, основанного на использовании  N-грамм,  стоит  отнести																																																																											
 																																																																											
простоту	его	реализации, приспосабливаемость к любым языкам, выдачу семантически подходящих вариантов, возможность обучения метода на любом корпусе. К недостаткам данного метода относится значительный объём памяти, необходимой для хранения словарей.																																																																									
Метод commonsense представляет интерес, однако используемая в нём база знаний обладает ограниченным размером и не может быть пополнена пользователем.																																																																											
Практическая применимость метода reflective text вызывает существенные сомнения, поскольку необходимость постоянного выполнения поиска возможных вариантов методом LCS вызывает существенные	проблемы	с производительностью.																																																																									
На основании вышесказанного считается практичным производить разработку метода автодополнения текста на русском языке на основе метода N-грамм.																																																																											
4	Структуры данных, используемые в методах автодополнения																																																																										
Для представления словаря в памяти возможно использование одной из следующих структур данных:																																																																											
•	таблиц;																																																																										
•	конечных автоматов;																																																																										
•	префиксных деревьев.																																																																										
Наиболее простым является представление словаря в виде пар (слово, вероятность встречи). К недостаткам данного метода относится большое время поиска наиболее вероятного продолжения для заданной строки и большой занимаемый объём памяти.																																																																											
Представление словаря в виде конечного автомата позволяет значительно уменьшить потребление оперативной памяти и позволяет быстро проверять наличие слова в словаре, но в связи с особенностями реализации словаря невозможно	хранение	различной информацией, связанной с отдельными словами в словаре. Данный недостаток связан с тем, что при использовании конечного автомата допускается наличие общего суффикса у элементов словаря, имеющих различный префикс. Эта особенность данной структуры данных позволяет значительно сократить требуемый объём памяти, но приводит к потере информации о пути, по которому была достигнута конечная вершина автомата,   что   делает   невозможным																																																																									
 																																																																											
размещение в ней информации, уникальной для каждой словоформы.																																																																											
Наиболее оптимальными структурами для представления словаря при решении задачи автодополнения текста являются префиксные деревья. Префиксные деревья требуют меньшего объёма памяти, чем таблицы, позволяют осуществлять поиск наиболее вероятного окончания слова за минимальное время и дают возможность хранить различную информацию о слове. Для увеличения эффективности хранения данных можно использовать различные виды префиксных деревьев [Hsu, Ottaviano, 2013].																																																																											
5	Существующие механизмы автодополнения																																																																										
Рассмотрим существующие реализации методов автодополнения текста на примере latin input method в операционной системе Android.																																																																											
Latin input method представляет собой виртуальную клавиатуру с функцией предиктивного ввода, используемую для языков с консонантными и консонантно- вокалическими алфавитами.																																																																											
Для знакомства с реализацией механизма автодополнения проведём анализ исходного кода пакета LatinIME [Исходный код ОС Android].																																																																											
Для представления словаря в оперативной памяти	используется	префиксное		дерево. Latin input method позволяет использовать для предсказания		 пользовательского				ввода модель,		использующую	униграммы	и биграммы. Однако для уменьшения объёма требуемой памяти биграммы используются только для наиболее распространённых пар словоформ. Метка bigram элемента словаря используется	для		изменения				веса		слова, имеющего эту метку, при выборе наиболее вероятных слов, следующих за данным. В качестве			единиц				словаря			используются словоформы.			Исправление					наиболее распространённых орфографических ошибок реализовано путём подмены слова с ошибкой на слово без ошибки при предсказании ввода. Возможности автодополнения вводимого текста имеются и в других операционных системах и коммерческих продуктах, однако исследование		алгоритмов				их		 работы невозможно				из-за			лицензионных																			
ограничений.																																																																											
 																																																																											

6	Описание предлагаемого метода автодополнения																																																																										
Метод автодополнения вводимого текста, рассматриваемый в данной работе, использует данные о взаимном употреблении классов согласования для повышения качества работы. Рассмотрим стандартные алгоритмы автодополнения с использованием																																																																											
 																																																																											
униграмм и биграмм (рис. 3).																																																																											
Из схемы алгоритма очевидно, что стандартный алгоритм автодополнения, основанный на использовании униграмм, не может	обеспечить	согласование предлагаемых вариантов завершения слова с ранее введённым текстом, а алгоритм, основанный на биграммах, обеспечивает согласование за счёт запоминания механизмом автодополнения шаблонных пар слов.																																																																									
 																																																																											

 																																																																											


Рис. 3. Схема алгоритма автодополнения с использованием униграмм и биграмм																																																																											
 																																																																											
Для решения данной проблемы предлагается внести в алгоритм следующие изменения.																																																																											
Всем словоформам, хранящимся в словаре, добавляется свойство, указывающее класс согласования, к которому относится данная словоформа.																																																																											
В механизм автодополнения вводится таблица частот взаимного употребления классов согласования словоформ.																																																																											
В процессе обучения и формирования словаря  словоформа  относится  к  одному																																																																											
 																																																																											
классу согласования (нескольким в случае омонимии) и учитывается в таблице взаимного	употребления	классов согласования.																																																																									
Сам алгоритм выбора возможных окончаний вводимой последовательности символов изменится и примет вид, представленный на рис. 4.																																																																											
Внесённое изменение исключает из рассмотрения алгоритмом автодополнения слова, относящиеся к классам согласования, появление  которых  в  связке  с  классом																																																																											
 																																																																											

 																																																																											
Рис. 4. Схема предлагаемого алгоритма автодополнения																																																																											
 																																																																											
согласования последнего введённого слово маловероятно. Это приводит к грамматическому	согласованию предлагаемых вариантов окончания последовательности символов с уже введёнными словами.																																																																										
Заключение																																																																											
В данной работе были рассмотрены существующие методы автодополнения вводимого текста. Выявлены достоинства и недостатки рассмотренных методов применительно к задаче для флективного языка. Изучены существующие программные средства автодополнения вводимого текста. Предложены способы улучшения качества работы метода, основанного на использовании N-грамм, для русского языка.																																																																											

N-ГРАММЫ В ЛИНГВИСТИКЕ																																																																											
Модель N-граммы в лингвистике. Пусть задан некоторый конечный алфавит V = {wi}, где wi — символ. Языком L(V) называют множество цепочек конечной длины из символов wi. Высказыванием называют цепочку из языка. N-граммой на алфавите V называют произвольную цепочку длиной N, например последовательность из N букв русского языка одного слова, одной фразы, одного текста или, в более интересном случае, последовательность из грамматически допустимых описаний N подряд стоящих слов [1]. Грамматически корректные N-граммы могут нести разную смысловую нагрузку — во фразах «Она разинула пасть» и «Она решила пасть» слово «пасть» имеет разные значения.																																																																											
N-граммы для понимания естественного языка стали применять сравнительно недавно. Предложена вероятностная модель речи на основе теории цепей Маркова, различающая разных авторов и даже фольклор. Значение N-грамм исчерпывается их прикладной направленностью: они являются эффективным инструментом решения важной задачи — отбраковки вариантов, а их использование сводится к наложению допустимых N-грамм на имеющиеся данные [1; 2].																																																																											
Пусть C (w | w = w1, w2, ..., wn) — число вхождений строки w в генеральную совокупность ? текстов языка. Вероятность (w) появления N-граммы w находят в виде																																																																											
p .																																																																											
Подобно определяют вероятность (wi) униграммы как вырожденного случая N-граммы [3]. Если вероятности появления символов в любой позиции цепочки независимы и одинаково распределены, то																																																																											
n																																																																											
p(w) =?p(wi) .   																																																																											
i=1																																																																											
Таким образом, перестановки символов w   ?w имеют одну и ту же вероятность. Например, в языке вероятность встретить выражения «красно-коричневый» та же, что и выражение «к-рснкрчнваооиеый». Для разрешения указанного недоразумения вводят условные вероятности [3]. Тогда вероятность очередного символа строки задается в зависимости от предшествующих ему символов в виде																																																																											
p(w) =p(wn | w1,w2...wn?1) p(w1,w2...wn?1),																																																																											
а модель N-граммы — марковской цепью (N–1)го порядка. Задача оценивания статистических параметров N-граммы сводится к задачам по марковским цепям, а оценкой вероятности N-граммы служит частота ее встречаемости: p?(w) = f (wn | w1,w2...wn?1) =																																																																											
                 = C(w1,w2 wn | L) . (1) C(w1,w2 wn?1 | L)																																																																											
70	В. Ю. Гудков, Е. Ф. Гудкова																																																																										
 																																																																											

Формула (1) для условных вероятностей триграмм использовалась в системе распознавания речи, разработанной IBM. Эксперименты показали, что в обучающей выборке отсутствовало значительное число триграмм, обнаруженное при проверке системы. Вероятность таких триграмм по (1) равна нулю, поэтому расчет p?(w) 																																																																											
модифицируют [4].																																																																											
Формальные грамматики. Порождающей грамматикой G согласно [3] называется четверка G = ?N, T, P, S?, где T — алфавит терминальных, а N — нетерминальных символов; S ? N — начальный символ; P — набор правил порождения (подстановки), имеющих вид ? ? ?, где ? — строка, содержащая хотя бы один нетерминальный символ, ? — строка, включающая символы из объединенного алфавита V = N ? T. Правила подстановки также называют продукциями, а выражения в их левых частях — посылками. Говорят, что строка ? = w1?w2 выводится из ? = w1?w2, если существует правило ? ? ? (здесь w1 и w2 — строки символов из V, возможно, пустые). Запись ? ??? означает, что существует цепочка выводов, преобразующих строку ? в строку ?. Языком L(G), порождаемым грамматикой G, называют множество всех конечных строк из символов T, выводимых в грамматике G. Множество всех непустых строк из символов алфавита R обозначают R+. Очевидно, что L(G) ??T+.																																																																											
Наиболее исследован класс контекстно-свободных грамматик (КСГ), в которых правила подстановки имеют вид Ai ? ?, где A ? N, а строка ? ? V+. В частном случае КСГ — автоматные грамматики (АГ) — правила подстановки ограничивают двумя типами: A ? ?B и A ? ?, где A ? N и ? ? T.																																																																											
Определение стохастической грамматики Gs совпадает с приведенной с той лишь разницей, что все правила P = {?i ? ?j} снабжают вероятностями ij при ?pij =1. Несущей называют 																																																																											
j																																																																											
грамматику G, получаемую из Gs выбрасыванием вероятностей. Грамматику Gs называют согласованной, если в процессе вывода lim P(wk = {w | w ??T,  ? 1. n}) ? 1. Рассмотрим стохастическую КСГ (СКСГ) с посылками {Ai} = N. Для каждого Ai математическое ожидание Eij числа порождаемых нетерминалов (по всем продукциям A ? Aj) рассчитывают в виде																																																																											
	Eij = E A(	j | Ai ) = ? p N j ikik	( ,	),																																																																							
k i( )																																																																											
где суммирование производится по всем k продукциям с посылкой Ai; ik — вероятность продукции A ? Ak; N(j, k) — число вхождений нетерминала Aj в правую часть продукции A ? Ak. Для СКСГ выполняется lim Et ?0 [elit??																																																																											
ne 1991, Stolce 1994].																																																																											
Например, пусть S ? A1A2 с вероятностью 1, A1 ? ?A2 с вероятностью 1, A1 ? ? с вероятностью 1 — 1, A2 ? A1?A1A1  с вероятностью 2, A2 ?? с вероятностью 1 — 2. Здесь {Ai} = N = {A0 = S, A1, A2}. Тогда матрица E имеет вид																																																																											
?0																																																																											
E =??0																																																																											
??0	1 0																																																																										
3p2	1 ?																																																																										
? p1?.																																																																											
0 ??																																																																											
N-граммы и формальные грамматики. N-граммы как объект теоретического анализа недостаточно изучены. Модель N-грамм не является объяснительной и не входит ни в какую другую объяснительную модель. В качестве носителя для модели N-граммы выступает формальная грамматика. Задача заключается в том, чтобы для формальной грамматики G определить все N-граммы, допустимые в порождаемом ею языке. В вероятностной формулировке задача заключается в том, чтобы для стохастической грамматики Gs определить вероятность каждой N-граммы.																																																																											
Нормальной формой Хомского (НФХ) называется такая грамматика, в которой правила подстановки имеют вид X ? YZ, X ? t, где X, Y, Z ? N, а t ??T. К НФХ приводится любая бесконтекстная грамматика [1]. Следуя [4], через E(w|X) с подстроками  и r обозначим сумму (X ? w) и сумму по всем подстановкам в виде																																																																											
	E w X(	|	) = p X( ?w) + ? p X( ?YZ)?																																																																								
X YZ?																																																																											
??E(?|Y)+E(?| Z) + ? p Y( ?qa p Z)	( ?br) .??																																																																										
?	ab w=	?																																																																									
Алгоритм вычисления вероятностей префиксных подстрок для СКСГ приведен в [Stolce 1994]. Операция, состоящая в замене подстановки X ? YZ на X ? ZY, не выводит грамматику из класса НФХ. Известны методы, приводящие КСГ к НФХ в виде инвертированной грамматики. Применив тот же алгоритм, получим вероятности появления хвостовых подстрок для исходной грамматики.																																																																											
Разновидности специальных обозначений  в современной спортивной терминологии	71																																																																										
 																																																																											

Таким образом, N-граммы есть средство фиксации языковой реальности и модель, основанная на грамматике Хомского. Связь модельных N-грамм и формальных грамматик дает эффективный инструмент автоматического анализа печатных текстов и слитной речи человека независимо от принадлежности языка к языковой группе.																																																																											

НЕПРЕРЫВНЫЕ МАРКОВСКИЕ ЦЕПИ																																																																											
Введение 																																																																											
Непрерывные марковские цепи в научной литературе описываются системами линейных дифференциальных уравнений Колмогорова, которые являются однородными. В работе [1] получены линейные и нелинейные дифференциальные уравнения вероятностных распределений. Статья посвящена установлению эргодических свойств непрерывных марковских цепей, описываемых неоднородными системами линейных дифференциальных уравнений. 																																																																											
 																																																																											
1.	Постановка задачи 																																																																										
Рассмотрим систему линейных дифференциальных уравнений вида dx																																																																											
 = Q t x( ) ,                                                              (1) dt																																																																											
где Q(t)при каждом t ? 0 является колмогоровской матрицей, т.е. 																																																																											
n																																																																											
qij ( )t ? 0,i ? j,    и    ? qij ( )t = 0, j = 1,...,n .                      (2) 																																																																											
i=1																																																																											
Будем предполагать, что функции q t i jij ( ), , =1,...,n , являются вещественными, непрерывными и заданными при t ? 0.  																																																																											
Матрица М={mij} называется марковской, если  																																																																											
n mij ? 0, ?mij =1,	i =1,?,n . 																																																																										
j=1																																																																											
Обозначим через Y(t t, 0) фундаментальную матрицу решений системы (1), нормированную в точке t0 . Известно [2], что для того чтобы фундаментальная матрица решений 																																																																											
Y(t t, 0) системы (1) была марковской при t ? t0 ? 0 , необходимо и достаточно, чтобы матрица Q(t) была колмогоровской при любом t ? 0.  																																																																											
Для системы (1) решение x t( ) = x t t( , 0,x0) с начальным условием x0 в момент t0 запишем в виде x t( ) = Y t t( , 0 )x0 .                                                            (3) 																																																																											
Из этой формулы следует, что при выполнении условий (2) каждому начальному распределению x0  в момент t0отвечает единственное x t( ) = x t t( , 0,x0) распределение, являющееся решением системы (1). При этом матрица 																																																																											
P t( 0 , )t = Y *(t t, 0 ) 																																																																											
(* – знак транспонирования матрицы) является матрицей условных вероятностей или переходной матрицей для непрерывной марковской цепи, описываемой системой дифференциальных уравнений (1). 																																																																											
Считая начальное  условие x0 распределением вероятностей, преобразуем правую часть системы (1) следующим образом dx																																																																											
 = (Q(t) ? b(t)e + b(t)e)x = (Q(t) ? b(t)e)x + b(t), dt																																																																											
где b t( ) – произвольный вектор-столбец с компонентами b t b t1( ), 2( ),...,b tn ( ) , которые яв-																																																																											
ляются вещественными, непрерывными и заданными при 	t ? 0 функциями, e = (1,1,?,1)?вектор-строка, у которой все компоненты единицы. Обозначая через A(t) = Q(t) ?b(t)e, получим систему dx																																																																										
 = A t x( ) + b t( ).                                                       (4) 																																																																											
dt																																																																											
n																																																																											
Легко видеть, что системы (1) и (4) совпадают на интегральном многообразии ?xi =1. 																																																																											
i=1																																																																											
Условия (2) для системы (4) примут вид 																																																																											
A)	aij (t) + bi (t) ? 0,i ? j,																																																																										
	n	                                                                        (5) 																																																																									
B)	? aij (t) + bi (t) = 0, j = 1,..., n																																																																										
i=1																																																																											
При выполнении условий (5) [1] каждому начальному распределению x0 в момент t0 отвечает распределение x t( ) = x t t( , 0,x0) вероятностей, являющееся решением системы (4). 																																																																											
Вместо системы (1) удобнее изучать систему (4). 																																																																											
Целью статьи является установление эргодических теорем для непрерывных марковских цепей, описываемые системой (1), рассматривая вместо нее систему (4). 																																																																											
 																																																																											
2.	Неоднородные цепи Маркова 																																																																										
Рассмотрим неоднородную марковскую цепь, т.е. когда матрица Q(t)зависит от времени t . Для системы (4) выпишем соответствующую однородную систему  dx																																																																											
 = A t x( ) ,                                                                  (6) 																																																																											
dt																																																																											
и обозначим через X(t t, 0) фундаментальную матрицу решений этой системы, нормиро-																																																																											
	?	n	?																																																																								
ванную в точке t0 . Введем обозначение K n =?(x ,x ,?,xn )| ?xi =1, xi ? 0,	i =1,?,n?. 																																																																										
	1	2																																																																									
	?	i=1	?																																																																								
Тогда для асимптотической устойчивости решений системы (4) в Kn достаточно, чтобы все элементы фундаментальной матрицы решений системы (6) аннулировались при t ?+?. При этом говорят, что  непрерывная марковская цепь, описываемая системой (1), 																																																																											
обладает эргодическим свойством.  Из Б) условия (5) следует 																																																																											
	n	n																																																																									
? aij (t) =?? bi (t), j = 1,..., n,                                                (7) 																																																																											
	i=1	i=1																																																																									
обозначим 																																																																											
n																																																																											
 																																																																											
b t( ) = ? bi ( )t ,                                                          (8) 																																																																											
i=1																																																																											
Теорема 1. При выполнении условий (5), для любого решения x t( ) = x t t( , 0,x0), системы (6) справедливо равенство 																																																																											
 																																																																											
?n xi (t) = (x01 + x02 +??+ x0 ) exp	?t	??, j = 1,..., n.                      (9) ??? b (?)d?																																																																									
=1	n	?	t0	? i																																																																							
где x01, x02 ,??x0n ? компоненты начального условия x0 																																																																											
Доказательство. Запишем систему уравнений (6) в скалярной форме 																																																																											
	dx i (t) = ?n aij (t)x j (t),	i = 1,..., n , 																																																																									
	dt	j =1																																																																									
суммируя левую и правую части этих равенств по индексу  i, получим 																																																																											
	n	n	n																																																																								
? dx i (t) = ? x j (t)? aij (t). 																																																																											
	i=1	dx	j=1	i=1																																																																							
n																																																																											
Обозначая через p(t) = ? xi (t), и принимая во внимание (8), получим уравнение 																																																																											
i=1																																																																											
dp t( )																																																																											
=?b t p t( )	( ) dt																																																																										
с начальным условием p(t0) = x01 + x02 +??+ x0n . Выпишем решение этого уравнения 																																																																											
 																																																																											
p(t) = (x01 + x02 +??+ x0n ) exp ???? ?tt0 b (?)d????, j = 1,..., n. 																																																																											
      Теорема доказана. 																																																																											
Введем  обозначения: 																																																																											
	bi (t) = min qij (t),	i = 1,..., n .  																																																																									
j?i																																																																											
Теорема 2. Если выполнены условия (1) и условие 																																																																											
  ,                                                          (10) 																																																																											
t0																																																																											
то непрерывная марковская цепь, описываемая системой (2), обладает эргодическим свойством. 																																																																											
Доказательство.  Покажем, что система (4) является асимптотически устойчивой в Kn .     																																																																											
Из условий aij (t) = qij (t)?bi (t) ? 0, i ? j , следует, что решение x(t) = (x1(t), x2(t),?, xn (t)) системы (6) обладает свойством: x ti ( ) ? 0 при t ?t0, если x ti ( 0) ? 0, i = 1,...,n , и по формуле (9) имеем 																																																																											
	n	n																																																																									
t  xi ( )t =xi (t0 ) exp(?? b (? ?)d ) . 																																																																											
t i=1	i=1	0																																																																									
n																																																																											
Из условия (10) следует, что ? xi (t) ? 0 и xi (t) ? 0,	i =1,?,n, при t ?+? . Т.е. все 																																																																										
i=1																																																																											
элементы фундаментальной матрицы X t t( , 0) системы (6) аннулируются при t ?+?, Из асимптотической устойчивости системы (6) следует асимптотическая  устойчивость системы (2) в Kn . Теорема доказана. 																																																																											
Следствие 1. Пусть элементы q tij ( ) матрицы Q(t) удовлетворяют условиям: qij ( )t >?> 0, i ? j, i j, = 1,...,n, 																																																																											
то непрерывная неоднородная Марковская цепь, описываемая системой (2), обладает свойством эргодичности. 																																																																											
Следствие 2. Если матрица Q(t) является ??периодической и выполняется условие 																																																																											
  , 																																																																											
то непрерывная периодическая марковская цепь, описываемая системой (2), обладает свойством эргодичности. 																																																																											
Следствие 3. Пусть матрица Q является постоянной. Если в матрице Q найдется строка с номером i такая, что qij > 0 при всех j ? i , то непрерывная однородная марковская цепь, описываемая системой (2), обладает свойством эргодичности. 																																																																											
 																																																																											
3.	Периодические цепи Маркова 																																																																										
Рассмотрим отдельно непрерывные марковские цепи, описываемые периодическими линейными дифференциальными уравнениями [2]. При изучении различных задач теории массового обслуживания, учитывающих явную циклическую зависимость от времени (работа телефонной станции с учетом изменений потока требований в течение суток, работа скорой помощи и т.д.), мы приходим к системе (1) с периодическими коэффициентами. 																																																																											
Пусть A(t) является непрерывной ?-периодической матричной функцией, b t( ) ??периодической векторной функцией. В работе [2] получен следующий результат: если все мультипликаторы системы (4) по модулю меньше единицы, то в этой системе существует единственное стационарное периодическое распределение вероятностей и все остальные распределения стремятся к нему при t ?+? по экспоненте. Обозначим через ?(t) стационарное периодическое распределение, а через ?0 начальное распределение для ?(t) , тогда будем иметь 																																																																											
	 (	(	))	(	)	( ) ( )	,                            (11) 																																																																				
t																																																																											
	 ( )	( )	( )	(	) (	)	,                             (12) 																																																																				
или для системы (1): 																																																																											
?(t ) = Y (t )?0 .                                                        (13) 																																																																											
Заметим, что у матрицы монодромии Y(?) системы (1) мультипликатор ?=1 является простым и все остальные мультипликаторы по модулю меньше единицы, причем ?0 является стационарным распределением эргодической однородной дискретной цепи Маркова с переходной матрицей Y(?) за один шаг. 																																																																											
В качестве примера применения непрерывных периодических марковских цепей рассмотрим работу телефонной линии в периодическом режиме. Интенсивность поступлений вызовов на телефонную линию зависит от времени. Можно считать, что она является периодической функцией (например, суточные колебания интенсивности поступления вызовов на линию). 																																																																											
Пусть вероятность поступления на телефонную линию одного вызова за время (t t, + h) равна a t h( ) + o h( ) , следовательно, вероятность не поступления ни одного вызова за то же время (t t, +h) равна 1?a t h( ) +o h( ) . Если в момент t еще продолжается разговор, то за время (t t, +h) он окончится с вероятностью b t h( ) +o h( ) . 																																																																											
Пусть x(t), y(t) ?вероятность того, что в момент t линия соответственно свободна и занята. Тогда система дифференциальных уравнений, описывающая работу телефонной линии в периодическом режиме, имеет вид 																																																																											
?x??=?a t x( ) + b t y( ) ,																																																																											
	?	                                                 (14) 																																																																									
?y??= a t x( ) ? b t y( ) ,																																																																											
где a t b t( ), ( ) ?непрерывные ??периодические функции. При каждом t : a t( ) ? 0, b t( ) ? 0, но a(t) и b t( ) одновременно не равны нулю. 																																																																											
Для системы (14) выполняются условия (2), значит система (14) задает непрерывную ??периодическую цепь Маркова с двумя возможными состояниями. Непосредственной проверкой можно убедиться, что матрица 																																																																											
	?1?? ?( )t	( )t	?																																																																								
	Y t( ) =?	? ,                                                 (15) 																																																																									
	? ?( )t	1??( )t ?																																																																									
является фундаментальной матрицей решений системы (14), где 																																																																											
	t	t	t	t																																																																							
	?( )t = ? exp(?? ? (? ?)d	)a s ds( )	,    	( )	exp(	(	)	) ( )	, 																																																																		
и   , а мультипликаторами являются величины ?1 = 1 , ?2 = 1 ??(?) ??(?) , причем ?2 < 1 . Стало быть, в системе (14) существует един-																																																																											
ственное периодическое распределение и все остальные распределения стремятся к нему при t ?+?. 																																																																											
Начальное распределение (x0, y0), соответствующее стационарному периодическому распределению (x0( )t , y0( )t ), вычисленное по формуле (11), равно 																																																																											
	??(	)	??(	)																																																																							
x0 =   ,   y0 =   , ?? ??( ) + ( ) ?? ??( ) + ( )																																																																											
а стационарное периодическое распределение, вычисленное по формуле (12), будет равно 																																																																											
	?	t +?	+?																																																																								
?ds																																																																											
???x0 ( )t =?? ? ??? (	)(1?? ???(	( )))t+ +( () )	( )t	???x 																																																																							
?	??? ?? ?(	)	( )t + (	)(1? ( ))t	 ??	t +?	t +?	. 																																																																			
???y0 ( )t =	 ?? ??(	) + (	)	, ?	? exp( ? ? ?d?)a (s)ds																																																																						
	? y0 (t) = t	s	.																																																																								
	??	?(?) +?(?)																																																																									
С ростом времени t вероятность того, что телефонная линия будет занята, стремится к периодической функции y t0( ) .  																																																																											
 																																																																											
4.	Однородные цепи Маркова 																																																																										
Теперь рассмотрим случай непрерывных однородных по времени цепей Маркова, то есть когда матрица A и вектор b являются постоянными, то есть систему вида dx																																																																											
 = Ax + b.                                                            (16) dt																																																																											
Теорема 3. Если матрица A и вектор b постоянны и выполнены условия (5), то матрица Q = A+ be всегда имеет собственное число ?= 0, матрица A = Q?be всегда имеет собственное число ?=?(b1 +b2 +...+bn ) , а все остальные собственные числа матриц A и Q совпадают. 																																																																											
Доказательство. В определителе  Q??E  к первой строке прибавим все остальные строки. Полученный определитель разложим по первой строке, тогда получим 																																																																											
 Q ??E   = ??[Q11 (?) + Q12 (?) + ... + Q1n (?)]                     (17) 																																																																											
где Qij ( )? – алгебраическое дополнение к элементу (qij ???ij ) в матрице (Q ??E ) . Т.е.  матрица Q имеет собственное число ?= 0. С другой стороны, используя свойства определителей, получим 																																																																											
	  A ?? ? ? ?E = ( ? )[Q11(	) + Q12 (?) ...+ +Q1n (?)]                         (18) 																																																																									
Значит матрица A имеет собственное число ?=?(b1 +b2 +...+bn ) . Из (17) и (18) следует утверждение теоремы. Теорема доказана 																																																																											
Теорема 4. Пусть матрица A и вектор b постоянны и выполнены условия (5). Если 																																																																											
 																																																																											
число ?= + + +(b1	b2 ... bn ) является простым собственным числом матрицы A и вещественные части всех остальных собственных чисел матрицы A отрицательны, то в системе (1) существует единственное стационарное распределение, а все остальные распределения в этой системе стремятся к нему при t ?+? . 																																																																										
Доказательство очевидное. 																																																																											
	Замечание. Если 	(b1 +b2+...+bn ) > 0 , то элементы фундаментальной матрицы  																																																																									
X(t t, 0) = exp(A(t ?t0)) аннулируются при t ?+?. Если (b1 +b2+...+bn ) < 0 , то аннулируются компоненты вектора exp(A(t ?t0))(x0 ? y0) при t ?+? при любых начальных условия x0, y0 ?Kn . 																																																																											
Обозначим через pстационарное распределение однородной эргодической цепи Маркова, описываемое системой (16), тогда 																																																																											
p = ? A ?1b = ? (Q ? be) ?1b,                                          (19) 																																																																											
причем матрица A является обратимой, если (b1 +b2+...+bn ) ? 0. 																																																																											
Теперь получим известную формулу для стационарного распределения p в терминах матрицы Q. В формуле (9) положим, например, b = (?, ,..., )0 0 , и пусть {cij } = A?1 = (Q?be)?1, тогда получим 																																																																											
 Q ? be   = ??? , 																																																																											
где ? = Q11 + Q12 +...+Q1n , и Qij обозначает алгебраическое дополнение к элементу qij в 																																																																											
 																																																																											
матрице Q, далее имеем   																																																																											
c11 =																																																																											
 																																																																											
Q11	Q12	Q1n																																																																									
  , c21 =	  ,..., c n1 =	  , 																																																																									
???	???	???																																																																									
 																																																																											
и 																																																																											
	? Q	Q	Q	?																																																																							
 																																																																											
p = ??( c11 , c21 , ... , c n 1 ) = ?? ?11 , ?12 , ... , ?1n ?? , 																																																																											
и окончательно 																																																																											
	Q11	Q12	=	Q1n	,  (20) 																																																																						
p1 =	,	,..., p n																																																																									
Q11 + Q12 + ... +Q1n Q11 +Q12 + ... +Q1n Q11 +Q12 + ... + Q1n где p1, p2,..., pn – координаты стационарного распределения p. 																																																																											
 																																																																											
Заключение 																																																																											
Рассматривая вместо однородной системы неоднородную систему линейных дифференциальных уравнений вероятностных распределений, изучены эргодические свойства непрерывных неоднородных, периодических и однородных цепей Маркова.																																																																											

НЕОБХОДИМОСТЬ UX-АНАЛИЗА ПОЛЬЗОВАТЕЛЬСКОГО ИНТЕРФЕЙСА СПЕЦИАЛЬНЫХ ПРОГРАММНЫХ КОМПЛЕКСОВ ЭКСТРЕННЫХ ОПЕРАТИВНЫХ СЛУЖБ																																																																											
Одним из основных показателей специальных программных комплексов любой оперативной службы является временной интервал требуемый пользователю для выполнения той или иной задачи в данном программном комплексе, что, в свою очередь, зачастую, является частью времени оперативного реагирования.																																																																											
С 1 июня 2015 года на территории Московской области работает система вызова экстренных оперативных служб по единому номеру «112», сокращенно – Система-																																																																											
112. С начала работы в Подмосковье операторы обработали уже свыше 31 миллиона вызовов. Ежедневно операторы Системы-112 принимают порядка 21,5 тысячи вызовов от заявителей, находящихся на территории Московской области. Это телефонные звонки, SMS-сообщения, сообщения из мобильного приложения и «ЭРА- ГЛОНАСС», вызовы по Skype от людей с нарушениями слуха и речи.																																																																											
Основным рабочим инструментом Системы-112 Московской области является программный комплекс «КоордКом». Пользовательский интерфейс данного программного комплекса выполнен на базе стандартных элементов операционной системы Windows.																																																																											
Наитивность программного комплекса сама по себе должна гарантировать быстроту работы, не требующих больших аппаратных затрат, процессов. Но опыт использования программного комплекса показывает, что, например, открытие, заполненной оператором 112, карточки происшествия на автоматизированном рабочем месте той же Системы-112, установленном в пожарной части, может занимать до 40 секунд; открытие карты с обозначением местонахождения заявителя – до 4,5 минут, либо может не произойти вовсе.																																																																											
Это не единственная проблема, с которой приходится сталкиваться непосредственным пользователям данного программного продукта. Так, например, существуют моменты, требующие анализа и дополнительной проработки, в графическом интерфейсе.																																																																											
Многие кнопки (Рис. 1), имеющие графическое обозначение, плохо читабельны, имеют большое количество мелких, плохо различимых и визуально лишних элементов. Что увеличивает время поиска нужной кнопки пользователем.																																																																											
 																																																																											
 																																																																											
Рис. 1. Фрагмент пользовательского интерфейса ПК «КоордКом»																																																																											
Размер основного рабочего поля «Свободный текст» (Рис. 2), используемого во всех карточках, при любом происшествии, невозможно увеличить, хотя в стандартных средствах Windows это предусмотрено. В результате просмотр текста больше 165 символов доступен только с помощью прокрутки колеса мыши, а увидеть текст целиком невозможно.																																																																											

Рис. 2. Фрагмент пользовательского интерфейса ПК «КоордКом»																																																																											
Поле «Индекс» (Рис. 3) предназначено исключительно для индексации карточки, то есть – присвоения определенной категории происшествия (например: ДТП, потерявшиеся люди, обнаружение боеприпаса и т.д.). Почти всегда индексация происходит в самом начале работы с карточкой и только один раз. Но после индексации данное поле никак не видоизменяется и продолжает занимать значительную часть визуальной поверхности карточки происшествия.																																																																											

Рис. 3. Фрагмент пользовательского интерфейса ПК «КоордКом»																																																																											
 																																																																											
Внешний вид, содержание и размер карточки происшествия никак не зависит от ее индексации тому или иному типу происшествия. Что несколько странно, учитывая насколько разные задачи у экстренных оперативных служб, в интересах которых разработан данный программный комплекс.																																																																											
Сама карточка происшествия занимает все рабочее пространство одного из двух мониторов АРМ (второй монитор по задумке авторов программного комплекса постоянно занят картой), закрывая собой даже кнопки управления голосовой связью. Что так же делает невозможным одновременный просмотр двух и более карточек происшествия.																																																																											
Приведенные выше примеры являются частью реального пользовательского опыта, выявленного в ходе получасового опроса дежурной смены Службы-112 одного муниципального образования. Каждый, из описанных случаев, отрицательно влияет на качество и скорость работы оператора, но при этом может быть исправлен без масштабных финансовых вложений.																																																																											
Для выявления всех спорных моментов в программном комплексе необходимо провести полноценный анализ пользовательского опыта (опыта взаимодействия) – UX-анализ.																																																																											
Опыт взаимодействия (UX) – термин широко применяется в информационных технологиях для описания субъективного отношения, возникающего у пользователя в процессе использования как программного комплекса в целом, так и отдельной его части. Опыт пользователя, в том числе, связан с таким понятием как юзабилити, применяемым при разработке и анализе пользовательских интерфейсов приложений [1].																																																																											
Впервые термин user experience (пользовательский опыт) применил американский учёный в области когнитивистики, дизайна и пользовательской инженерии Дональд Норман в 1993 году.																																																																											
UX — это сфера между дизайном и аналитикой: дизайнеры думают о том, какие ощущения вызывает продукт, и разрабатывают прототипы.																																																																											
Экспертный UX-анализ дает возможность точно определить неидеальные области системы. Он оценивает различные разделы программного комплекса и показывает, какие области или функции следует решать в первую очередь. Создавая условия для улучшения функций, необходимо следовать хорошо спланированному научному процессу, разделенному на две части: оценка UX и исследование пользователей [2].																																																																											
При проведении UX-анализа исследователи и дизайнеры должны использовать различные инструменты, методы и метрики для анализа текущего состояния цифрового продукта, включая такие области, как:																																																																											
•	Цели программного комплекса и пользовательские задачи.																																																																										
•	Временные показатели выполнения различных сценариев пользователями.																																																																										
•	Статистику по использованию программного комплекса.																																																																										
•	Данные по техническому обслуживанию.																																																																										
•	Соответствие правилам юзабилити.																																																																										
•	Ментальное моделирование.																																																																										
•	Оценка проекта.																																																																										
•	Применение лучших практик UX.																																																																										
Одним из распространенных методов UX-анализа являются так называемые																																																																											
«эвристики» Якоба Нильсена.																																																																											
Эвристика — это не имеющий строгого обоснования, но полезный на практике алгоритм. Эвристики дают приемлемое решение задачи в большинстве практически значимых случаев.																																																																											
Используя различные методы исследования и систему оценки эвристики, UX- иследователи должны пройти весь путь пользователей. После чего создается документ оценки UX. Сюда входят основные препятствия UX и способы их устранения, подробный план UX и список приоритетов, а также предложения экспертов.																																																																											
 																																																																											
Результатом UX-анализа должна стать дорожная карта для решения всей выявленных проблем.																																																																											

Метод обнаружения веб-роботов  																																																																											
на основе анализа графа пользовательского поведения																																																																											
Согласно отчетам компаний, занимающихся защитой веб-ресурсов, каждый пятый запрос к типовому сайту в сети Интернет направлен вредоносными автоматизированными системами – веб-роботами. Веб-роботы по объему трафика уже преобладают над рядовыми пользователями веб-ресурсов. Своими действиями они угрожают приватности данных, авторскому праву, несут угрозы несанкционированного сбора информации, влияют на статистики и приводят к ухудшению производительности вебресурса. Возникает необходимость обнаружения и блокирования источников таких средств. 																																																																											
Существующие методы предполагают использование синтаксической и аналитической обработки логов веб-сервера для обнаружения веб-роботов. Этого недостаточно, чтобы надежно выявлять веброботов, скрывающих свое присутствие и имитирующих поведение легитимных пользователей. 																																																																											
В статье предлагается новый метод, отличительной особенностью которого является использование характеристик графа связности страниц защищаемого веб-ресурса для формирования признаков роботизированных пользовательских сессий. Характеристики анализируемых сессий включают не только особенности графа перемещений самого пользователя, но и признаки каждого из посещенных им узлов веб-ресурса (степени входа и исхода, меры центральности и другие). Для расчета таких характеристик строится граф связности страниц веб-ресурса. 																																																																											
Данный метод заключается в анализе характеристик перемещений для каждой пользовательской сессии с целью классификации ее на роботизированную или принадлежащую легитимному пользователю. 																																																																											
В статье проводится анализ шаблонов поведения пользователей веб-ресурса, описываются основные принципы извлечения необходимых данных из логов веб-сервера, способ построения графа связности страниц веб-ресурса, а также наиболее значимые характеристики сессий. Обсуждаются процедура обнаружения и выбор подходящей классификационной модели. Для каждой из исследуемых моделей производятся отбор гиперпараметров и перекрестная проверка результатов. Анализ точности и полноты обнаружения показывает, что при использовании библиотеки XGboost можно получить  F1-меру порядка 0.96. 																																																																											
Ключевые слова: веб-роботы, информационная безопасность, защита веб-ресурсов, парсеры, обнаружение веб-роботов, граф веб-ресурса, теория графов, защита информации. 																																																																											
 																																																																											
 																																																																											
Посетителей сегодняшних веб-ресурсов можно условно разделить на две категории: легитимные пользователи, совершающие действия при помощи веб-браузеров и мобильных приложений, и веб-роботы, выполняющие на сайте автоматизированные действия [1]. Веб-роботы могут выступать в роли индексаторов ресурса, проверять ссылки и работоспособность функционала, но могут и нести различные автоматизированные угрозы – от кражи информации до совершения мошеннических действий и манипуляций с целью получения преимущества над обычными пользователями [2]. 																																																																											
Отчеты компаний, которые занимаются мониторингом Интернета, показывают, что до 50 % трафика на сайте приходит от веб-робо- тов [3]. Различие статистических параметров поведения пользователей веб-ресурсов и веброботов можно использовать также для улучшения системы кэширования и настройки систем управления статистикой для исключения веб-роботов из различных маркетинговых отчетов [4]. 																																																																											
Типичный веб-ресурс – это ориентированный граф, узлами которого являются веб-страницы с информацией (HTML-страницы, документы, файлы, изображения, скрипты), а ребро проводится из узла, где есть гиперссылка в узел, на который она ведет. Ссылкой также могут являться вложение ресурса (например, изображения) и переход, выполняемый из Java- Script-сценария [5]. 																																																																											
 																																																																											
Программные продук																																																																											
Знание о структуре веб-ресурса и данные о поведении легитимных пользователей на нем можно использовать для формирования модели поведения. Отличие поведения пользователя от данной модели позволяет сделать вывод об автоматизации его посещений и о других целях перемещения по сайту. Данные факты могут быть использованы для обнаружения веб-роботов и уточнения классических синтаксических и аналитических методов классификации пользователей.  																																																																											
Обнаружение веб-роботов. Обнаружение происходит на основе анализа данных о пользователе. Часто такими данными являются обычные логи веб-сервера, но это могут быть дампы трафика или данные уровня приложений [6]. 																																																																											
Логи веб-сервера – это наборы строк, содержащих следующие данные о каждом запросе к веб-ресурсу: дата, путь до запрашиваемого узла, код ответа, страница, с которой совершен переход, браузер пользователя, IP-адрес источника, уникальный идентификатор сессии (если настроен). 																																																																											
Для каждой пользовательской сессии рассчитываются 	уникальные 	характеристики, описывающие поведение данного пользователя на веб-ресурсе. На их основе каждая сессия классифицируется на легитимную или роботизированную. 																																																																									
Классические методы обнаружения сегодня используют данные пользовательских запросов и логов без привязки к реальной структуре и контенту, расположенному на веб-ресур- се [7]. В основном исследователи применяют различные методы классификации или кластеризации на основе информации, полученной из веб-логов. Такие подходы позволяют добиваться точности обнаружения вплоть до 0.9 [8, 9], однако результаты очень зависят от набора данных и наличия в нем сложных веб-роботов, скрывающих свое присутствие [10]. 																																																																											
Построение графа веб-ресурса. Отдельной задачей является получение графа веб-ресурса (рис. 1). Для этого могут использоваться как внешние системы (краулер, совершающий обход всех страниц веб-ресурса), так и внутренний подход (генерация графа связности стра-																																																																											
     (1) ниц через расширенные возможности фреймворка, 	на 	котором 	основан 	веб-ресурс). Связность также можно генерировать на ос-																																																																							
нове пользовательских сессий, но такой подход      (2) приводит к ошибкам и ложным срабатываниям за счет устаревания данных в логах, нерелевантных запросов от веб-роботов, скрывающих 																																																																											
 																																																																											
Программные продук																																																																											
–	меры центральности (Closeness centrality, Betweenness centrality, Harmonic centrality, eigencentrality); 																																																																										
–	значения алгоритма HITS (ранги авторов и посредников) [11]; – PageRank [12]: 																																																																										
R v?( )) R u'( ) = cv B?? u  Nv + cE u( ).      (3) 																																																																											
Характеристики сессий. Каждая сессия представляет собой набор запросов к веб-ресурсу от одного источника за определенный временной интервал. Каждый запрос направлен к определенному узлу графа, что позволяет оценивать изменение характеристик каждой из вершин графа, а также вычислять комбинированные показатели. 																																																																											
В результате каждую из сессий можно характеризовать следующими типами признаков, на основе которых использовать классификацию: 																																																																											
–	среднее значение каждой из характеристик каждого узла; 																																																																										
–	среднеквадратические отклонения характеристик узлов; 																																																																										
–	распределение значений по каждой характеристике; 																																																																										
–	дополнительные характеристики переходов между узлами. 																																																																										
Изучение распределений значений для различных характеристик позволяет утверждать, что шаблоны поведения легитимных пользователей и веб-роботов отличаются (рис. 3). 																																																																											
К дополнительным характеристикам переходов относятся технические особенности перемещения по графу: 																																																																											
–	количество переходов между страницами, не связанными ссылкой; 																																																																										
–	количество возвратов на предыдущую страницу. 																																																																										
В данном исследовании не рассматривается временной контекст каждого из запросов, однако стоит отметить, что учет временных интервалов между разными типами запросов может принести дополнительные знания о том, как быстро пользователи принимают те или иные решения о возврате на предыдущую страницу или о переходе на главную страницу. 																																																																											
Сравнительный анализ. В исследовании использовался архив трафика к веб-ресурсу за один месяц. Архив содержит HTTP-запросы к сайту от шестидесяти тысяч источников за рассматриваемый период. Веб-ресурс использует специальное ПО для идентификации сессий, что позволяет однозначно идентифицировать 																																																																											
Closeness centrality																																																																											
14 12																																																																											
10 8																																																																											
6 4																																																																											
2																																																																											
0 0	0,1	0,2	0,3																																																																								
	Веб-роботы	Пользователи																																																																									
 																																																																											
 																																																																											
а) 																																																																											
 																																																																											
Betweenness centrality																																																																											
70																																																																											
60																																																																											
50																																																																											
40																																																																											
30																																																																											
20																																																																											
10																																																																											
0																																																																											
-0,1	0,4	0,9	1,4 Веб-роботы	Пользователи																																																																							
 																																																																											
 																																																																											
б) 																																																																											
Рис. 3. Разница значений характеристик  																																																																											
а) Closeness centrality и б) Betweenness centrality для людей и веб-роботов  																																																																											
 																																																																											
Fig. 3. The difference in the values  of the characteristics: a) Closeness centrality  																																																																											
and б) Betweenness centrality for people  and web robots 																																																																											
связанные сессии легитимных пользователей без использования нечетких алгоритмов идентификации. 																																																																											
С помощью разработанного ПО в полуавтоматическом режиме производилась предварительная классификация сессий с использованием как однозначных признаков веб-робота (запросы к файлам-ловушкам, известные адреса источников, известные значения UserAgent), так и дополнительных параметров, оцениваемых человеком (повторяемость запросов, аномалии поведения, исполнение JavaScript, географическая привязка источника и другие). 																																																																											
При помощи ExtraTreesClassifier оценивались значимости всех непосредственных и усредненных графовых признаков для уменьшения признакового пространства (см. таб- Программные продук лицу). Дополнительно производилась оценка корреляции признаков. 																																																																											
 																																																																											
Наиболее значимые признаки The most significant features 																																																																											
 																																																																											
 																																																																											
Признак 	Важность 																																																																										
clustering_std 	0.060268 																																																																										
harmonicclosnesscentrality_std 	0.054645 																																																																										
eigencentrality_std 	0.054076 																																																																										
degree_std 	0.053189 																																																																										
hub_std 	0.051802 																																																																										
outdegree_std 	0.051132 																																																																										
closnesscentrality_std 	0.050760 																																																																										
authority_std 	0.045223 																																																																										
indegree_std 	0.043336 																																																																										
clustering_avg 	0.043311 																																																																										
 																																																																											
Для классификации использовались несколько разных моделей: Gradient Boosting, XGboost, Multilayer perceptron. Набор данных был разделен на тренировочный и тестовый. Тренировочный использовался для сравнения моделей классификации и подбора гиперпараметров моделей с использованием кроссвалидации с разделением на 10 блоков. Итоговая оценка производилась на тестовом наборе данных. 																																																																											
Оптимизация гиперпараметров производилась при помощи Grid Search с минимизацией значения площади под кривой ошибок (рис. 4). 																																																																											
 Все рассматриваемые модели после оптимизации гиперпараметров показали приемлемые результаты обнаружения. Модель XGboost была наиболее точна с F1-мерой, равной 0.96. 																																																																											
 																																																																											
 																																																																											
ROC-кривая																																																																											
1																																																																											
0,8																																																																											
0,6																																																																											
0,4																																																																											
0,2																																																																											
0																																																																											
	0	0,2	0,4	0,6	0,8	1																																																																					
False Positive Rate																																																																											
 																																																																											
 																																																																											
Рис. 4. ROC-кривая Fig. 4. ROC curve 																																																																											
 																																																																											
 																																																																											
Выводы 																																																																											
 																																																																											
В статье предложен метод обнаружения веб-роботов на основе анализа графа пользовательского поведения. За счет анализа связности страниц веб-ресурса и расчета характеристик графа веб-ресурса удалось добиться улучшения точности и полноты обнаружения веб-роботов. Данные характеристики могут быть скомбинированы с классическими методами и приводить к улучшению показателей обнаружения веб-роботов. Были использованы несколько методов классификации, произведены подбор гиперпараметров, а также перекрестная проверка результатов обнаружения. В итоге достигнута F1-мера обнаружения веб-роботов, равная 0.96, что превышает существующие показатели методов, основанных на синтаксическом и аналитическом обнаружении. 																																																																											
 																																																																											
Работа выполнена в рамках гранта РФФИ № 17-07-00700-а «Методы формальной и функциональной верификации вычислительных процессов, основанные на знаниях и графоаналитических моделях».																																																																											

МАТЕМАТИЧЕСКАЯ МОДЕЛЬ АКТИВНОСТИ ПОЛЬЗОВАТЕЛЕЙ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ																																																																											
Уровень удобства использования программного интерфейса влияет на качество всего ПО в целом. Признаком недостаточного уровня удобства использования является наличие проблем взаимодействия пользователя с пользовательским интерфейсом. Они могут быть связаны либо со сложностью формулирования плана действий (принятия решений, что делать дальше), либо с непониманием ответа системы (как изменения в интерфейсе связаны с выполненными действиями) [1]. 																																																																											
Проблемы взаимодействия в большинстве случаев можно определить по наличию в данных  активности пользователей определенных последовательностей действий (шаблонов). Для их обнаружения применяются различные методы анализа  собираемых данных – как требующие ручного анализа (например, тепловые карты [2, 3]), так и использующие алгоритмы автоматического анали- за [1] на основе шаблонов, выявленных иссле- дователями ранее [4–6]. Автоматический анализ  экономит время и деньги, так как эксперты вместо анализа всех данных фокусируют внимание на отдельных областях пользовательского интерфейса, где были выявлены соответствующие шаблоны. 																																																																											
На настоящий момент в открытых научных ис- точниках не удалось найти формализованное пред ставление данных активности пользователей ПО.  В статье представлена разработанная авторами математическая модель активности пользователей ПО. Эта модель может найти применение при оценке удобства пользовательских интерфейсов. Целями являются максимальная формализация оценки удобства использования и формирование критериев для повышения эффективности взаимодействия пользователей с пользовательским интерфейсом. 																																																																											
 																																																																											
Шаблоны поведения пользователя 																																																																											
 																																																																											
По мнению многих исследователей (например, авторов [1, 4–6]), индикатором проблем удобства использования может являться наличие часто повторяемых одинаковых последовательностей действий. Они могут означать, что пользователь пытается достичь цели и каждый раз терпит неудачу. Например, пользователь пытается взаимодействовать с изображением, которое он принял за кноп- ку [1], или пользователь нажимает кнопку и каждый раз получает ошибку. 																																																																											
В работе [4] выделен ряд шаблонов, связанных с выполнением пользователем поставленных задач, например, шаблон «Отмена действия», когда поль- зователь отменяет действие сразу после его выполнения, или шаблон «Повторение действий», когда пользователь часто повторяет простые действия (клики мыши или нажатие клавиш). Наличие второго шаблона может означать недостаточную отзывчивость интерфейса, которая ошибочно приводит пользователя к мысли, что система не распознает его действие. 																																																																											
Отдельные исследователи предлагают отслеживать более простые индикаторы: количество вызовов онлайн-справки, количество действий отмены, частое открытие-закрытие выпадающих списков, нажатие одной и той же кнопки более одного раза и т.д. [5]. Другие исследователи основываются на обнаружении проблем поиска информации пользователем в процессе просмотра веб-сайта [6]. Например, выделяется шаблон вертикального или горизонтального перемещения курсора мыши.  В процессе визуального поиска на странице пользователь обычно перемещает курсор вслед за элементами, а значит, тратит много времени на поиск элемента.  																																																																											
Перечисленные методы поиска шаблонов поведения пользователей имеют много общего с задачей поиска последовательных шаблонов из области интеллектуального анализа данных [7]. В большинстве случаев все шаблоны являются последовательными, варьируются лишь анализируемые события. Однако данные активности пользователей почти всегда представляют собой не короткие транзакции, а большие наборы действий, которые в большинстве случаев невозможно корректно разделить на поднаборы [2, 3]. 																																																																											
Поиск последовательных шаблонов давно и активно применяется в области торговли [8]. Поиск наиболее частых наборов позволяет получать информацию о том, через какой промежуток времени после покупки товара «А» человек наиболее склонен купить товар «Б» или в какой последовательности приобретаются товары. Получаемые  закономерности в действиях покупателей можно использовать для персонализации клиентов, стимулирования продаж определенных товаров, управления запасами [8]. Это позволяет, с одной стороны, увеличить продажи, с другой – предложить клиентам товар, который, скорее всего, будет им интересен, а значит, минимизировать их временные затраты на поиск. 																																																																											
При проектировании пользовательского интерфейса в соответствии со стандартами ГОСТ-2880690 и ISO 9241-11:1998 аналогичным образом требуется максимизировать результативность (точность и полноту достижения пользователем поставленных целей, успешность выполнения промежуточных задач) и эффективность (отношение израсходованных ресурсов к точности и полноте, с которой пользователи достигают поставленных целей). 																																																																											
Как уже отмечалось, одной из возможных при- чин появления регулярно повторяющихся шабло нов в данных активности пользователей является наличие ошибок или затруднений при взаимодействии с интерфейсом. В этом случае может наблюдаться снижение и результативности, и эффективности пользователей. Следовательно, уменьшение числа подобных шаблонов снижает риск возникновения ошибок. 																																																																											
Другой возможной причиной наличия повторяющихся шаблонов в данных активности пользователей является потребность выполнения одних и тех же повторяющихся цепочек действий для выполнения поставленных задач. Закономерно, что автоматизация промежуточных действий уменьшает затраты ресурсов. Следовательно, чем меньше пользователь совершает однотипных цепочек действий, тем меньше он затрачивает ресурсов, а значит, тем эффективнее взаимодействие. 																																																																											
Конечно, при этом отмечается, что повторяющиеся шаблоны могут быть образованы из-за повторяющихся задач, которые либо невозможно или нецелесообразно автоматизировать, либо являются нормальным корректным поведением [1]. Поэтому требуется понимание семантики шаблонов и конкретных действий. 																																																																											
 																																																																											
Данные активности пользователей 																																																																											
 																																																																											
Введем несколько основных понятий, необходимых для формализации представления активности пользователей применительно к области оценки удобства использования. 																																																																											
Событие – факт, зафиксированный в определенный момент времени при взаимодействии определенного пользователя на определенном устройстве с программным пользовательским интерфей- сом [9]. Событие обладает непустым уникальным набором атрибутов: пользователь, устройство, время, тип события (например, событие действия, командное событие) и специальные атрибуты, зависящие от типа события. Например, событие клика мыши может содержать наименование клавиши (левая, правая), тип клика (одинарный, двойной), координаты положения курсора мыши и т.д. Событие исполнения команды (командное событие) может содержать наименование кнопки, наименование команды, способ исполнения (клик мыши, горячая клавиша, клавиша Enter). 																																																																											
Обозначим E множество всех зафиксированных 																																																																											
 																																																																											
событий: E = {e1, …, en}, где {ei}, i ?1, n – отдельные события; n – мощность множества E. 																																																																											
Сессия – зафиксированный временной промежуток, в течение которого пользователь взаимодействовал с программной системой [9]. В рамках сессии все события накапливаются и хранятся в хронологическом порядке. Важно отметить, что каждое событие является уникальным и может быть включено только в одну сессию. 																																																																											
Определим размещение – упорядоченный набор элементов множества либо с повторениями, либо без повторений в соответствии с общепринятым определением [10]. Размещение будем заключать в треугольные скобки. Тогда, если обозначать элементы множества целыми числами, размещения будут записаны в виде ?1, 2, 3, 1?. 																																																																											
Обозначим S множество всех зафиксированных 																																																																											
 																																																																											
сессий: S = {s1, …, sm}, где {si}, i ?1, m – отдельные сессии; m – мощность множества S. 																																																																											
Особо отметим, что каждое событие обладает непустым уникальным набором атрибутов, следовательно, является уникальным. 																																																																											
Сессия представляет собой размещение элементов множества E без повторений: si = ?ei1, …, eij?, 																																																																											
 																																																																											
где {eij},i ?1, , m j ?1, li – отдельное событие i-й сессии; li – мощность размещения si.  																																																																											
Множество E формируется в результате объединения всех множеств сессий, полученных из данных активности пользователей. При этом любое событие принадлежит хотя бы одной сессии:  ?e ? E, ?s ? S, e ? s, где E – множество всех зафиксированных событий; e – отдельное событие;  S – множество всех зафиксированных сессий; s – отдельная сессия. 																																																																											
 																																																																											
Классификация событий 																																																																											
 																																																																											
Заметим, что в размещении без повторений, которым изначально является сессия, невозможно существование регулярно повторяющихся шаблонов как упорядоченных подмножеств. Поэтому требуется предварительная классификация всех событий. 																																																																											
Классом событий будем считать произвольную совокупность событий, обладающих каким-либо определенным свойством или признаком. Например, возможна классификация событий по типу, по названию исполненной команды (для командных событий), по области пользовательского интерфейса (в области верхнего меню, в основной рабочей области). 																																																																											
Обозначим CE множество всех определенных классов событий: CE = {c1, …, ck}, {ci}, где i ?1, k – отдельный класс; k – мощность множества CE. 																																																																											
Для классификации событий вводится однозначная классифицирующая функция f, которая может быть записана как f : E ? CE. 																																																																											
Правила классификации и набор классов, безусловно, должны определяться экспертом. Заметим, что в зависимости от целей исследования часть событий может игнорироваться. Например, эксперта могут интересовать лишь командные события, то есть связанные с вызовом какой-либо команды. В этом случае будем говорить, что про- изведена фильтрация событий. 																																																																											
В дальнейшем под событием будем понимать событие именно после классификации, то есть класс события. Соответственно, под сессией будем понимать сессию после классификации и фильтра ции, так как поиск регулярных последовательных шаблонов невозможен до этих действий по причине уникальности каждого события. 																																																																											
Обозначим S? множество всех зафиксированных сессий, после классификации и фильтрации  																																																																											
 																																																																											
S? = {s1?, …, s?m}, где ?si??, i ?1, m – отдельная сессия; m – мощность множества S?. 																																																																											
Сессия после классификации представляет собой размещение элементов множества CE с повто-																																																																											
 																																																																											
рениями: s?i = ?ci1, …, cij?, где {сij},i ? 1, , m j ?1, li' – отдельное событие i-й сессии; l?i – мощность размещения s?i.  																																																																											
Обозначим ??? суммарное количество событий в сессиях после классификации и фильтрации: 																																																																											
m																																																																											
n? ? ?li' , где m – мощность множества S?; l?i – мощ-																																																																											
i?1 ность размещения s?i. 																																																																											
Например, пусть имеется сессия s = ?клик1, командаА, клик2, движение1, командаА, командаБ?. Определим классифицирующую функцию: 																																																																											
?1, если команда А, f ???2, если команда Б, 																																																																											
??3 в остальных случаях.																																																																											
Применив классифицирующую функцию, получим сессию s? = ?3, 1, 3, 3, 1, 2?. 																																																																											
Допустим, отфильтровав все события класса 3, получим сессию s? = ?1, 1, 2?. 																																																																											
 																																																																											
Поддержка последовательного шаблона 																																																																											
 																																																																											
Теория последовательных шаблонов подразумевает наличие множества кандидатов, для которых проверяется уровень поддержки. Для начала определим понятия шаблона и поддержки шаблона для одной сессии. 																																																																											
Обозначим P множество кандидатов последовательных шаблонов: P = {p1, …, pr}, где {pi},  i ?1, r – отдельный шаблон; r – мощность множества ??. 																																																																											
Шаблон представляет собой размещение элементов множества CE с повторениями: pi = ?ci1, …, 																																																																											
 																																																																											
cij?, где {cij}, i ?1, , r j ?1, qi , cij ? CE – отдельное со-																																																																											
бытие i-го шаблона; r – мощность множества P;  qi – мощность размещения pi, то есть количество событий в шаблоне. 																																																																											
Будем считать длиной шаблона или сессии количество событий в указанном размещении, а также то, что шаблон p входит в сессию s?, если все элементы p содержатся в s?, при этом порядок элементов в подмножестве из s? соответствует порядку элементов p. 																																																																											
Обозначим ?sp? количество вхождений шаблона p в сессию s?, рассчитываемую как количество непересекающихся упорядоченных вхождений. 																																																																											
 																																																																											
Например, пусть имеются сессия ?1, 2, 1, 2, 1, 2, 3, 1, 2, 1? и шаблон ?1, 2, 1?. Количество вхождений ? будет равно 2, так как 3-й элемент сессии (1) уже участвовал при подсчете. 																																																																											
Шаблон p называется поддерживаемым сессией s?, а следовательно, поддерживаемым пользователем, если количество вхождений ?sp? больше нуля. 																																																																											
Обозначим ?sp? поддержку шаблона p сессией s?, рассчитываемую следующим образом: 																																																																											
?s? *q																																																																											
s?	p	s?s?																																																																									
? ?p	 , 0 ?? ? ?p	1, где ? p – количество 																																																																									
l																																																																											
вхождений шаблона p в сессию s?; q – длина шаблона p; l – длина сессии s?. 																																																																											
Таким образом, для одной сессии можно описать значение поддержки как долю содержания шаблона в сессии. Это необходимо для сравнения разных шаблонов по степени влияния на процесс взаимодействия пользователя с ПО, что невозможно сделать на основе лишь значения количества вхождений. 																																																																											
Например, пусть имеется сессия ?2, 1, 2, 1, 3, 2, 1, 2, 1, 3?. 																																																																											
Рассчитаем значения ? и ? для следующих шаблонов: 																																																																											
p1 = ?2, 1?, ? = 4, ? = 0.8; p2 = ?2, 1, 2, 1?, ? = 2, ? = 0.8; p3 = ?2, 1, 2, 1, 3?, ? = 2, ? = 1; p4 = ?3, 2, 1, 2, 1, ?, ? = 1, ? = 0.5. 																																																																											
Поддержка шаблона p1 совпадает с поддержкой p2 и равна 0.8. Однако поддержка шаблона p3 равна 1, то есть он полностью составляет сессию, а значит, является более вероятным кандидатом для пристального внимания эксперта. Повышение эффективности взаимодействия пользователя с программным интерфейсом с подобным шаблоном кардинально может повысить эффективность всего процесса работы с ПО в целом. 																																																																											
Проанализируем, как меняются значения ? и ? при увеличении количества регулярных последовательностей событий. Для этого повторим набор событий в сессии: ?2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3?. 																																																																											
Рассчитаем значения ? и ? для следующих шаблонов: 																																																																											
p1 = ?2, 1?, ? = 8, ? = 0.8; p2 = ?2, 1, 2, 1?, ? = 4, ? = 0.8; p3 = ?2, 1, 2, 1, 3?, ? = 4, ? = 1; p4 = ?3, 2, 1, 2, 1, ?, ? = 3, ? = 0.75. Поддержка шаблонов p1, p2 и p3 осталась прежней несмотря на увеличение количества вхождений. Количество вхождений p4 увеличилось в 3 раза, но поддержка – лишь на 0.25. Шаблон p3 попрежнему составляет всю сессию, фактически полностью определяя взаимодействие пользователя с пользовательским интерфейсом, и оттого остается наиболее вероятным кандидатом для детального анализа экспертом. 																																																																											
Учитывая, что сессий может быть любое количество, необходимо агрегировать значение поддержки, сохранив их семантику, а именно долю  содержания шаблона в сессиях. Поэтому общая поддержка шаблона p множеством сессий рассчитывается как взвешенная средняя арифметическая. 																																																																											
Обозначим ? Sp? поддержку шаблона p множеством сессий S?, рассчитываемую как 																																																																											
?Sp? ? ?? ?? pi'li nli??? m? ?spi' *q , 0 ? ? ?sp? m ? ?s *q																																																																											
	*	? ? ? n																																																																									
	i 1 ?	?	i 1	?																																																																							
где S? – множество сессий после классификации и фильтрации; m – мощность множества S?; ?spi' – количество вхождений шаблона p в сессию si?; q – длина шаблона p; ?? – длина сессии si?; n? – суммарное количество событий в сессиях после классификации и фильтрации. 																																																																											
Полученные формулы позволяют рассчитывать значение поддержки различных последовательных шаблонов активности пользователей. Простое сравнение числовых значений поддержки позволяет ранжировать шаблоны по степени приоритета для детального анализа. 																																																																											
 																																																																											
Математическая модель активности  пользователей 																																																																											
 																																																																											
Для оценки эффективности взаимодействия пользователя с пользовательским интерфейсом необходимо относительно выбранных шаблонов рассчитать затраченные ресурсы пользователя. Однако шаблоны содержат не исходные события, а классы, не имеющие информации о реальной длительности временных интервалов между событиями. 																																																																											
Для преобразования классов в затрачиваемое время вводится скалярная функция ??, которая может быть записана следующим образом: t C : E ? , где CE – множество всех определенных классов событий;   – множество положительных вещественных чисел. 																																																																											
На данный момент авторы предлагают, чтобы функцию t определял эксперт на основе знаний о системе. Эксперт может воспользоваться известными моделями. Например, существует распространенный метод оценки эффективности интерфейса – GOMS (Goals, Operators, Methods, Selection Rules – Цели, Операторы, Методы, Правила выбора соответственно) [11]. Идея метода заключается в разбиении взаимодействия пользователя с интерфейсом на атомарные физические и когнитивные действия. Обладая знаниями о метриках каждой из таких составляющих, можно делать заключение  об эффективности взаимодействия в целом: оценка эффективности интерфейса сводится к разбиению типовых задач на элементарные действия и сложе- нию метрик каждого из них. Метод GOMS вклю- чает в себя модель Keystroke-level Model (KLM) [11], которая выделяет следующие элементарные задачи и длительность каждой из них (рассчитанные на основе усредненных данных лабораторных испытаний): 																																																																											
•	K – нажатие на клавишу в зависимости от уровня владения клавиатурой: профессиональный наборщик – 0.08 сек., эксперт – 0.12 сек., частая работа с текстом – 0.20 сек., продвинутый пользователь – 0.28 сек., неуверенный пользователь –  0.5 сек., не знакомый с клавиатурой – 1.2 сек.; 																																																																										
•	P – указание курсором мыши на объект –  																																																																										
1.1 сек.; 																																																																											
•	B – нажатие или отпускание мыши – 0.1 сек.; • M – умственная подготовка, выбор дейст- 																																																																										
вия – 1.2 сек.; 																																																																											
•	H – перемещение руки в исходное положение на клавиатуре – 0.4 сек; 																																																																										
•	R – ожидание ответа системы, зависящее от времени выполнения системой запрошенной операции. 																																																																										
Оценка времени на решение задачи сводится к сложению продолжительностей каждой из простейших составляющих. Например, задача, состоящая из классов ?P, P, B?, потребует для завершения 2.3 сек. (1.1 сек. + 1.1 сек. + 0.1 сек.). 																																																																											
Аналогично оценка времени, затрачиваемого на один шаблон, сводится к сложению продолжительности его составляющих и произведению полученной суммы на количество вхождений. Например, обозначим t(p) суммарные затраты времени пользователями на шаблон p для всего множества сес-																																																																											
	q	m	'																																																																								
сий и рассчитаем их: t p? ? ?? ?t c? i ?* ?spj , где {ci},																																																																											
	i?1	j?1																																																																									
 																																																																											
i ?1, , r ci ? CE – отдельное событие шаблона. Таким образом, можно описать общую математическую модель активности пользователей: M =  = {E, CE, f, S, S?, P, ?, t}, где E ={ei}, i ?1,n – множество событий с атрибутами; CE = {ci}, i ?1,k – множество классов событий; f: E ? CE – функция 																																																																											
 																																																																											
классификации событий; S = {si},  i ?1,m – множество сессий до классификации, si = ?ei1, …, eil?,																																																																											
 																																																																											
i ? 1,m – сессия до классификации, l – длина i-й 																																																																											
 																																																																											
сессии; S? ? ?s 'i?, i ?1,m – множество сессий после классификации и фильтрации, s'j ? ci1 ?cil? ,  																																																																											
 																																																																											
i ?1,m – сессия после классификации и фильтра-																																																																											
ции, l? – длина i-й сессии после классификации и 																																																																											
 																																																																											
фильтрации; P = {pi}, i ?1,r – множество последовательных шаблонов, pi = ?ci1, …, ciq?,  i ?1,r – последовательный шаблон; ?? ? ?? Spi? | 0 ?? ?Sp? 1, ? 																																																																											
?pi ?P i, ?1,r? – множество значений поддержки последовательных шаблонов; t C : E ? ? – функция преобразования класса событий в затрачивае- мое время. 																																																																											
Данная модель может найти применение при оценке удобства использования пользовательских интерфейсов и для решения задач повышения эффективности взаимодействия пользователей с ПО. 																																																																											
Имея значения поддержки и затрачиваемого времени для каждого шаблона, эксперт может сконцентрироваться на наиболее значимых из них для процесса работы пользователей с ПО в целом. Набор шаблонов при этом будет зависеть от целей проводимого анализа. 																																																																											
Далее эксперт может выдвинуть гипотезы о необходимых изменениях в пользовательском интерфейсе для повышения эффективности взаимодействия пользователей с ПО. При принятии решений эксперту необходимо учитывать множество различных факторов: особенности ПО, психологические факторы использования ПО и особенности пользователей. 																																																																											
Изменение пользовательского интерфейса повлечет изменение множеств событий, сессий и  последовательных шаблонов, так как изменится последовательность действий, необходимых для достижения пользователями поставленных целей. 																																																																											
Таким образом, можно утверждать, что задачей эксперта становится переход от текущей модели активности пользователей к новой, с иным составом сессий и шаблонов, следовательно, и иными значениями поддержки шаблонов и затратами времени пользователей. 																																																																											
После внесения изменений в программный  интерфейс возможны повторный сбор и анализ данных активности пользователей, что может подтвердить либо опровергнуть выдвинутую ранее гипотезу. 																																																																											
 																																																																											
Заключение 																																																																											
 																																																																											
В статье введены основные формальные определения в предметной области удобства использования и представлена математическая модель активности пользователей ПО. 																																																																											
Предложенную математическую модель целесообразно использовать для решения задач повы-																																																																											
шения эффективности человеко-компьютерного взаимодействия, проектирования и создания пользовательских интерфейсов. Сформирована концептуальная задача для эксперта при использовании представленной математической модели как переход от текущей модели активности пользо- вателей к новой, с иным составом сессий и шаблонов, позволяющим судить о повышении эф- фективности взаимодействия пользователя с  программным интерфейсом. В данный момент проводится анализ эффективности разработанной математической модели для различных типов интерфейсов программных систем.																																																																											

КОМПЬЮТЕРНОЕ СОПРОВОЖДЕНИЕ ПРЕПОДАВАНИЯ ГРАФИЧЕСКИХ ДИСЦИПЛИН КАК УСЛОВИЕ ФОРМИРОВАНИЯ ГРАФИЧЕСКОЙ КОМПЕТЕНТНОСТИ																																																																											

Графические дисциплины занимают особое место в общей системе профессиональной под- готовки современных специалистов.																																																																											
Как известно, «образовательная система нахо- дится на стадии модернизации традиционной на- правленности образовательного процесса в компе- тентностную, смещенную в сторону “результатов образования”. Компетентность можно обозначить как умения — личностные качества человека, имеющие деятельностную основу, способствую- щие решению им стандартных, нестандартных, творческих задач разного уровня в разнообраз- ных социальных и производственных ситуациях» [1, с. 50]. Формирование графической компетент- ности направлено на подготовку выпускников, грамотных в области графической деятельности; владеющих совокупностью знаний о графических методах, способах, средствах, правилах отобра- жения, сохранения, передачи, преобразования ин- формации; способных использовать полученные знания, умения и навыки не только для адаптации к условиям жизни в информационном обществе, но и для активного участия в производственной и творческой деятельности. Содержание компе- тенций предполагает:																																																																											
–	способность самостоятельно приобретать новые знания и умения и использовать их в сфе- ре профессиональной деятельности;																																																																										
–	способность решать прикладные инже- нерно-геометрические задачи и оформлять тех- ническую документацию согласно Единой си- стеме конструкторской документации (ЕСКД);																																																																										
 																																																																											

– готовность осуществлять контроль за со- ответствием оформляемой технической доку- ментации стандартам, техническим условиям и другим нормативным документам [1, с. 51].																																																																											
Сформированная графическая компетент- ность позволяет, среди прочего, при непре- рывном увеличении научной и технической информации улучшить качество изучения как общеобразовательных, так и специальных дисциплин. Для успешного же формирования данного вида компетентности в современных образовательных условиях можно использовать графические возможности информационных компьютерных технологий. В этом случае ме- тодом формирования графической компетент- ности может быть выполнение графических самостоятельных работ в специализированной компьютерной среде. При выстраивании сис- темы таких работ важнейшим этапом является целеполагание.																																																																											
Современные образовательные технологии предполагают цели обучения формулировать че- рез результаты обучения, выраженные в действиях обучающихся, то есть в компетентности. Наибо- лее распространенные категории целей в познава- тельной области и некоторые типичные действия студентов заключаются в следующем [1].																																																																											
1.	Категория «знать» — определяет способ- ность помнить выученный ранее материал. Ти- пичные действия: знает, определяет, описывает, обозначает, называет, изображает на чертеже или схеме.																																																																										
 																																																																											

46																																																																											
 																																																																											

 																																																																											

 																																																																											

2.	Категория «понимать смысл» — опреде- ляет способность усвоить суть учебного мате- риала. Типичные действия: различает, сравни- вает, идентифицирует, выбирает, доказывает.																																																																										
3.	Категория «сознательно использовать» — понимается как способность применять выу- ченный материал в новых ситуациях на уровне решения стандартных задач. Типичные дейст- вия: изменяет, решает, употребляет, оценивает, находит, объясняет, рассчитывает.																																																																										
4.	Категория «анализировать» — определя- ет способность разделить учебный материал на компоненты для его уяснения и уточнения его структуры. Здесь начинается уровень решения нестандартных задач. Типичные действия: ана- лизирует, дифференцирует, охватывает, отделя- ет, противопоставляет.																																																																										
5.	Категория «синтезировать» — означа- ет способность соединять отдельные элементы в единое целое (систему), т. е. формировать новые структуры для решения нестандартных задач. Типичные действия: составляет, разрабатывает, развивает, по-новому формулирует, планирует.																																																																										
6.	Категория «оценивать» — понимается как способность определять значимость материала с точки зрения известной цели. Типичные дей- ствия: определяет, интерпретирует, критикует.																																																																										
Использование четкой, упорядоченной классификации целей позволяет сконцентри- ровать усилия в процессе изучения дисципли- ны на главном, обеспечить ясность и гласность в совместной работе преподавателя и студента.																																																																											
Для реализации основной цели обучения курсантов и формирования у них графической компетентности в рамках программы препода- вателю, по нашему мнению, необходимо решать ряд следующих задач:																																																																											
–	научить вдумчиво наблюдать и анализи- ровать форму и размеры реальных предметов, развивать образное мышление, статическое, ди- намическое и пространственное представление о конструктивных особенностях деталей и сбо- рочных единиц;																																																																										
–	обучить будущих специалистов основ- ным и наиболее распространенным методам графического изображения,  познакомить  их с условными  обозначениями,  применяемыми в процессе передачи информации графически- ми средствами, научить читать и передавать эти изображения и обозначения (технические чер- тежи, схемы, графики и т. д.);																																																																										
–	развивать у обучаемых творческие каче- ства, способности к рационализации и усовер- шенствованию изучаемой и практически ис- пользуемой техники;																																																																										
 																																																																											

–	познакомить обучающихся с возможно- стями современных компьютерных графиче- ских программ;																																																																										
–	прививать умение самостоятельно рабо- тать со справочными и иными материалами, ре- шать пространственные задачи.																																																																										
При разработке методики проведения за- нятий по выполнению графических самостоя- тельных работ в специализированной компью- терной среде мы пришли к выводу, что процесс формирования графической компетентности будет более успешным, если сочетать приме- нение компьютерных графических технологий и пособий с иллюстративно-дискретной пода- чей учебного материала.																																																																											
В основе любого графического пакета ком- пьютерных программ лежит язык описания ин- формации, позволяющий выполнять различные построения.																																																																											
На практическом занятии по выполнению чертежей методами компьютерной графики мы использовали графический пакет NanoCAD — универсальный редактор векторной графики.																																																																											
Программа NanoCAD СПДС предназначе- на для оформления проектно-конструкторской документации в соответствии со стандартами ЕСКД. Она обеспечивает высокую скорость работы и автоматизацию рутинных операций благодаря применению интеллектуальных па- раметрических объектов. Программа базирует- ся на графическом ядре NanoCAD и содержит все инструменты для создания двумерных чер- тежей.																																																																											
Как мы уже отмечали, методической ос- новой для построения занятий по инженерной графике является иллюстративно-дискретный метод подачи учебного материала, согласно ко- торому:																																																																											
–	на самостоятельную проработку и са- моконтроль усвоения отнесен основной стан- дартизованный материал программ, который располагают в строгой логической последова- тельности, а его объем сокращают до разумно- го предела за счет исключения второстепенных вопросов;																																																																										
–	четко очерчены  центральные  вопросы и понятия, а также связь между ними;																																																																										
–	материал  дробят  на  взаимосвязанные и удобные, доступные для понимания и усвое- ния небольшие части — познавательные циклы. Каждому такому циклу соответствует иллю- страция. Иллюстрация (графический компо- нент) и словесный компонент, являющиеся эта- лоном для сравнения, располагаются на одной странице [2].																																																																										
 																																																																											

47																																																																											
 																																																																											

 																																																																											

Опыт проведения занятия показал, что при создании чертежей средствами компьютерной графики с использованием иллюстративно-дис- кретного метода подачи учебного материала ак- тивизируется внимание, уменьшается как тру- доемкость работы, так и время ее выполнения, повышается интерес к предмету.																																																																											
Для оценки эффективности занятия было проведено  тестирование,  в  котором  приня- ли участие 80 курсантов. Было предложено																																																																											
Библиографический список																																																																											
 																																																																											

два теста: «Целесообразность использования компьютерных технологий» и «Остаточные знания после выполнения чертежа “Болтовое соединение”». Результаты тестирования пока- зали, что 90 % курсантов высказались за ис- пользование компьютерных технологий при обучении графическим дисциплинам. При проверке остаточных знаний 80 % курсантов правильно ответили на предложенные тесто- вые вопросы.																																																																											

КЛАССИФИКАЦИЯ ТЕКСТОВ ПО ТОНАЛЬНОСТИ МЕТОДАМИ МАШИННОГО ОБУЧЕНИЯ																																																																											
Введение																																																																											
В современном мире задача классификации текстов получила боль- шое распространение вследствие увеличения объема текстовой инфор- мации в мировом информационном пространстве. В связи с этим возни- кает потребность в системах обработки текстовой информации, её хра- нения и анализа.																																																																											
Предположим, имеется некоторый текст, который может представ- лять собой сообщение, отзыв или комментарий. Задачей является опре- делить, какую эмоцию несет в себе этот текст: симпатия, разочарование, восторг, недовольство, сомнение и т. п. В общем случае эмоции можно классифицировать на позитивные и негативные (положительные и отри- цательные), поэтому в работе рассматривается именно задача бинарной классификации.																																																																											
В статье кратко рассмотрены существующие методы классификации текстов   по   тональности,   разработана   функционирующая    модель для классификации текстов по тональности, а также проведены экспери- ментальные исследования на тестовых данных.																																																																											
1.	Постановка задачи и обзор методов классификации текстов																																																																										
Анализ тональности текста является подзадачей обработки есте- ственного языка (Natural Language Processing, NLP), цель которой — классификация текста в соответствии с эмоциональной окраской, кото- рую он в себе несет [1].																																																																											
Существуют две основные группы подходов к анализу тональности текстов: подходы на основе правил (лингвистические) и подходы на ос- нове машинного обучения. Подходы на основе машинного обучения (с учителем) более универсальны и не требуют создания словарей и пра- вил для конкретной предметной области, поэтому в данной статье рас- сматриваются именно такие методы.																																																																											
Задача классификации текстов по тональности формализуется сле- дующим образом: необходимо построить модель для классификации F, которая после обучения на выборке D определяет текст Ti к одному из классов множества y — то есть к отрицательному или положительному классу текстов:																																																																											
 																																																																											
F ?D,Ti ? ??y1, y2?.																																																																											
 																																																																											
(1)																																																																											
 																																																																											

Поставленная задача классификации может решаться с помощью различных методов машинного обучения, а также с помощью нейронных																																																																											
 																																																																											
сетей [2]. В последние годы все чаще используются методы глубокого обучения (Deep Learning), к которым относятся нейронные сети. Такие методы могут значительно превосходить классические методы в задаче анализа тональности текстов [3]. Среди различных видов нейронных се- тей класс рекуррентных нейросетей зачастую превосходит другие классы в рассматриваемой задаче [1].																																																																											
Рекуррентные сети имеют обратные связи, и для вычисления теку- щего состояния они используют предыдущие состояния [4]. Это важно для анализа тональности текста, ведь при определении эмоциональной окраски текста важно анализировать текст именно как последователь- ность. Рекуррентные нейронные сети имеют весомый недостаток: при каждой итерации информация в памяти смешивается с новой информа- цией, а после нескольких итераций полностью перезаписывается. Такая проблема называется проблемой исчезающего градиента (vanishing gradient problem) [5].																																																																											
Архитектура рекуррентной нейронной сети, которая позволяет уменьшить проблему исчезающего градиента — «Долгая краткосрочная память» (от англ. Long Short Term Memory — LSTM) [6]. LSTM-сети не- редко применяются в задаче классификации текстов и, в частности, клас- сификации текстов по тональности. Такая архитектура зачастую показы- вает достаточно высокие результаты по сравнению как с другими мето- дами машинного обучения, так и с другими архитектурами нейронных сетей [7, 8], поэтому основу созданной модели составляет LSTM-сеть.																																																																											
2.	Сеть LSTM — «Долгая краткосрочная память»																																																																										
В сетях LSTM элементом сети является набор слоёв, взаимодей- ствующих друг с другом по определённым правилам. Подобные наборы называются ячейками. Структура LSTM сети, развернутой во времени, представлена на рисунке 1.																																																																											



Рис. 1. Сеть LSTM, развернутая во времени																																																																											
 																																																																											
На вход сети в разные моменты времени поступают элементы по- следовательности xt-1, xt, xt+1, и в каждый момент времени сеть выдает значения ht-1, ht, ht+1. Такая сеть передает два значения на вход своей ко- пии в следующий момент времени. Работа ячейки описывается набором формул (2):																																																																											

ft ? ? (Wf xt ?Uf ht ?1);																																																																											
it ? ? (Wi xt ?Uiht ?1 );																																																																											
Сt ? tanh(Wc xt ?Ucht ?1 );																																																																											
(2)																																																																											
Ct ? ft *Ct ?1 ? it *Ct ;																																																																											
ot ? ? (W0 xt ?U0ht ?1 );																																																																											
ht ? ot * tanh(Ct );																																																																											
где ft — выходной вектор вентиля забвения, it — выходной вектор вход-																																																																											
 																																																																											
ного вентиля, Сt																																																																											
 																																																																											
— вектор новых значений-кандидатов, которые можно																																																																											
 																																																																											
добавить в состояние ячейки, Ct — новое состояние ячейки, ot — вектор выходного вентиля. Более подробно работа данной архитектуры описана в книге [9].																																																																											
3.	Создание и обучение нейросети																																																																										
3.1.	Используемые средства и наборы данных																																																																										
Для решения поставленной задачи использовался язык программи- рования Python, а также библиотеки TensorFlow и Keras.																																																																											
В качестве наборов данных для обучения и тестирования были ис- пользованы YELP [10] и Large Movie Review Dataset (IMDB) [11]. Набор данных Yelp reviews Polarity содержит отзывы о различных услугах, сер- висах и местах на английском языке. Набор IMDB содержит рецензии на различные фильмы на английском языке.																																																																											
Говоря об анализе эмоциональной окраски текстов, важно учиты- вать, что тексты в интернете могут иметь разную специфику: например, нейронная сеть, обученная на наборе данных с рецензиями на книги, мо- жет плохо справляться с определением тональности комментариев в со- циальной сети. Это связано с тем, что такие тексты имеют ряд различий: у них может значительно отличаться длина (количество слов), лексика (более формальная, либо же более свободная с использованием сленга и аббревиатур), и т. д. Поэтому с целью создания наиболее универсальной модели нейронной сети для ее обучения было принято решение исполь- зовать тренировочный набор, составленный из отзывов набора YELP и набора IMDB в совокупности. После слияния тренировочных наборов было получено 604000 отзывов для обучения нейронной сети, структура полученного набора представлена на рисунке 2.																																																																											
 																																																																											
 																																																																											

Рис. 2. Структура тренировочного набора																																																																											

3.2.	Предварительная обработка данных																																																																										
К этапу предобработки данных на естественном языке относятся: очистка данных (удаление из исходного текста особых знаков, символов, пунктуации), предварительная обработка данных (например, перевод всех символов текста в нижний регистр), а также удаление стоп-слов (это часто используемые слова, которые не влияют на смысл текста, такие как артикли, предлоги, союзы, частицы, местоимения).																																																																											
Однако для задачи анализа тональности текста нельзя удалять все стоп-слова, так как это может отразиться на эмоциональной окраске от- зыва. Например, текст “The movie was not good at all” (фильм был не со- всем хорош) после удаления стоп-слов превратится в “movie good” (фильм хорош). Как можно заметить, тональность текста при удалении стоп-слов изменилась на противоположную. Кроме того, слова, усили- вающие тональность, также стоит оставить в текстах. Таким образом, из списка стоп-слов были удалены слова “no”, “not”, обозначающие отри- цание, и “very”, усиливающее тональность последующего слова.																																																																											
Воспользуемся методом Word2Vec для получения векторных пред- ставлений слов и обучим модель на корпусе отзывов тренировочного набора. Word2Vec — одна из наиболее эффективных и широко исполь- зуемых моделей для формирования векторных представлений слов. Ме- тод основывается на том, что слова, которые похожи по значению, долж- ны иметь схожие значения векторов [12]. В данной работе учитываются																																																																											
6 соседних слов из контекста, в модель сохраняются слова, которые встречаются более 1 раза.																																																																											
Далее воспользуемся классом Tokenizer и обучим его на отзывах. В процессе обучения строится словарь соответствия каждого слова и его числового представления. Токенизация производится, опираясь на то, как часто каждое слово встречается в тексте. Затем преобразуем текст в число- вое представление (последовательность) на обученном токенайзере.																																																																											
 																																																																											
Ограничим максимальную длину отзыва средним количеством слов в рассматриваемых текстах — числом 100. Если в отзыве больше задан- ного количества слов, он обрезается, если же меньше — он дополняется нулями в начале числовой последовательности до заданного размера.																																																																											
3.3.	Создание и обучение модели																																																																										
Для создания нейронной сети был использован последовательный тип модели Sequential, где можно последовательно добавлять слои. Пер- вый слой — Embedding («слой встраивания») который содержит матрицу встраивания, полученную после обучения модели Word2Vec. Параметр trainable равен False, так как эта модель уже обучена. Длина последова- тельностей, подаваемых на вход, равна 100, как и длина ограниченных ранее отзывов. Второй слой — LSTM со 128 ячейками. Выходной слой выдает 1 нейрон, функция активации — сигмоидальная. Схема модели приведена на рисунке 3.																																																																											

Рис. 3. Схема модели нейронной сети																																																																											
Для компиляции модели в качестве оптимизатора используем Adam, в качестве функции потери применялась бинарная кросс-энтропия, а в качестве метрик для оценки модели — accuracy (доля правильных от- ветов), precision (точность) и recall (полнота). Подробно метрики рас- смотрены в работе [13].																																																																											
Для того, чтобы обойти проблему переобучения, можно использо- вать callback (обратный вызов): таким образом, модель будет сохранять- ся на каждой эпохе обучения, а лучшая копия (по параметру точности на проверочном наборе данных) будет сохранена в файл.																																																																											
При обучении нейросети зададим следующие параметры: эпох — 12, размер минимальной выборки — 128, а также для проверки на прове- рочном наборе данных будет использоваться 10 % набора.																																																																											
График долей правильных ответов классификатора приведен на ри- сунке 4.																																																																											
 																																																																											
 																																																																											

Рис. 4. График долей правильных ответов классификатора на обучающем и проверочном наборах																																																																											
Наибольшая доля правильных ответов на проверочном наборе дан- ных была достигнута на эпохе 9 — это 0.94463 (или 94,463 %). Таблица всех используемых метрик на обучающей и проверочной выборке для лучшей модели сети приведена ниже (табл. 1).																																																																											
Таблица 1																																																																											
Значения метрик качества для обучающей и проверочной выборки тренировочного набора																																																																											

Тип выборки	Доля верных ответов	Точность	Полнота																																																																								
Обучающая выборка	0.9531	0.9527	0.9535																																																																								
Проверочная выборка	0.9446	0.9437	0.9453																																																																								
4.	Оценка полученных результатов и варианты внедрения																																																																										
4.1.	Оценка работы модели на тестовых наборах																																																																										
Для тестирования используем тестовые выборки из датасетов YELP и IMDB, на которых обучалась модель. В таблице 2 представлены мет- рики для обоих наборов.																																																																											
Таблица 2																																																																											
Метрики качества работы нейросети на тестовых наборах																																																																											

Тестовый набор	Доля верных ответов	Точность	Полнота																																																																								
Тест. набор YELP	0,9498	0.9572	0.9418																																																																								
Тест. набор IMDB	0,8920	0.8932	0,8892																																																																								

Таким образом, были получены достаточно высокие доли верных ответов на обоих тестовых наборах — почти 95 % на YELP и чуть боль- ше 89 % на IMDB. Точность выше на первом наборе, так как он намного больше набора с рецензиями, и для обучения нейронной сети доминиру- ющую часть обучающего набора составляли именно отзывы из YELP. Соответственно, полученная модель с большой точностью классифици- рует подобные отзывы о товарах, услугах и сервисах, однако с рецензия- ми на фильмы она также справляется на достаточно высоком уровне.																																																																											
 																																																																											
Для того, чтобы сравнить эффективность работы различных методов машинного обучения с полученной моделью нейронной сети, воспользу- емся библиотекой Sklearn. Применим наивный байесовский классифика- тор, логистическую регрессию и стохастический градиентный спуск к тем же наборам данных, с которыми работали ранее: для обучения ис- пользуем объединенный корпус из отзывов наборов YELP и рецензий IMDB, а для тестирования — тестовые наборы этих датасетов. Также проведем процесс предварительной обработки текстов с обоими набора- ми, затем применим векторизацию. В таблице 3 представлено сравнение результатов разработанной модели с другими методами машинного обу- чения.																																																																											
Таблица 3																																																																											
Сравнение методов машинного обучения в задаче классификации текста по тональности																																																																											
Метод машинного обучения	Доля верных ответов																																																																										
	YELP	IMDB																																																																									
Наивный байесовский классификатор	0.8119	0.8003																																																																									
Логистическая регрессия	0.9279	0.8688																																																																									
Стохастический градиентный спуск	0.9293	0.8793																																																																									
Разработанная модель (Word2Vec + LSTM)	0.9498	0.8920																																																																									
Как можно заметить, полученная модель нейронной сети показывает наибольшую точность по сравнению с другими методами на обоих те- стовых наборах данных.																																																																											
4.2.	Пример практического использования модели																																																																										
Полученная модель достаточно универсальна и может применяться в различных областях, где тональность текстов имеет значение. Чтобы проиллюстрировать практическое применение, был выбран анализ ком- ментариев под видео на сайте YouTube. Не так давно видеохостинг от- ключил демонстрацию количества отрицательных отметок к видео (диз- лайков), поэтому нельзя понять мнение пользователей о видео по соот- ношению отметок (лайков/дизлайков), как это было ранее. Для этого можно воспользоваться анализом тональности отзывов и понять соотно- шение положительных и отрицательных мнений.																																																																											
Сначала необходимо объединить комментарии в набор данных, за- тем применить к нему функцию предварительной обработки текста и удалить пустые строки. Далее нужно загрузить и применить предобучен- ный токенайзер, а также модель нейронной сети. Можно проиллюстри- ровать полученные результаты с помощью круговой диаграммы (рис. 5).																																																																											
 																																																																											
 																																																																											

Рис. 5. Пример диаграммы положительных и отрицательных отзывов о видео																																																																											

Таким образом, применяя полученную в этой работе модель, можно вывести соотношение положительных и отрицательных мнений о видео, представив их наглядно в виде диаграмм. Нельзя исключать тот факт, что какой-то процент отзывов скорее бы относился к «нейтральным» при рассмотрении трех классов текстов (положительные, отрицательные и нейтральные), однако рассмотренная бинарная классификация предо- ставляет более «грубую» статистику, что также, безусловно, важно для различных целей.																																																																											
Заключение																																																																											
В работе были рассмотрены различные методы машинного обуче- ния для задачи классификации текстов. Кроме того, были изучены научные статьи на тему нейронных сетей в задачах анализа данных на естественном языке. Была создана нейронная сеть на языке Python с использованием библиотек TensorFlow и Keras. Нейросеть была обу- чена на наборах данных YELP и IMDB, которые включают отзывы на различные услуги и места, а также рецензии на фильмы.																																																																											
Полученная модель нейросети показала высокий результат в зада- че классификации текстов по тональности: доля верных ответов на те- стовых наборах данных составила почти 95 % на наборе YELP и чуть больше 89 % на наборе IMDB. Также был проиллюстрирован пример практического использования результатов проведенного исследования. Таким образом, полученная модель нейронной сети для классифи- кации текстов по тональности имеет высокую точность и может при- меняться для различных прикладных задач, таких, как, например, ана- лиз мнений о различных товарах и услугах или оценка реакции людей																																																																											
разного рода события или изменения.																																																																											

АРХИТЕКТУРА МОДЕЛИ LSTM ДЛЯ ПРОГНОЗИРОВАНИЯ ВРЕМЕННЫХ РЯДОВ РЕДКИХ СОБЫТИЙ																																																																											
Анализ временных рядов относится к анализу изменения тренда данных за определенный период времени. Анализ временных рядов имеет множество применений, от прогнозирования будущей стоимости товара на основе его прошлых значений до более сложных экономических и информационных явлений [1].																																																																											
Долгая краткосрочная память (LSTM) – особая разновидность архитектуры рекуррентных нейронных сетей (РНС), способная к обучению долговременным зависимостям. Они могут решать ряд разнообразных задач и в настоящее время обширно используются.																																																																											
LTSM сети были представлены и разработаны З. Хохрайтер и Ю. Шмидхубером в 1997 году специально, для того, чтобы избегать проблем долговременной зависимости. Их специализация – запоминание информации в течение длительных периодов времени, поэтому они не нуждаются в долгом обучении.																																																																											
Все рекуррентные нейронные сети имеют форму цепочки повторяющихся модулей нейронной сети. В стандартных РНС этот повторяющийся модуль имеет простую структуру, например, один слой tanh[2].																																																																											
На приведенной выше диаграмме каждая линия является вектором. Розовые круги обозначают поточечные операции, например, суммирование векторов. Желтые ячейки – это слои нейронной сети. Совмещение линий – это объединение векторов, а знак разветвления – копирование вектора с последующим хранением в разных местах.																																																																											
 																																																																											
Ключевым	понятием	LSTM	является	состояние	ячейки	(горизонтальная	линия, проходящая через верхнюю часть диаграммы).																																																																				


Рис. 1. Структура обычной РНС																																																																											


Рис. 2. Структура LTSM																																																																											

Состояние ячейки похоже на конвейерную линию. Оно проходит через всю цепочку, подвергаясь незначительным линейным преобразованиям.																																																																											
В LSTM уменьшает или увеличивает количество информации в состоянии ячейки, в зависимости от потребностей. Для этого используются гейты – структуры, которые тщательно настраиваются.																																																																											
Гейт – это «ворота», пропускающие или не пропускающие информацию. Гейты состоят из сигмовидного слоя нейронной сети и операции поточечного умножения.																																																																											
Но не все LSTM одинаковы. Существует много вариаций LSTM. Отличия между ними незначительны, но о некоторых из них стоит упомянуть.																																																																											
Одна из популярных вариаций LSTM, характеризуется добавлением так называемых																																																																											
“смотровых глазков”. С их помощью слои фильтров могут видеть состояние ячейки.																																																																											


Рис. 3. Структура LTSM с добавлением “смотровых глазков”																																																																											
 																																																																											
Другие модификации включают объединенные фильтры “забывания” и входные фильтры. В этом случае решения, какую информацию следует забыть, а какую запомнить, принимаются не отдельно, а совместно. Мы забываем какую-либо информацию только тогда, когда необходимо записать что-то на ее место. Мы добавляем новую информацию с состояние ячейки только тогда, когда забываем старую.																																																																											

Рис. 4. Структура LTSM с фильтрами “забывания”																																																																											

Немного больше отличаются от стандартных LSTM управляемые рекуррентные нейроны. В ней фильтры «забывания» и входа объединяют в один фильтр «обновления». Кроме того, состояние ячейки объединяется со скрытым состоянием, есть и другие небольшие изменения. Построенная в результате модель проще, чем стандартная LSTM.																																																																											

Рис. 5. Структура LTSM с управлемыми рекуррентными нейронами																																																																											

Это лишь несколько самых примечательных вариаций LSTM. Существует множество других модификаций.																																																																											
LSTM – большой шаг в развитии РНС. При этом возникает вопрос, каким будет следующий большой шаг. По общему мнению исследователей, следующий шаг заключается в использовании механизма внимания. Идея состоит в следующем: каждый шаг РНС берет данные из более крупного хранилища информации. Например, если мы используем РНС для генерации подписи к изображению, то такая РНС может рассматривать изображение по частям и на основании каждой части генерировать отдельные слова. Последние несколько лет – время расцвета рекуррентных нейронных сетей, и следующие годы обещают принести еще большие плоды.[3]																																																																											

АЛГОРИТМ НЕЧЕТКОЙ КЛАСТЕРИЗАЦИИ В ТЕХНОЛОГИИ DATA MINING																																																																											
Введение. Современное состояние информационных технологий предполагает наличие развитых средств хранения и переработки данных, объемы которых достигают размерности неоднозначной к традиционным представлениям, когда удваивание их числа происходит практически через каждые двух- трёхгодичные интервалы, что значительно усложняет методики их обработки и анализа. Исходя из этого, в последние годы была разработана новая технология Data Mining, предназначенная для решения приведенных задач в процессе системного анализа данных, ориентированных на концептуальные принципы принятия решений на основе не тривиальных, полезных, неизвестных ранее знаний, формализуемых в терминах рассматриваемой проблемной области закономерностями их представления классами, кластерами, ассоциативными правилами, деревьями решений [1].																																																																											
К настоящему времени широкое использование получила также применение Data Mining для обнаружения и поиска закономерностей в сети Internet , получивший название Web Mining, предполагающий анализ использования Web-ресурсов, извлечение Web-структур и извлечение Web- контента, a ориентация соответствующих ресурсов Web Mining предполагает решение задач описания посетителей сайта, определения типичных сессий и навигационных путей пользователей, а также групп или сегментов посетителей, что связано с задачей кластеризации [2]. При этом вводится понятие Profile Mining, связанное с сегментацией пользователей относительно их идентификации и анализа в аспекте выявления групп пользователей со схожими характеристиками потребностей, желаний и др. [3].																																																																											
Постановка задачи. Предположим, что под {X} мы будем понимать совокупность объектов, {Y}- совокупность идентификаторов кластеров, а ??(??, ???)-функцию расстояния между объектами и таким образом, можно говорить о существовании ???? = {??1, ??2, ??3, … , ????}, которая должна быть представлена непересекающимися кластерами относительно меры близости или различия соответствующих характеристик с учетом введенной метрики. Классическая задача кластеризации предполагает наличие алгоритма введения функции ??: X?Y, исходя из которой произвольному объекту x?X ставится в соответствие идентификатор кластера y?Y, причем в отдельных ситуациях {Y} может быть заранее известно, а в других оно должно быть определено на основе введенного критерия качества кластеризации [4].																																																																											
К настоящему времени проводятся исследования по созданию новых принципов кластерного анализа, ориентированных на очень большие базы данных, когда особое значение приобретает вопрос масштабируемости, который, практически, не рассматривался в классических методах.																																																																											
 																																																																											
Методы решений. Исследования, проведенные в аспекте указанной постановки задачи показывают ее обусловленность двумя основными факторами: оптимальностью разбиения и определением понятия сходства как краеугольного при решении данного класса задач. Если первый из них рассматривается в аспекте введения функционала, как целевой функции, заданной в виде внутригрупповой суммы квадратов(вск) отклонений:																																																																											

 																																																																											
??																																																																											
?? = ?																																																																											
 																																																																											
(??																																																																											
 																																																																											
? ???)2 = ???																																																																											
 																																																																											
??2  ?  1 (???																																																																											
 																																																																											
 																																																																											
?? )2,																																																																											
 																																																																											
??=1      ??																																																																											
 																																																																											
??=1    ??																																																																											
 																																																																											
??	??=1    ??																																																																										
 																																																																											

где ???? ? фиксированный признак i-го объекта, то второй, как правило, опирается на функцию расстояния, под которой понимают такие ??(????, ????), что будучи неотрицательными и вещественными значениями ??(????, ????)=0 тогда и только тогда, когда ???? = ????, ??(????, ????)= ??(????, ????) и ??(????, ????)? ??(????, ??к)+																																																																											
??(??к, ????), ? ????, ???? и ??к ?El, где под последним понимают l-мерное эвклидово пространство.																																																																											
При этом могут быть использованы функции расстояния типа: ??2(????, ????) , ??1(????, ????), ???(????, ????) ,																																																																											
????(????, ????) , ??2(????, ????) [4].																																																																											
Следует иметь в виду, что при																																																																											
0	??12	…	??1??																																																																								
?? = (??21	??22	…	??2??)																																																																								
…	…	…	…																																																																								
????1	????2	…	0																																																																								
пары значений мер сходства могут определяться, как:																																																																											
1	??12	…	??1??																																																																								
?? = (??21	??22	…	??2??)																																																																								
…	…	…	…																																																																								
????1	????2	…	1																																																																								

где ?????? называется коэффициентом сходства, 0?S(????, ????)<1, ? ???? ? ????, S(????, ????)=1, S(????, ????)= S(????, ????).																																																																											
Для решения поставленной задачи и с учетом приведенных понятий будем пользоваться методом последовательной   кластеризации.   Так   как   A={????}   (? = ?1??,????)-множество   объектов       признакового пространства, каждый из них будем рассматривать в виде отдельного элемента: {??1},…,{????} и среди них определим такие два объекта, которые сходны с учетом введенного критерия сходства и объединим их в																																																																											
один кластер. Тогда новое множество будет состоять из (n-1) кластеров: {??1},…,{????, ????}, … , {????}, а действуя таким образом получим множество (n-2),(n-3),…,1 с одним кластером.																																																																											
Предположим, что мерой расстояния может рассматриваться квадрат эвклидовой метрики:																																																																											
??1   ??2	??3	…	????																																																																								
??1   0	??2	??2	…	??2																																																																							
??	12	13	1??1																																																																								
 																																																																											
??2																																																																											
 																																																																											
0	??2	…	??2																																																																								
 																																																																											
?? = ?? I																																																																											
 																																																																											
23	2??I																																																																										
 																																																																											
3 I																																																																											
… I																																																																											
???? [																																																																											
 																																																																											
0	…	??2  I																																																																									
…	… I 0 ]																																																																										
 																																																																											
и в то же время объединение {????, ????} реализуется, при min расстояния: ??2 =min{ ??2 , i? ??}, в результате																																																																											
 																																																																											
чего формируется новая матрица расстояний размерностью [(n-1)x(n-1)]:																																																																											
{????, ????} ??1	??2	??3	…	????																																																																							
0	??2	??2	??2	…	??2																																																																						
 																																																																											
??,??																																																																											
 																																																																											
??,??																																																																											
 																																																																											
{???? , ????} ??																																																																											
 																																																																											
????1																																																																											
 																																																																											
????2																																																																											
 																																																																											
????3																																																																											
 																																																																											
??????1																																																																											
 																																																																											
??1	I																																																																										
 																																																																											
0	??2	??2	…	??2  I																																																																							
 																																																																											
12	13	1??																																																																									
 																																																																											
??2	I																																																																										
 																																																																											
0	??2	…	??2  I																																																																								
 																																																																											
D1 =	??	I																																																																									
 																																																																											
23	2?? I,																																																																										
 																																																																											
3	2																																																																										
…	I	2?? I																																																																									
??	I	…	… I																																																																								
 																																																																											
??	[																																																																										
отображающая процесс представления																																																																											
 																																																																											
0 ]																																																																											
??, ??1. ??2, … , ???? .																																																																											
 																																																																											
Поскольку ???? и ????оказываются в одном кластере при ??2 =2?????? получающий минимальные значения,																																																																											
то ??2  (? = ?1??,????, i? ??) в матрице D заменяется на ??2  =2??????, производится обнуление элементов q-oй строки																																																																											
 																																																																											
??,??																																																																											
и столбца, ????=????+???? , ????=0.																																																																											
 																																																																											
??,??																																																																											
 																																																																											
Приведенный подход к кластеризации исходного пространство был реализован с учётом специфики проблемной области на основе следующего алгоритма.																																																																											
1.	Задание контекста исследований.																																																																										
2.	Если решение задачи производится в нечётких условиях, то перейти к																																																																										
 																																																																											
3.	Вычисление мер расстояний ??2, ??1, ???, ????,																																																																										
4.	Перейти к 7.																																																																										
 																																																																											
D2 .																																																																											
 																																																																											
5.	Формирование матрицы, признаков и функций принадлежности, например с использованием экспоненциальных функций лингвистических термов.																																																																										
 																																																																											
6.	Введение d (?? , ?? )=																																																																										
 																																																																											
??																																																																											
???(??																																																																											
 																																																																											
) ? ??(??																																																																											
 																																																																											
)?, где ??																																																																											
 																																																																											
? ??-ое значение признака p-го объекта,																																																																											
 																																																																											
??	??																																																																										
 																																																																											
?																																																																											
??=1																																																																											
 																																																																											
????																																																																											
 																																																																											
????																																																																											
 																																																																											
????																																																																											
 																																																																											
??(??????) ? j-ое значение функции принадлежности p-го объекта.																																																																											
7.	Выбор и обоснование целевой функции.																																																																										
8.	Формирование требуемых матриц, определение расстояния между кластерами, выбор значения порога.																																																																										
Следует иметь в виду эффективность нечеткой кластеризации, основанной на оптимизационном подходе, когда с учетом критерия качества Q(P(X)) производится разбиение ???(X)={ ??1, … , ????} на «с» нечетких   кластеров,   с   функциями   принадлежности   ?????? ,   ?? = ?1?,????   ,   ? = ?1??,????   на   множестве   объектов X={??1, … , ????}, т.е. Q(P(X))? extr , где под П можно понимать совокупность всех P(X) при ограничениях																																																																											
??(??)?П																																																																											
?????? ?0,  ???    ?????? =1, ? = ?1??,???? , ?? = ?1?,????.																																																																											
Выводы. Приведенных в работе подход, основанный на кластеризации с использованием различных подходов был апробирован на материалах, сложности интерпретации которых были проанализированы средствами представленных алгоритмов, ориентированных на стратегию определённой полноты изучения заданного пространства.																																																																											

Адаптивный интерфейс пользователя САПР																																																																											
"Диалог разработчика с САПР осуществляется, как правило, через пользовательское меню. Традиционное меню, наряду с очевидными достоинствами, имеет и ряд недостатков, таких, например, как большой размер окон, отводимых под команды меню, что ”скрывает"" от пользователя значительную часть рабочего чертежа; несколько уровней вложенности окон, что затрудняет перемещение и отслеживание текущего положения в меню и т.д."																																																																											
Предлагается адаптивный интерфейс пользователя САПР, имеющий возможность автоматической настройки и оптимизации формы меню под особенности и стиль работы с САПР конкретного индивидуального разработчика.																																																																											
"Для достижения указанной цели предлагаются следующие приемы. Анализ показывает, что пользователь САПР в процессе работы использует в среднем около 30 процентов команд, предлагаемых меню. Этот факт обусловлен типом задач, решаемых конструктором, его стилем работы и наличием схожих по функциональному назначению команд (например: save - save as, line - polyline). Поэтому предлагается исключать из числа отображаемых на экране команд меню те опции, которые не были использованы пользователем более чем ТЧ сеансов подряд. При этом параметр N задается самим разработчиком. Доступ же к ”невидимым"" в текущий момент командам может быть осуществлен через одну дополнительную опцию, которая получила имя anover command. Такой прием позволяет уменьшить размер окон меню (до 70 процентов), что освобождает дополнительные видимые области рабочего чертежа."																																																																											
Второй и третий приемы связаны с оптимизацией перемещения пользователя по окнам и уровням вложенности интерфейса. Предлагается численно оценивать количество переходов между опциями высшего уровня иерархии (например: гае, editor, command и т.д.) и располагать по соседству те из них, между которыми чаще всего наблюдаются переходы. Это позволяет сократить время перемещения по меню, особенно если для этого используются клавиши управления курсором. Еще один прием связан с оценкой частот перехода между командами меню. Так, например, чаще всего после команды save используется команда quit, а после команды erase - команда redraw. Порядок использования команд в первую очередь зависит от стиля работы пользователя и, в значительной мере, индивидуален. Поэтому предлагается во время каждого сеанса работы оценивать частоту перехода из текущей активной команды к остальным и после окончания выполнения текущей команды автоматически активизировать (подсвечивать) ту команду меню, частота перехода к которой, полученная на основе предыдущих вычислений, является максимальной.																																																																											
Частота перехода Pij из команды i к командеј оценивается по формуле, Pij=kijki, где kij - количество переходов из команды i к команде ј, ki • общее количество переходов из команды i.																																																																											
Матрица частот переходов хранится в специальном системном файле, является индивидуальной для каждого конкретного пользователя и обновляется во время каждого сеанса работы. Указанный подход позволяет значительно сократить время перемещения по окнам и командам меню.																																																																											
 																																																																											
194																																																																											
известия ТРТУ	Тематический выпуск																																																																										
Приведенная выше концепция построения пользовательского интерфейса САПР была реализована на языке AUTOLISP для пакета программ AUTOCAD 12.0. В качестве инициализирующего меню используется стандартный интерфейс acad.mnu. Проведенные сеансы работы с системой AUTOCAD 12.0 различными пользователями показали, что предлагаемый подход позволяет оптимизировать и настроить стандартный интерфейс acad.mnu под конкретного разработчика, повышает эффективность и удобство его работы.																																																																											
удк 658.512																																																																											
Н.Н. Рябец, ММ. 																																																																											
Исследование алгоритма упорядочения каналов трассировки СБИС																																																																											
Проблема выявления последовательности проведения трасс в каналах особенно остро стоит при проектировании СБИС.																																																																											
Предлагается новый подход к решению этой проблемы. Для удачного размещения элементов на кристалле необходимо, по крайней мере, выполнить следующие процедуры: квазиоптимальное размещение блоков (набор связных элементов или библиотечных наборов элементов); назначение области для дальнейшей трассировки соединений; формирование канального графа; проведение глобальной трассировки, используя известные алгоритмы, например, построения дерева Штейнера; упорядочение каналов (назначение приоритетов каналам); детальная трассировка. Многие этапы этой задачи решены Д. Отмечается, что поскольку каналы взаимосвязаны, то после фиксации трассировки отдельного канала его структура приводит к существенным ограничениям для трассировки последующих соединений.																																																																											
В предлагаемом алгоритме используются известные структурные графы. Считаем, что основной задачей при распределении соединений по каналам является минимизация общей площади кристалла. Также необходимо учесть временные затраты и общую длину соединений. Оценку кристалла можно выразить как Н: lsd + С( Lsd - lsd ), где Lsd, lsd, соответственно длина критического пути по высоте и ширине кристалла. Коэффициент С расположен между 0 и Как правило, С=0.95. В случае, если C=l, все сегменты каналов будут реализованы, когда C=O, трассировка затруднительна и алгоритм сводится к алгоритму упаковки блоков. Задача распределения цепей по каналам в соответствии с приведенной оценкой решается следующим образом.																																																																											
При определенном начальном размещении блоков (элементов) формируем канальный граф реализаций. Для примера используем двумерное представление блоков. Тогда алгоритм можно представить следующим образом.																																																																											
Шаг 1. Проводим горизонтальные и вертикальные линии границ элементов. Если они соприкасаются с линиями других элементов, то они пересекают эти линии.																																																																											
Шаг 2. Если, таким образом, выполненные действия приводят к перекрытию областей, незанятых физическими элементами, то они совмещаются.																																																																											
Шаг 3. Определяем точки пересечения и запоминаем их.																																																																											
Шаг 4. Определяем корень дерева разбиения со всеми элементами и линии сегментов.																																																																											
Шаг 5. Проводим разбиение. (В начальном случае - корня дерева).																																																																											
Шаг 6.Генерируем канальный граф.																																																																											
Алгоритм был исследован на ряде реальных и случайно генерируемых СБИС. Исследовались два кристалла: первый содержит lO блоков (элементов), количество цепей - 203, количество контактов - 351; второй содержит 33 блока (элемента), Количество цепей - 123, количество контактов - 211. Результаты экспериментов																																																																											
Evaluation Only. Created with Aspose.Cells for Python via Java.Copyright 2003 - 2024 Aspose Pty Ltd.