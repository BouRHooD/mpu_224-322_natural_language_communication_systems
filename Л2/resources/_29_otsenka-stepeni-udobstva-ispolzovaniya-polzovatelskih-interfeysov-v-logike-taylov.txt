ОЦЕНКА СТЕПЕНИ УДОБСТВА ИСПОЛЬЗОВАНИЯ ПОЛЬЗОВАТЕЛЬСКИХ ИНТЕРФЕЙСОВ В ЛОГИКЕ ТАЙЛОВ

В стандарте ISO/IEC 25010 введен термин «юзабилити» (от англ. usability), означающий «удобство и простоту использования, степень удобства использования», а также пригодность использования, эргономичность (способность приложения быть понимаемым, изучаемым, используемым и привлекательным для пользователя в заданных условиях для достижения установленных целей с необходимой результативностью, эффективностью и удовлетворенностью). Далее вместо термина «юзабилити» будем использовать словосочетание «степень удобства использования».
Объект исследования настоящей работы — степень удобства использования пользовательских интерфейсов, обеспечивающих взаимодействие пользователя с программными приложениями и осуществляемых в среде одной или совокупности веб-страниц посредством веб-браузера. 
Существует много традиционных средств оценки степени удобства использования, среди которых проверка по контрольному списку [1], эвристическая оценка [2], мысленный прогон [3], множественный прогон [4],  оценки функциональности [5], анализ задач [6], фокус группы [7], обзорные исследования и интервью, вопросники и анкетирование, фиксация 
зрительной активности пользователей [8] и др. Однако все эти оценки степени удобства использования довольно трудоемки, что проявляется в затратах времени на подготовку к сравнительному анализу, отбор респондентов и дальнейший анализ полученных результатов специалистами че-  ловекомашинного взаимодействия, в некоторых случаях необходимо  наличие специального оборудования. Чтобы снизить сложность и объем  работ, выполняемых вручную, актуально направление автоматизации  оценки степени удобства использования. В этом направлении существует  три основных подхода к автоматизации оценки степени удобства использования визуальных пользовательских интерфейсов. 
Подход 1. Анализ свойств пользовательских логов. Анализ осуществ-  ляется в хронологическом порядке по записи действий пользователя в  процессе взаимодействия с реальными приложениями или их динамическими прототипами. Как правило, такими действиями являются перемещение курсора мыши, время, затраченное пользователем для взаимодействия с одной и той же страницей, переходы между страницами и пр. 
Наиболее популярными сервисами, предоставляющими услуги по  сбору пользовательских логов и их анализу, являются сервисы Соое  АпауИс$ и Уапаех Менчсз. Эти сервисы обрабатывают собранные данные  и на основе их могут визуализировать данные в виде: 
— карты кликов, отображающей клики по всем элементам страниц  приложения, тем самым помогая выявлять элементы, к которым приме-  нено наибольшее число кликов (максимально кликабельные), определять, какие элементы принимаются пользователем за ссылку, но таковой  не являются. По картам кликов могут быть сформированы «тепловые  карты», на которых места, соответствующие максимально кликабельным  элементам, отображаются теплыми цветами, наименее кликабельным —  холодными, а все другие — промежуточными цветами, зависящими от  соответствующего им числа кликов; 
— карты ссылок, отображающие число переходов по ссылке, долю пе-  реходов относительно других ссылок на странице;
— карты скроллинга, отображающие время внимания посетителей  определенным элементам страницы сайта; позволяют эксперту человеко-  машинного взаимодействия подбирать оптимальную длину страницы и 
правильно размещать важную информацию;  
— карты путей по приложению, отображающие перемещение пользо- 
вателей по страницам приложения; по этим картам эксперт человеко-  машинного взаимодействия анализирует особенности последовательностей перемещения пользователей по страницам приложения. 
Сервисы логирования представляют собой инструменты для сбора и визуализации данных для дальнейшего ручного анализа человеком, который  чаще всего не является экспертом человекомашинного взаимодействия и не  всегда может правильно интерпретировать полученные данные. Анализ человеком этих данных является менее трудоемким, чем анализ аудиовизуальной информации, получаемой при проведении традиционных исследований степени удобства использования. Для того чтобы собирать данные  о взаимодействии пользователя с приложением, оно должно быть запущено  в рабочую эксплуатацию, что при его низком качестве влечет за собой потерю потенциальных клиентов. Трудности со сбором данных испытывают  приложения с низкой посещаемостью, что приводит к большим срокам  проведения оценки степени удобства использования. При использовании  логирования практически невозможно точно выяснить причины ухода  пользователя с приложения. Уход пользователя может быть как следствием  того, что он достиг своей цели в результате работы с приложением, так и,  наоборот, он не смог достичь цели. 
Один из главных недостатков указанных сервисов логирования —  недостаточная автоматизация процесса анализа логов. Существуют работы, в которых степень автоматизации логирования существенно выше.  Вот некоторые из наиболее известных. 
Метод анализа, который позволяет обнаружить в логах различных  пользователей одинаковые последовательности действий, характерные  для большинства из них, представлен в работе [9]. Эти одинаковые для  большинства пользователей последовательности рассматриваются как  шаблоны, из которых складывается взаимодействие каждого пользователя с приложением. Затем, используя критерий скорости достижения  пользователем цели и генетический алгоритм, выявляются эффективные  и неэффективные шаблоны взаимодействия пользователя с приложением и на основе этого делается вывод о степени удобства использования  приложения (чем больше число использованных эффективных шаблонов, тем выше степень удобства использования приложения).
Инструмент, который позволяет вручную задать наилучшую с точки 
зрения ее создателя последовательность действий пользователя в процессе взаимодействия с приложением (эталонный лог), рассмотрен в работе  [19]. После этого реальный лог, полученный в результате взаимодействия пользователя с приложением, сравнивается с эталонным логом по  определенной мере. Чем ближе эталонный и реальный логи друг к другу,  согласно этой мере, тем выше степень удобства использования приложения. Недостатком такого подхода является необъективность и интуитивность создания эталонного лога, а также увеличение временных затрат  на его создание по мере повышения сложности приложения и числа его 
модификаций.  
Подход 2. Параметрический анализ свойств страниц. Осуществляет- 
ся проверка отдельных параметров страниц приложения на соответствие  рекомендациям по дизайну, визуальному шуму и сложности интерфейса,  а также выявление областей страницы, на которые пользователь прежде  всего обратит внимание при просмотре страницы. 
Оценивать страницы интерфейса на основе параметров графики и текста предложено в работе [11]. Здесь утверждается, что соотношение графики  и текста играет важную роль в улучшении внешнего вида страниц, что,  в свою очередь, оказывает влияние на эстетические чувства пользователей,  которые они испытывают при работе с приложением. Для эстетического  анализа в работе [2] построена нейронная сеть, анализирующая, как конкретная комбинация элементов пользовательского интерфейса вебстраницы влияет на эстетические чувства пользователей при работе с ней.  Результатом применения нейронной сети является оценка страницы по пя-  тибалльной шкале (нейросеть имеет пять выходов, каждому из которых соответствует одна из пяти взаимоисключающих оценок), которая помогает  веб-дизайнерам оценить степень удобства использования приложения. Для  построения нейронной сети применялась обучающая выборка, содержащая  96 страниц с их эстетическими оценками. Эстетические оценки определялись субъективно экспертами человекомашинного взаимодействия с различным опытом работы. Задачи, для решения которых предназначались  страницы, не учитывались. Для построения нейронной сети использовались  только статические страницы. 
Метод определения значимости элементов на страницах по движению глаз пользователя на различных страницах приложения предложен  в работе [12]. Полученная информация может дать представление о том,  как воспринимается интерфейс страницы и где находится самый важный  или релевантный контент. Инструмент позволяет предсказывать важность различных элементов интерфейса, но без учета различных категорий пользователей и контекстов. 
Подход 3. Моделе-ориентированное доказательство наличия свойств  взаимодействия. Создается архитектура системы взаимодействия и формулируются свойства, которым эта архитектура должна удовлетворять. Затем  эти свойства проверяются применительно к созданной архитектуре. Так,  в работе [13] рассмотрены свойства мультимодальных интеллектуальных  интерфейсов, реализация которых обеспечивает естественное «безбарьерное» взаимодействие пользователя с приложением. Если какое-либо свойство взаимодействия должно быть реализовано, то, во-первых, необходима  его точная спецификация и, во-вторых, возможность формальной проверки  этой спецификации применительно к конкретному взаимодействию. Кроме  того, формулировка этих свойств должна носить объективный характер,  признанный мировым сообществом. 
Из известных реализаций моделе-ориентированного подхода доказательства наличия свойств можно также назвать работу [14], в которой  представлен инструмент МЕМО, содержащий модель приложения и модель пользователя. Модель пользователя правильно взаимодействует с  моделью приложения, если правила генерации ошибок, которые экспертно задает разработчик, не возникают в процессе выполнения задачи  (в процессе взаимодействия). Другими словами, модель приложения не  переходит в состояние, которое нежелательно для идеального взаимодействия. Задаваемые правила генерации ошибок являются субъективными правилами эксперта. Чем масштабнее интерфейс приложения (модель приложения), тем больше требуется времени, затрачиваемого на  определение правил генерации ошибок. При внесении изменений в интерфейс приложения также необходимо редактировать правила генерации ошибок, добавляя новые и удаляя неактуальные. 
В первом столбце таблицы перечислены, согласно приведенному аналитическому обзору [9], критерии для сравнения качества различных подходов оценки степени удобства использования приложений. В остальных  столбцах для каждого из трех подходов знак «+» указывает на то, что подход удовлетворяет критерию, а знак «-» — не удовлетворяет. Согласно  данным, приведенным в таблице, наибольшему числу критериев из рас-  смотренных подходов удовлетворяет моделе-ориентированное доказательство наличия свойств. Остаются неудовлетворенными три критерия:  1) возможность объяснения поведения пользователей; 2) отсутствие необходимости приглашения экспертов человекомашинного взаимодействия;  3) отсутствие субъективного фактора.
Даже с учетом неудовлетворенности перечисленных трех критериев 
подход 3 является наилучшим. Этот подход использует модели архитектуры и поведения системы, в которой реализуется взаимодействие. Если  создатель какой-либо модели полагает, что ее архитектура и поведение  обладает всеми необходимыми объективными свойствами, обеспечивающими необходимую степень удобства использования, то остается только доказать, что архитектура и поведение удовлетворяют этим свойствам.
Авторы настоящей работы полагают, что устранение указанных недостатков неудовлетворенности критериев (возможность объяснения поведения пользователей, отсутствие необходимости приглашения экспертов  человекомашинного взаимодействия, отсутствие субъективного фактора)  возможно на пути автоматизированного моделе-ориентированного доказательства (вывода) наличия объективных свойств архитектуры и поведения  взаимодействующих моделей пользователя и приложения в рамках адек-  ватного исчисления, включающего в себя: 
— формальный язык адекватного описания шаблонов поведения  пользователя и исполнителя в процессе взаимодействия; 
— формальное описание на этом языке объективных свойств архитектуры и поведения взаимодействующих моделей, гарантирующих высокую степень удобства использования приложений; 
— множества состоятельных правил вывода в этом языке;  
— стратегию вывода, гарантирующую полноту доказательства нали- 
чия свойств архитектуры и поведения взаимодействующих моделей.
Формальное описание объективных свойств архитектуры и поведе-  
ния взаимодействующих моделей, гарантирующих высокую степень  удобства использования приложений, позволит избавиться от необходимости приглашения экспертов человекомашинного взаимодействия и, 
как следствие, от их субъективного мнения.  
Стратегия вывода, гарантирующая полноту доказательства наличия 
свойств архитектуры и поведения взаимодействующих моделей на основе состоятельных правил вывода, позволит выявлять степень удобства  использования и причины неудобства. 
Автоматизация стратегии вывода обеспечит простоту оценки степени  удобства приложения после внесения изменений в процесс взаимодействия. 
По мнению авторов работы, наиболее адекватным для автоматизации  оценки степени удобства использования приложений является язык логики тайлов. Это мнение основано, в частности, на том, что тайл, как кон-  струкция, позволяет, с одной стороны, естественным образом отображать  элементы страниц, а с другой, — интерфейсы между элементами, осуществляемыми в результате определенных действий пользователя. Кроме  того, из тайлов по определенным правилам могут компоноваться допустимые последовательности взаимодействия пользователя с системой, которые служат средством оценки степени удобства использования. 
Принципы доказательства каких-либо свойств систем на основе логики тайлов известны достаточно давно [15]. Для того чтобы создать язык  логики тайлов для рассматриваемого случая, необходимо, прежде всего,  создать базовое множество тайлов, позволяющих представлять поведение  приложения (агента-исполнителя) и респондента (агента-пользователя). 
Далее приведены основные понятия, связанные с тайлами, затем  представлена суть формального описания моделей приложения (агентаисполнителя) и респондента (агента-пользователя) с помощью тайлов.  Введены критерии, по которым будет оцениваться степень удобства приложения. Приведен простой пример выявления степени удобства приложения в простом языке логики тайлов, а также направления дальнейших работ в области автоматизации оценки удобства приложений на ос-  нове логики тайлов. 
Тайлы и операции над ними. Достоинства логики тайлов связаны со  структурой ее правил вывода, каждое из которых может быть представлено в виде тайла (Ше) (рис. 1) 
В символическом виде тайл может быть представлен следующим образом:
Каждый тайл описывает отдельный элемент поведения системы в терминах возможных взаимодействий с внешней средой. В целом поведение  системы выглядит как скоординированное взаимодействие отдельных  тайлов. Тайлы могут композироваться горизонтально, вертикально и параллельно для того, чтобы задавать более сложное поведение систем.  Та или иная логика тайлов получается в результате введения множества  базовых тайлов и некоторой совокупности вспомогательных тайлов, над  которыми могут совершаться операции композиции. 
Модель оценки степени удобства. Для демонстрации принципов методологии автоматизации процесса оценки степени удобства пользовательских интерфейсов использована архитектура, моделирующая пользовательский интерфейс и состоящая из агента-исполнителя и агентапользователя. Агент-исполнитель имеет два канала: 1) входной канал ОЁ,  являющийся выходным для агента-пользователя; 2) выходной канал ЕИ,  являющийся входным для агента-пользователя (рис. 2). Во входной канал  агента-исполнителя агент-пользователь может помещать сообщение, которое может забирать агент-исполнитель. В выходной канал агент-  исполнитель может помещать сообщение для агента-пользователя. Здесь и  далее агента-исполнителя и агента-пользователя будем называть исполнителем и пользователем соответственно.
Пара [ОЕ(т„), ЕО (т.)], где ОЕ(т„) означает, что в канале ОЕ  находится сообщение ти, а в канале ЕО — сообщение ть, является в рас-  сматриваемом случае конфигурацией, упоминаемой при определении тайла  (см. рис. 1). Если безразлично, какое сообщение находится в том или ином 
канале, то вместо указания конкурентного сообщения будем ставить знак  «_ ». Если в канале ничего нет, то будем использовать знак «©». 
Взаимодействие исполнителя и пользователя начинается после получения от пользователя уведомления о начале взаимодействия. Если  исполнитель дал согласие на взаимодействие, то оно продолжается.  В противном случае взаимодействие прекращается. Пользователь прекращает взаимодействие путем отправки соответствующего сообщения  исполнителю. 
Архитектура пользовательских интерфейсов. Как уже было отмечено выше, пользовательский интерфейс — процесс, обеспечивающий взаимодействие пользователя с исполнителем (программным приложением). Для того чтобы формализовать это взаимодействие, введем следующие понятия и обозначения. 
Архитектурой пользовательского интерфейса назовем пятерку  
1= {Р,В,Е,ТЕ,Ти}, где Р — множество страниц р интерфейса, реР; 
В(р) — множество блоков В страницы р, БеВ(р); Е) — множество элементов е блока В, ее Е(Б); Те, То — множества тайлов, описывающих поведение исполнителя и пользователя. Страницы, блоки и элементы имеют уникальное обозначение р, В, е с числовыми индексами, играющее 
роль объектной (индивидной) переменной, которую будем называть просто объектом. Значение объектной переменной — объектная константа,  являющаяся набором значений таких атрибутов, как пояснение, поле  ввода, поле вывода, кнопка, изображение, список, видеоматериал, аудиоматериал, всплывающая подсказка, форма, цвет, яркость и др. Каждый  атрибут может иметь достаточно сложную структуру. Как правило, многие атрибуты в их явном виде скрыты от пользователя. 
Так, на рис. 3 показан простой пример страницы р! пользовательского интерфейса, содержащий блок В! = Преобразование систем счисления  (ПОС) и элементы ев! = Исходная система счисления (ИСС), е› = Исходное  число (ИЧ), ез = Результирующая система счисления (РСС), ед = Результирующее число (РЧ). Здесь текст «Преобразование систем счисления»  поясняет назначение блока В!, тексты «Исходная систем счисления»,  «Исходное число» являются полями ввода элементов ет, е2, а тексты «Результирующая система счисления», «Результирующее число» — полями  вывода элементов ез, е4.
Тайлы для описания поведения исполнителя. Поведение исполнителя описывается двумя типами тайлов. 
Тайл «Указание исполнителем объекта, находясь в конфигурации, осуществляет восприятие сообщения т,, имену-  ющее тот или иной объект, к которому пользователю необходим доступ,  выдает реакцию !7., указывающую на объект !1., к которому пользователю разрешается доступ, устанавливает конечный выходной интерфейс 
100 = те. Конечная конфигурация тайла «Указание исполнителем объекта»  при этом становится конфигурацией: Тайл «Обработка объекта исполнителем (ООИ) всегда выполняется 
после тайла «Указание исполнителем объекта», согласно горизонтальной  композиции тайлов, и позволяет помещать реакцию исполнителя (сооб- 
щение исполнителя) ть в выходной канал ЕП в ответ на восприятие  собственной реакции те и в ответ на восприятие сообщения пользоваеля т„ тайлом «Указание исполнителем объекта», а также при условии, что его начальный и конечный входные интерфейсы совпадают с  начальным и конечным выходными интерфейсами тайла «Указание исполнителем объекта». Начальная конфигурация  тайла «Обработка объекта исполнителем» переходит в конечную конфигурацию: 
'Тайлы для описания поведения пользователя. Поведение исполнителя описывается тремя типами тайлов. 
Тайл «Инициализация пользователем взаимодействия (ИПВ)» позволяет начать взаимодействие пользователя и исполнителя. Согласно этому  тайлу, его начальной конфигурацией является (каналы 
пустые), его начальные входной и выходной интерфейсы и восприятие  также являются пустыми. Тайл позволяет выдавать реакцию !ти, имену-  ющую объект, с которого следует начинать взаимодействие. В результате  конечная конфигурация тайла становится равной 
а конечный выходной интерфейс о, =ти, означающий разрешение доступа к объекту Ти: Тайл «Указание пользователем объекта» позволяет формировать  выходной конечный интерфейс пользователя в ответ на восприятие  пользователя (сообщение исполнителя). Тайл, находясь в конфигурации , осуществляет восприятие сообщения т, именующее  тот или иной объект, к которому разрешен доступ исполнителю с помощью тайла «Указание исполнителем объекта», начальный выходной интерфейс. ? о; = ть х выдает реакцию !т., запрашивающую доступ к объекту 
те. Конечная конфигурация тайла «Указание исполнителем объекта»  при этом становится конфигурацией 
Тайл «Обработка объекта пользователем» выполняется после тайла  «Указание пользователем объекта», согласно вертикальной композиции  тайлов, и выдает реакцию пользователя ти (результат обработки объекта 
т,) в выходной канал ОЕ в ответ на восприятие собственной реакции ! т,  подтверждающей восприятие сообщения т, пользователя тайлом «Указание исполнителем объекта» и при условии, что его начальные входной и  выходной интерфейсы совпадают с конечными входным и выходным интерфейсами тайла «Указание пользователем объекта». Начальная конфигурация тайла «Обработка объекта пользователем» пе-  реходит в конечную конфигурацию 
Пример взаимодействия пользователя и исполнителя в логике  тайлов. Для страницы, пример которой приведен на рис. 3, введем сле- 
дующие тайлы.  
Тайл «Инициализация пользователем взаимодействия», задающий 
конечный выходной интерфейс о, = ри, т. е. страницу ру, с которой  должно начаться взаимодействие: 
'Тайл «Указание исполнителем объекта», подтверждающий своей реакцией !р1 согласие исполнителя на обработку пользователем страницы |1: 
'Тайл «Указание пользователем объекта», запрашивающий своей реакцией !Ё! доступ к блоку в:
'Тайл «Указание исполнителем объекта», подтверждающий своей реакцией !Б! согласие исполнителя на обработку пользователем блока в: 
'Тайл «Указание пользователем объекта», запрашивающий своей реакцией !е, доступ к элементу е1: 
Тайл «Указание исполнителем объекта», подтверждающий своей реакцией !е, согласие исполнителя на обработку пользователем элемента еи: 
Тайлов (7)-—(12) достаточно для моделирования поведения пользователя и исполнителя в процессе навигации от страницы р! к элементу е!,  так как на этом этапе никакой обработки объектов не осуществляется.  Это поведение представлено композицией тайлов (рис. 4). Для компактного представления композиции тайлы представлены несколько в ином  виде, а именно в виде трех строк, где первая строка содержит начальный  входной и выходной интерфейсы и начальную конфигурацию, вторая  строка — восприятие и реакцию, а третья строка — конечный входной и  выходной интерфейсы и конечную конфигурацию. 
Для дальнейшего моделирования взаимодействия пользователя и исполнителя требуется введение тайлов обработки объектов. Для всех элементов, показанных на рис. 3, схема обработки идентична и заключается  в следующем. После указания исполнителем пользователю с помощью  тайла «Установка исполнителем объектов» элемента, к которому разре-  шен доступ, исполнитель с помощью тайла «Обработка объекта исполнителем» указывает поле для ввода информации пользователем. Пользо-ватель с помощью тайла «Обработка объекта пользователем» вводит  в это поле информацию. Исполнитель после восприятия этой информации указывает пользователю на следующий элемент, к восприятию которого пользователь может перейти. Введем требуемые тайлы только для  элемента е, и покажем, как они композируются для моделирования поведения пользователя и исполнителя. 
Тайл «Обработка объекта исполнителем» выполняется после тайла  (12), согласно горизонтальной композиции тайлов, и позволяет помещать  реакцию исполнителя ИСС в выходной канал Е( в ответ на восприятие собственной реакции е! тайла (12) и при условии, что его начальный и конечный входные интерфейсы совпадают с начальным и конечным выходными  интерфейсами тайла «Обработка объекта исполнителем». Начальная конфигурация тайла «Обработка объекта исполнителем»  переходит в конечную конфигурацию  
Тайл «Обработка объекта пользователем» выполняется после тайла  «Обработка объекта исполнителем», согласно вертикальной композиции  тайлов, и формирует реакцию пользователя в выходной канал ОЕ  в ответ на восприятие реакции ИСС тайла (13), указывающую значение поля 
ИСС (объекта ИСО). Например, этой реакцией может быть Двоичная система счисления (ДСО). Начальная конфигурация тай-  ла «Обработка объекта пользователем» переходит в конечную конфигурацию 
'Тайл «Указание исполнителем объекта» своей реакцией !е› указыва- 
ет, что следующим элементом, подлежащим обработке пользователем, 
является элемент е>: 
ботке элемента е1. Переходы к другим элементам рассматриваемого примера  и их обработке аналогичны продемонстрированным. Для компактной ком-  позиции тайлы представлены в несколько другом виде (см. рис. 4).
Оценка степени удобства использования пользовательских интерфейсов в логике тайлов  Критерии оценки степени удобства. Критерии оценки степени удоб- 
ства пользовательских интерфейсов могут быть качественными и количественными и позволяют делать вывод, насколько интерфейс удобен, а также  сравнивать его с другими проектами пользовательских интерфейсов. 
Простейшие критерии оценки степени удобства пользовательских  интерфейсов — оценки достижения пользователями своих целей при работе с приложениями. Дж. Нильсен (]. №е]5еп, [5]) предложил три такие  оценки: 
1) пользователь достиг своей цели;  
2) пользователь столкнулся с проблемами, но достиг своей цели;  
3) пользователь не достиг цели.  
Цели в логике тайлов могут формулироваться как целевые тайлы, до- 
стижимость которых проверяется наличием композиции, в результате 
которой целевой тайл достигается. Если такой композиции не существует, то цель считается недостигнутой. В случае достижения цели простейшей оценкой степени удобства может быть, например, число тайлов, требуемых для достижения цели. Чем меньше тайлов для этого требуется,  тем выше степень удобства использования. Более точные критерии оценки степени удобства использования требуют учета различных качественных и количественных свойств пользовательских интерфейсов, таких как  сложность достижения конечной цели, сложность достижения промежуточных целей, выявление причин, приводящих к слишком высокой  сложности достижения целей, причина достижения цели и т. п. Все это  требует создания значительных библиотек тайлов, их классификации по  группам пользователей, введения частных критериев оценки выполнения  отдельных тайлов, по которым формируются общие оценки, и т. п. 
Задача, которая поставлена в настоящей работе, не предполагает детального рассмотрения всех критериев оценки степени удобства использования пользовательских интерфейсов. Здесь рассмотрен только один  критерий, который оценивает степень удобства использования приложения по результату выполнения задачи (выполнена — приложение имеет  высокую степень удобства, в противном случае низкую). 
Заключение. Приведен аналитический обзор подходов к автоматизации оценки степени удобства использования приложений, в рамках которого выявлены преимущества и недостатки каждого подхода. Предложен  формальный моделе-ориентированный метод оценки степени удобства использования, основанный на использовании логики тайлов и позволяющий устранить недостатки известных подходов. В логике тайлов создается  модель взаимодействия пользователя и исполнителя (приложения). Мо-
В.В. Девятков, Е.А. Типсин 
дель композируется из тайлов в соответствии с определенными правилами,  которые служат средством оценки удобства использования. Принципы методологии проиллюстрированы на примере одностраничного приложения.  В дальнейшем будет создана полномасштабная модель взаимодействия в  логике тайлов, учитывающая особенности поведения различных групп  пользователей при взаимодействии с реальными приложениями, увеличено число критериев оценки степени удобства использования. Фактически,  оценка степени удобства использования в логике тайлов — извлечение  знаний о поведении взаимодействующих агентов, крайне востребованных  как предмет аналитики на современном этапе развития интеллектуальных  информационных систем. Изложены принципы извлечения знаний о поведении взаимодействующих агентов, основанные на использовании паттернов локального поведения агентов в логике тайлов, состав которых  формирует общее поведение взаимодействующих агентов. Представление  этих принципов осуществляется на уровне композиции тайлов, но без  формального доказательства свойств реального поведения взаимодействующих агентов. Конкретизация такого доказательства свойств для случая  выявления наличия определенных свойств интеллектуальных интерфейсов  в языке логического программирования РКОГОС дана в работе [13]. 
В основе процедур доказательства свойств взаимодействия агентов на языке РКОГОС лежит механизм унификации, который может служить средством автоматизированной проверки свойств поведения агентов, представляемого различными композициями тайлов. Кроме того, по аналогии с 
той же работой интересующие свойства поведения взаимодействующих  агентов могут быть формально выражены на модальных языках для последующей их формальной проверки.
