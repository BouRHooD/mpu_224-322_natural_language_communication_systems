
Введение

   Пользовательский интерфейс — средство, обеспе- чивающее взаимопонимание человека и компьютера. Потому очень важно сделать такую связь дружествен- ной и интуитивно-понятной.
   Проблемам разработки пользовательских интерфей- сов посвящено значительное количество отечественных и зарубежных научных трудов, которые используются в различных предметных областях [1–5]. При их проек- тировании современными авторами предлагаются раз- личные подходы. Часто при разработке интерфейсной части программного обеспечения применяются методы искусственного интеллекта: построение адаптивных интерфейсов на основе генетических алгоритмов [6], экспертные системы, теории нечетких множеств [7–9] и др. Вместе с тем, с целью облегчения работы поль- зователя с программным средством, задействованы методы системного анализа, синтеза, абстрагирования и построения онтологической модели [10]. Часть уче- ных при решении проблемы построения адаптивных пользовательских интерфейсов предлагают использо- вание принципа разделения декларативного описания математических моделей и их процедурную интерпре- тацию [11]. Другими авторами применяются известные модели качества программного обеспечения [12], также используются метафорические или идиоматические подходы при создании или усовершенствовании интер- фейсной части программного средства [13].
   Также осуществляется проектирование прототипов интерфейса с недетерминированным конечным авто- матом [14], и разрабатываются специализированные системы [15, 16]. Имеется опыт непосредственного привлечения потенциальных пользователей к созданию интерфейсной части программного средства [17].
   В системах автоматизации проектирования (САПР) пользовательский интерфейс — важная часть системы. Интерфейс входит в состав лингвистического обеспе- чения и представлен диалоговыми языками. Однако

функциональность систем не стоит на месте и посто- янно расширяет свои возможности, это в свою очередь отражается на интерфейсе пользователя. Он становится более сложным, непонятным для новичков и не эр- гономичным, а это сказывается на производительно- сти труда инженера-конструктора. Проблема создания адаптивных интерфейсов для прикладных программ в САПР также актуальна [2, 18].
   В отличие от существующих аналогов, предлага- емая программная инструментальная система (ПИС) позволяет подбирать не шаблон целиком, а каждый ком- понент пользовательского интерфейса (размер шрифта, кнопок, расстояние между кнопками, цветовая гамма, звуковое сопровождение, наличие подсказок и команд- ной строки). Таким образом, шаблон интерфейса уни- версален для каждого пользователя.

Постановка задачи
   В настоящей работе реализовано решение проблемы адаптации интерфейсов к особенностям пользователя на примере инженера-конструктора и его автоматизиро- ванного рабочего места. Рабочее место включает в себя прикладные программы для проектирования машино- строительных изделий. Для решения данной задачи вы- полнена разработка специальной программной системы для создания адаптивных прототипов интерфейсов на основе характеристик пользователя.
   Разработанная ПИС имеет возможность создания прототипа интерфейса, адаптированного под характе- ристики пользователя. ПИС реализована в три этапа: оценка характеристик пользователя; реализация под- бора компонентов интерфейса; применение подобран- ного набора компонентов к интерфейсу прикладной программы.
   Для наглядности представления движения информа- ционных потоков при проектировании ПИС построена потоковая модель Data Flow Diagram (DFD) с помощью Case-средства автоматизированного проектирования




Рис. 1. Движение информационных потоков при работе программной инструментальной системы
Fig. 1. The movement of information flows during the operation of the software development system


BP-win. На рис. 1 представлена схема DFD с точки зрения программной системы.
   Интерфейсная часть программного обеспечения сформирована на основе оценки характеристик поль- зователя. Для каждого пользователя подобраны ком- поненты интерфейса: размер шрифта, размер кнопок, расстояние между кнопками, цветовая гамма, наличие командной строки, наличие звукового сопровожде- ния и наличие подсказок. После оценки характеристик пользователя результаты сохраняются в базе данных программной системы.
   Для проведения тестирования пользователей в ПИС разработчиком вносятся контрольно-измерительные материалы, направленные на диагностику сформиро- ванности каждой его характеристики.
   При подборе компонентов интерфейса под опреде- ленного пользователя использован метод экспертного оценивания. Для этого на начальном этапе работы экс- перт формирует базу правил на основе продукционной модели знаний.
   В ходе работы ПИС выполнено сравнение резуль- татов оценки характеристик пользователя с правилами нечеткой экспертной системы, которая является ядром программного средства. В итоге формируется набор компонентов интерфейса и генерируется прототип ин- терфейса, который соответствует данному пользова- телю.
   Декомпозиция контекстной диаграммы представ- лена на рис. 2.
   Процесс разработки программного средства вклю- чает в себя восемь этапов (рис. 2). На начальном этапе формируется и сохраняется типовая информация. Затем формируется база оценочных материалов, по которым

будет производиться оценка характеристик пользова- теля.
   Эксперт формирует структуру экспертной систе- мы, создавая лингвистические переменные и термы. Входные переменные — оцениваемые характеристики пользователя, а выходные — компоненты интерфейса, на основе которых будет формироваться прототип при- кладной программы.
   Следующий этап — оценка характеристик пользо- вателя, при котором требуется выбрать характеристику и оценить ее с помощью разработанных оценочных ма- териалов. Основной этап — подбор компонентов интер- фейса, где загружаются результаты оценки пользователя и база правил нечеткой экспертной системы. В ходе рабо- ты экспертной системы вычисляется подходящий набор компонентов интерфейса для конкретного пользователя. На заключительном этапе происходит непосред- ственное создание прототипа адаптивного интерфейса прикладной программы, который предоставляется для
работы в системе САПР.

Математическая модель экспертной системы
   Инструментом для определения компонентов интер- фейса в ПИС служит нечеткая ЭС. Основные входные данные — сведения о пользователе. Данные харак- теризуются различной степенью неопределенности, неоднозначности, внутренней противоречивостью, неполнотой, а также представляют количественные и качественные оценки параметров [19].
   Так как данные являются трудно формализованны- ми и специфическими, то при выборе метода искус- ственного интеллекта использована интеллектуальная система, базирующаяся на нечеткой логике и нечетких множествах.




Рис. 2. Декомпозиция контекстной диаграммы.
БД — база данных; ЭВМ — электронно-вычислительная машина; ЭС — экспертная система
Fig. 2. Context diagram decomposition
БД — database; ЭВМ — electronic computer; ЭС — expert system


   Из анализа нечеткого понятия «Системный опыт» было сформировано базовое терм-множество, со- стоящее из трех нечетких переменных: «Низкий»,
«Средний» и «Высокий», и установлена область рас- суждений в виде X = [0; 100] (баллов). Далее была по- строена функция принадлежности для каждого лингви- стического терма из базового терм-множества T.
   Существует большое количество стандартных форм кривых для задания функций принадлежности. Самыми распространенными считаются: треугольная, трапецеи- дальная и гауссова функции принадлежности.
   Совокупность функций принадлежности для каж- дого терма из базового терм-множества T обычно изо- бражается на одном графике. Пример лингвистической переменной «Системный опыт» представлен на рис. 3 в виде трапециевидной функции принадлежности.
   Наиболее распространенный способ логического вывода в нечетких системах — механизм Мамдани. Механизм использует минимаксную композицию не-

Рис. 3. Графики функций принадлежности значений лингвистической переменной «Системный опыт»
Fig. 3. Graphs of the values belonging functions of the linguistic variable “System experience”

четких множеств и включает в себя последовательность действий [19].
   Фаззификация или приведение к нечеткости. Определяются степени истинности, т. е. значения функций принадлежности для левых частей каждого правила (предпосылок или антецедентов). Для базы правил с m правилами обозначим степени истинности как Aik(xk), i = 1..m, k = 1..n.
Нечеткий вывод. Определяются уровни «отсечения»
для левой части каждого из правил: ?i = mini(Aik(xk)), и находятся «усеченные» функции принадлежности: Bi*(y) = mini(?i, Bi(y)).
Композиция или объединение полученных усе-
ченных функций. Используется максимальная ком- позиция нечетких множеств: ?(y) = maxi(Bi*(y)), где ?(y) — функция принадлежности итогового нечеткого множества.
   Дефаззификация или приведение к четкости. Суще- ствует несколько методов дефаззификации. Например, центроидный метод или метод среднего центра [19].
   С учетом введенных понятий построена нечеткая модель, основанная на бинарном нечетком отноше- нии S, которая строится на двух базисных множествах X и Y.
   X = {x1{z1}, x2{z2}, x3{z3}, …, x7{z7}} описывает множество компонент интерфейса, где z — множество, характеризующее каждое x.
   Y = {y1{k1}, y2{k2}, y3{k3}, …, y7{k7}} — множество характеристик пользователя, где k — множество, харак- теризующее каждое y.
   Элементы универсумов имеют следующий содер- жательный смысл:



1) x1 — цветовая гамма (z1 — черно-белый, z2 — не- сколько цветов, z3 — любые цвета), x2 — размер шрифта (z1 — крупный, z2 — средний, z3 — мел- кий), x3 — размер кнопок (z1 — крупные, z2 — сред- ние, z3 — мелкие), x4 — расстояние между кноп- ками (z1 — большое, z2 — среднее, z3 — малое), x5 — звуковое сопровождение (z1 — наличие, z2 — отсутствие), x6 — наличие подсказок (z1 — наличие, z2 — отсутствие), x7 — наличие командной строки (z1 — наличие, z2 — отсутствие).
2) y1 — системный опыт (k1 — высокий, k2 — сред- ний, k3 — низкий), y2 — компьютерная грамотность (k1 — высокая, k2 — средняя, k3 — низкая), y3 — опыт работы с подобными программами (k1 — высо- кий, k2 — средний, k3 — низкий), y4 — машинопись (k1 — высокая, k2 — средняя, k3 — низкая), y5 — дальтонизм (k1 — есть, k2 — нет), y6 — моторика рук (k1 — высокая, k2 — средняя, k3 — низкая), y7 — память (k1 — высокая, k2 — средняя, k3 — низкая).
   Входными данными являются характеристики пользователей, которые задаются лингвистическими переменными. В табл. 1 представлены все входные лингвистические переменные. Для каждой характе- ристики определено множество, которое измеряется в баллах. Для образования новых термов использо- ваны процедуры: синтактическая, представляющая собой логическую связку AND (И), и семантическая — min(?A(x). ?B(x)).
На примере  лингвистической  переменной 
«Системный опыт» описано присвоение значений тер-

мов и построение графиков функций принадлежности нечеткого множества (рис. 3). Для остальных входных лингвистических переменных произведена аналогичная процедура.
   Далее добавлены лингвистические переменные вы- ходных данных. Они представлены в табл. 2. Для ка- ждой характеристики определено множество из разных единиц измерения.
   Для работы механизма нечеткого вывода сформи- рованы продукционные правила. Фрагмент базы пра- вил представлен в табл. 3. Приведено формирования правил для лингвистической переменной «Цветовая гамма», для остальных переменных: «Размер кнопок»,
«Расстояние между кнопками», «Размер шрифта»,
«Звуковое сопровождение», «Подсказки», «Командная строка» терм-множества сформированы аналогично.
   Экспертная система позволила получить решение на основе описанных правил базы знаний.

Проектирование программной инструментальной системы
   Для визуализации работы ПИС использована диа- грамма вариантов использования — визуальная модель, отражающая спецификацию программного средства с точки зрения ее функциональности (рис. 4).
   Работать с программной системой могут эксперт и пользователь, которые входят в систему с разными правами доступа. Для пользователя подбирается ин- терфейс.


Таблица 1. Входные лингвистические переменные
Table 1. Input linguistic variables

Название
Терм-множество (T)
Множество-область (X), баллы
Системный опыт
Высокий
65–100

Средний
35–70

Низкий
0–45
Компьютерная грамотность
Высокий
70–100

Средний
35–75

Низкий
0–40
Опыт работы с подобными программами
Есть
50–100

Частично
25–60

Нет
0–30
Машинопись
Быстро
75–150

Нормально
30–80

Медленно
0–40
Дальтонизм
Есть
0–1

Нет
0,9–2
Моторика рук
Высокая
65–100

Средняя
30–70

Низкая
0–35
Память
Отличная
75–100

Умеренная
40–80

Плохая
0–45

Таблица 2. Выходные лингвистические переменные
Table 2. Output linguistic variables

Название, единица измерения
Терм-множество (T)
Множество-область (X)
Размер шрифта, пиксел
Крупный
14–18

Средний
11–15

Мелкий
8–12
Размер кнопок, коэффициент
Крупный
2–4

Средний
1,5–2,5

Мелкий
0–2
Расстояние между кнопками, коэффициент
Большое
2–4

Среднее
1,5–2,5

Малое
0–2
Цветовая гамма, коэффициент
Черно-белый
0–1,5

Несколько цветов
1,4–2,5

Любые цвета
2,4–4
Звуковое сопровождение, коэффициент
Наличие
0,85–2

Отсутствие
0–0,9
Наличие подсказок, коэффициент
Наличие
0,85–2

Отсутствие
0–0,9
Наличие командной строки, коэффициент
Наличие
0,85–2

Отсутствие
0–0,9
Таблица 3. Нечеткие продукционные правила
Table 3. Fuzzy production rules
Входная лингвистическая переменная Цветовая гамма




Примечание: Д — дальтонизм; СО — системный опыт


   Эксперт занимается настройкой экспертной систе- мы. В настройку входят: формирование структуры; для каждой входной переменной подбор оценочного мате- риала; создание базы правил и тестирование созданной экспертной системы с возможностью подробной трас- сировки расчетов.
   Пользователь после авторизации может оценить свои характеристики с помощью оценочного материала, назначенного экспертом, и приступить к формированию личного адаптивного интерфейса прикладной програм- мы, который предоставляется для работы в САПР.
   В проектной части ПИС можно выделить три этапа. На первом — производится оценка характеристик поль- зователя. На втором — независимо от выбора условия формирования прототипа (создать новый или заменить старый прототип), происходит подбор компонентов интерфейса. На третьем — на основе сформированного набора компонентов создается прототип адаптивного интерфейса прикладной программы. Каждый из этих

этапов непосредственно взаимодействует с базой дан- ных программной системы.

Практическая реализация программной инструментальной системы
   Перед тем как пользователь будет подбирать компо- ненты интерфейса, эксперт создает структуру эксперт- ной системы (рис. 5). Выбрав пункт меню «Эксперт», задаются лингвистические переменные и термы [20].
   Далее эксперт может приступить к формированию базы правил (рис. 6).
   После формирования структуры и создания базы правил проводится тестирование экспертной системы (рис. 7). Эксперт, выбрав пункт меню «Подбор компо- нентов», может установить входные значения. Нажав на кнопку «Рассчитать», ПИС выведет результат подбора компонентов интерфейса в качественных и количе- ственных значениях. Подробные расчеты, выполняе-


























Рис. 4. Диаграмма вариантов использования
Fig. 4. Diagram of use cases

мые экспертной системой, можно просмотреть, нажав на соответствующую кнопку и сохранить в файл (по желанию).
   При входе в ПИС пользователю требуется оце- нить свои характеристики с помощью различных видов диагностики. Например, для оценки качества
«Компьютерная грамотность» пользователю предлага- ется пройти тестирование.
   После оценки характеристик пользователь может перейти к подбору компонентов интерфейса и созда- нию адаптированного прототипа, выбрав пункт меню
«Подбор компонентов интерфейса». Для этого тре- буется выбрать режим создания прототипа и увидеть созданный адаптированный прототип интерфейса при- кладной программы (рис. 8).
   В приведеном примере (пользователь неопытный) получен прототип, который состоит из следующих ком- понентов: размер шрифта — средний; размер кнопок — средний; расстояние между кнопками — большое; цветовая гамма — несколько цветов; наличие подска- зок — есть; наличие звукового сопровождения — есть, наличие командной строки — нет. Проведенное юза- билити тестирование подтвердило адаптированность интерфейсной части программного обеспечения для определенной аудитории пользователей.




Рис. 5. Структура экспертной системы
Fig. 5. Structure of the expert system

Рис. 6. База правил экспертной системы
Fig. 6. The base of the rules of the expert system









Рис. 7. Тестирование экспертной системы
Fig. 7. Expert system testing

Обсуждение результатов
   Разработана ПИС, которая учитывает характе- ристики и возможности пользователя. Для подбора компонентов интерфейса под определенного пользо- вателя использован метод экспертного оценивания. Сформирована база правил на основе продукционной модели знаний. Выполнена оценка результатов полу- ченных характеристик пользователя и правил эксперт- ной системы. В результате создан набор компонентов интерфейса и сгенерирован прототип интерфейса, кото- рый соответствует конкретному пользователю.
   Так как характеристики пользователя имеют раз- личные степени неопределенности, неоднозначности,

Рис. 8. Фрагмент адаптивного интерфейса
Fig. 8. Fragment of the adaptive interface

внутреннюю противоречивость и др., и являются труд- но формализованными и специфическими, то целе- сообразно использовать интеллектуальные системы, базирующиеся на нечеткой логике и нечетких множе- ствах. Наиболее приемлемым в данном случае является метод Мамдани.

Заключение
   Внедрение разработанной экспертной системы по- зволит просто подобрать набор элементов интерфейса под каждого инженера-конструктора и сформировать адаптивный прототип интерфейса прикладной про- граммы. Данный результат улучшит автоматизиро- ванное рабочее место специалиста, а взаимодействие человека и компьютера станет более комфортным и эргономичным.













