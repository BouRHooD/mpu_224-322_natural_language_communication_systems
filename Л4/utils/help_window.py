# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import faiss  
import gensim
import random
import datetime
import numpy as np
import pandas as pd
from math import sqrt
import speech_recognition as sr    
from gensim.models import Word2Vec
from utils.generate_sqlite import *

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (pip install PyQt5) (Qt Designer to edit *.ui - https://build-system.fman.io/qt-designer-download)
from PyQt5 import uic
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *

class SpeechRecognitionThread(QObject):
        user_voice_text_value_signal = pyqtSignal(str)
        end_get_text_from_voice_signal = pyqtSignal(bool)
        
        def __init__(self):
            super().__init__()
            self._isRunning = True
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ speech_recognition –∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.recognizer = sr.Recognizer()
            self.microphone = sr.Microphone()
            print(f"{self.microphone.list_working_microphones()=}")

        @pyqtSlot()
        def get_text_from_voice_run(self):
            try:
                if not self._isRunning: self._isRunning = True; 

                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ source
                with self.microphone as source:
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç...")
                    #self.recognizer.pause_threshold = 0.5             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏—à—å –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏—é 1 —Å–µ–∫—É–Ω–¥—ã
                    self.recognizer.adjust_for_ambient_noise(source)   # –∏—Å–ø–æ–ª—å–∑—É–µ–º adjust_for_ambient_noise –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —à—É–º–æ–≤ –∏–∑ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏
                    audio = self.recognizer.listen(source)             # –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é audio –ø–æ–∫–∞ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –ª–∏—à—å mp3 –∑–≤—É–∫
                    if not self._isRunning: return; 
                
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                    try: 
                        print("–†–∞—Å—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                        zadanie = self.recognizer.recognize_google(audio, language="ru-RU").lower()
                        if not self._isRunning: return; 
                        
                        self.user_voice_text_value_signal.emit(zadanie) 
                    # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ç–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —ç—Ç–∞ –æ—à–∏–±–∫–∞
                    except sr.UnknownValueError:
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å recognize_google")
                    except sr.RequestError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            except Exception as ex:
                print(ex)
            finally:
                self.end_get_text_from_voice_signal.emit(self._isRunning)

        def stop(self):
            self._isRunning = False

''' -------- –§–æ—Ä–º–∞ —Ö–µ–ª–ø–∞ ------- '''   
class HelpWindow(QMainWindow):       
    def __init__(self, *args, **kwargs):
        super(HelpWindow, self).__init__(*args, **kwargs)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ—Ä–º—ã
        self.formOpening()    
        self.voice_ico_on = 'resources\_images\on_voice.png'    
        self.voice_ico_off = 'resources\_images\icons_voicecontrol.png'  
        self.ui.pushButton_SendByVoiseHelp.setIcon(QIcon(self.voice_ico_off))  
        
        self.dislike = 'resources\_images\dislike.png'  
        self.ui.pushButton_Dislike.setIcon(QIcon(self.dislike))  

        self.dir_resource = 'resources'
        self.isDoHelp_version = 2 # old = 1
        if self.isDoHelp_version == 1:
            self.db = SqliteInteraction(self.dir_resource + '/w2v_learn_v1/w2v_sapr.db')
            self.w2v_model = Word2Vec.load(self.dir_resource + "/w2v_learn_v1/articles_model.model") 
            self.ui.pushButton_Dislike.setVisible(True) 
        if self.isDoHelp_version == 2:
            self.ui.pushButton_Dislike.setVisible(False)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.db = SqliteInteraction(self.dir_resource + '/w2v_learn_v2/w2v_sapr.db')
            self.w2v_model = Word2Vec.load(self.dir_resource + "/w2v_learn_v2/w2v_sapr_v2.model")  
            self.df_answers = pd.read_csv(self.dir_resource + '/w2v_learn_v2/Question_Answer.csv', sep=";")
            self.vector_npz = np.load(self.dir_resource + '/w2v_learn_v2/vector.npz')
            self.ques_vec = self.vector_npz['x'] 

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print(self.df_answers.head(10))
            print(f"{self.df_answers.isna().sum()=}")

            # –ò–∑–º–µ–Ω—è–µ–º –ë–î –ø–æ–¥ —Ç–∞–±–ª–∏—Ü—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤)
            pass


        self.doHelpStage = 0 
        self.user_vector = None
        self.HelpNotHelpsStage = 0   

        '''------------ –ü–û–¢–û–ö -----------------'''
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑—å –ø–æ—Ç–æ–∫–∞ —Å pyqt
        self.worker_speach = SpeechRecognitionThread()
        self.worker_speach.user_voice_text_value_signal.connect(self.user_voice_text_value_signal)
        self.worker_speach.end_get_text_from_voice_signal.connect(self.end_get_text_from_voice_signal)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self.IsOnVoiceRecognition = False

        # –ü–æ—Ç–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        self.qthread_speach = QThread(parent=self)
        self.qthread_speach.started.connect(self.worker_speach.get_text_from_voice_run)
        self.worker_speach.moveToThread(self.qthread_speach)
        '''------------ –ü–û–¢–û–ö -----------------'''                  

        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self.ui.pushButton_Dislike.clicked.connect(self.pushButton_Dislike_Clicked)
        self.ui.pushButton_ClearHelp.clicked.connect(self.pushButton_ClearHelp_Clicked)
        self.ui.pushButton_SendMsgHelp.clicked.connect(self.pushButton_SendMsgHelp_Clicked)
        self.ui.pushButton_SendByVoiseHelp.clicked.connect(self.pushButton_SendByVoiseHelp_Clicked)

        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        self.pushButton_ClearHelp_Clicked(ignore_warning=True)
        
    def formOpening(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
        file_ui_path = 'GUI_HELP.ui'
        self.file_icon_path = 'resources\_images\surflay.ico'
        self.ui = uic.loadUi(file_ui_path)                   # GUI, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–∞–ø–∫–µ —Å main.py
        self.ui.setWindowTitle('–õ–µ–æ–Ω–æ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤ 224-322')   # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.ui.setWindowIcon(QIcon(self.file_icon_path))    # –ò–∫–æ–Ω–∫–∞ –Ω–∞ –≥–ª–∞–Ω–æ–µ –æ–∫–Ω–æ
        self.ui.setWindowFlags(self.ui.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        self.ui.show()                                       # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ñ–æ—Ä–º—ã  
    
    def user_voice_text_value_signal(self, _text):
        self.end_get_text_from_voice_signal(True)
        self.doHelp(_text)

    def end_get_text_from_voice_signal(self, _bool):
        if _bool:
            self.IsOnVoiceRecognition = False
            self.ui.pushButton_SendByVoiseHelp.setIcon(QIcon(self.voice_ico_off))
    
    @pyqtSlot()
    def pushButton_SendByVoiseHelp_Clicked(self):
        '''–ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫'''
        if self.IsOnVoiceRecognition: 
            self.closeEvent()
            return
        '''–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫'''
        self.closeEvent()
        self.IsOnVoiceRecognition = True
        self.ui.pushButton_SendByVoiseHelp.setIcon(QIcon(self.voice_ico_on))  
        self.qthread_speach.start() 
    
    @pyqtSlot()
    def closeEvent(self):
        '''–ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫'''
        self.worker_speach.stop()
        self.qthread_speach.quit()
        #self.qthread_speach.wait()
        self.IsOnVoiceRecognition = False
        self.ui.pushButton_SendByVoiseHelp.setIcon(QIcon(self.voice_ico_off))

    def plainTextEdit_TextDialogHelp_append_with_date_bot(self, text):
        self.ui.plainTextEdit_TextDialogHelp.appendPlainText(f"{datetime.datetime.now().replace(microsecond=0)} [ü§ñ]: {text}")

    def plainTextEdit_TextDialogHelp_append_with_date_user(self, text):
        self.ui.plainTextEdit_TextDialogHelp.appendPlainText(f"{datetime.datetime.now().replace(microsecond=0)} [üë§]: {text}")

    def pushButton_Dislike_Clicked(self):
        self.doHelp('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', False)

    def pushButton_ClearHelp_Clicked(self, ignore_warning = False):
        if not ignore_warning:
            msg = QMessageBox(self) 
            msg.setIcon(QMessageBox.Warning) 
            msg.setText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–æ–π?") 
            msg.setWindowTitle("–í–Ω–∏–º–∞–Ω–∏–µ!") 
            msg.setWindowIcon(QIcon(self.file_icon_path))
            msg.addButton("–ù–µ—Ç", QMessageBox.NoRole)
            yes_button = msg.addButton("–î–∞", QMessageBox.YesRole)
            msg.setWindowModality(0)
            msg.activateWindow()
            msg.show()
            msg.exec_()
            if msg.clickedButton() != yes_button: return; 
        self.ui.plainTextEdit_TextDialogHelp.clear()
        self.plainTextEdit_TextDialogHelp_append_with_date_bot("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.plainTextEdit_TextDialogHelp_append_with_date_bot('–¢–µ–º–∞ "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –°–ê–ü–† –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –≤ –∑–∞–¥–∞—á–∞—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"')
        self.plainTextEdit_TextDialogHelp_append_with_date_bot('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –¥–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç')

    def pushButton_SendMsgHelp_Clicked(self):
        user_text = self.ui.plainTextEdit_UserTextHelp.toPlainText()
        self.doHelp(user_text)
        self.ui.plainTextEdit_UserTextHelp.clear()
    
    def getRubricsFromDB(self):
        rubrics = self.db.select('rubrics')
        rubrics = rubrics.fetchall()
        return rubrics

    def doHelp(self, inText: str, printInText: bool = True):
        if self.isDoHelp_version == 1: self.doHelp_v1(inText, printInText);  
        if self.isDoHelp_version == 2: self.doHelp_v2(inText, printInText);  

    def doHelp_v1(self, inText: str, printInText: bool = True):
        if len(inText) <= 0: return; 
        if printInText:
            self.plainTextEdit_TextDialogHelp_append_with_date_user(inText)

        inText = inText.lower()
        if inText == '–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ': 
            if self.user_vector == None: return; 
            self.doHelpStage = 1

        if self.doHelpStage == 0:
            try:
                words = 0
                vectors_sum = 0
                for word in inText.split():
                    _word = word.replace("?", "")
                    if self.w2v_model.wv.has_index_for(_word) and len(_word) > 3:
                        vectors_sum+=self.w2v_model.wv.get_vector(_word).sum()
                        words+=1

                if words == 0:
                    self.plainTextEdit_TextDialogHelp_append_with_date_bot("–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤–∞")
                    return
                
                self.user_vector = vectors_sum / words
                rubrics = self.getRubricsFromDB()
                final_vector = float(rubrics[0][0])
                final_rubric = rubrics[0][1]
                for i in rubrics:
                    if abs(float(i[0]) - self.user_vector) > abs(final_vector - self.user_vector):
                        final_vector = float(i[0])
                        final_rubric = i[1]

                runbrics_word = self.db.selectWhere('rubrics_word', {'rubric': final_rubric})
                res = []
                for i in runbrics_word:
                    for j in i:
                        if j[1].lower() in inText.lower():
                            res.append(f"{j[1]} - {j[2]}")

                if len(res) != 0:
                    for i in res:
                        self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"[–†—É–±—Ä–∏–∫–∞ - {final_rubric}]\n{i}")
                else:
                    print("–ü–æ–¥—Ç–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –≤—ã–¥–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    rand = random.choice(runbrics_word)
                    rand = random.choice(rand)
                    self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"[–†—É–±—Ä–∏–∫–∞ - {final_rubric}]\n{rand[1]} - {rand[2]}")
            except Exception as ex: 
                print(ex)
        elif self.doHelpStage == 1:
            try:
                self.plainTextEdit_TextDialogHelp_append_with_date_bot("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä—É–±—Ä–∏–∫—É:")
                rubrics = self.getRubricsFromDB()
                count = 1
                for i in rubrics:
                    self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"{count} - {i[1]}")
                    count += 1
                self.doHelpStage += 1; 
            except Exception as ex: 
                print(ex)
                self.doHelpStage = 0; 
        elif self.doHelpStage == 2:
            try:
                real_rubric = int(inText) - 1
                rubrics = self.getRubricsFromDB()
                sing = 1
                if float(rubrics[real_rubric][0]) < float(self.user_vector):
                    refactor = sqrt(abs(float(self.user_vector) - float(rubrics[real_rubric][0])))
                else:
                    sing = -1
                    refactor = sqrt(abs(float(rubrics[real_rubric][0]) - float(self.user_vector)))
                vector = float(rubrics[real_rubric][0]) + (sing * refactor)
                self.db.update('rubrics', {'vector': vector}, 'rubric', rubrics[real_rubric][1])
                self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"–†—É–±—Ä–∏–∫–∞ '{rubrics[real_rubric][1]}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä = {vector}")
            except Exception as ex: 
                print(ex)
                self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"–†—É–±—Ä–∏–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            finally:
                self.doHelpStage = 0; 

    def doHelp_v2(self, inText: str, printInText: bool = True):
        if len(inText) <= 0: return; 
        if printInText:
            self.plainTextEdit_TextDialogHelp_append_with_date_user(inText)

        inText = inText.lower()
        if inText == '–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ': 
            if self.user_vector == None: return; 
            self.doHelpStage = 1

        if self.doHelpStage == 0:
            try:
                def trained_sentence_vec(sent):
                    # Filter out terms that are not in the vocabulary from the question sentence
                    #qu_voc = [tm for tm in sent if tm in w2v.wv]
                    qu_voc = []
                    for tm in sent:
                        if tm in self.w2v_model.wv:
                            qu_voc.append(tm)

                    # Get the embedding of the characters
                    #emb = np.vstack([w2v.wv[tm] for tm in qu_voc])
                    w2v_list = []
                    for tm in qu_voc:
                        w2v_list.append(self.w2v_model.wv[tm])
                    if len(w2v_list) <= 0: return None; 
                    emb = np.vstack(w2v_list)
                    # Calculate the vectors of each included word to get the vector of the question
                    ave_vec = np.mean(emb, axis=0)
                    return ave_vec

                def find_answer(qr_sentence, ques_vec):
                    # use one query sentence to retrieve answer
                    qr_sentence = gensim.utils.simple_preprocess(qr_sentence)
                    qr_sent_vec = trained_sentence_vec(qr_sentence)
                    if qr_sent_vec is None: return None; 

                    # perform vector search through similarity comparison
                    n_dim = ques_vec.shape[1]
                    x = np.vstack(ques_vec).astype(np.float32)
                    q = qr_sent_vec.reshape(1, -1)
                    index = faiss.index_factory(n_dim, "Flat", faiss.METRIC_INNER_PRODUCT)
                    faiss.normalize_L2(x)
                    index.add(x)
                    faiss.normalize_L2(q)
                    similarity, idx = index.search(q, k=index.ntotal)
                    ans_idx = idx[0][0]
                    return ans_idx
                
                ans_idx = find_answer(inText, self.ques_vec)
                response_rubric = self.df_answers["–†—É–±—Ä–∏–∫–∞"][ans_idx]
                response_question = self.df_answers["–í–æ–ø—Ä–æ—Å"][ans_idx]
                response_answer = self.df_answers["–û—Ç–≤–µ—Ç"][ans_idx]

                print("–ó–∞–ø—Ä–æ—Å: ", inText)
                print("–í–æ–ø—Ä–æ—Å: ", response_question)
                print("–û—Ç–≤–µ—Ç: ", response_answer)

                self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"\n[–†—É–±—Ä–∏–∫–∞ - {response_rubric}]\n{response_question} - {response_answer}")
            except Exception as ex: 
                print(ex)
        elif self.doHelpStage == 1:
            try:
                pass
            except Exception as ex: 
                print(ex)
                self.doHelpStage = 0; 
        elif self.doHelpStage == 2:
            try:
                pass
            except Exception as ex: 
                print(ex)
                self.plainTextEdit_TextDialogHelp_append_with_date_bot(f"–†—É–±—Ä–∏–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            finally:
                self.doHelpStage = 0;       